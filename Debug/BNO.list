
BNO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e20  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af4  08008f30  08008f30  00018f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa24  0800aa24  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa24  0800aa24  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa24  0800aa24  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa24  0800aa24  0001aa24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa28  0800aa28  0001aa28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800aa2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  200001e4  0800ac10  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008fc  0800ac10  000208fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dabd  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002309  00000000  00000000  0002dd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00030018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000997  00000000  00000000  00030c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019058  00000000  00000000  00031607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010594  00000000  00000000  0004a65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087ff7  00000000  00000000  0005abf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044f4  00000000  00000000  000e2bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e70e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f18 	.word	0x08008f18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008f18 	.word	0x08008f18

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b0af      	sub	sp, #188	; 0xbc
 8000f48:	af2a      	add	r7, sp, #168	; 0xa8
 8000f4a:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	799b      	ldrb	r3, [r3, #6]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8000f5c:	687c      	ldr	r4, [r7, #4]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	9329      	str	r3, [sp, #164]	; 0xa4
 8000f62:	f107 030e 	add.w	r3, r7, #14
 8000f66:	9328      	str	r3, [sp, #160]	; 0xa0
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9327      	str	r3, [sp, #156]	; 0x9c
 8000f6c:	4668      	mov	r0, sp
 8000f6e:	f104 0310 	add.w	r3, r4, #16
 8000f72:	229c      	movs	r2, #156	; 0x9c
 8000f74:	4619      	mov	r1, r3
 8000f76:	f006 f805 	bl	8006f84 <memcpy>
 8000f7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f7e:	f001 fbe4 	bl	800274a <bno055_read_regs>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <bno055_init+0x4c>
        return err;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	e0b6      	b.n	80010fe <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	2ba0      	cmp	r3, #160	; 0xa0
 8000f94:	d001      	beq.n	8000f9a <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8000f96:	2306      	movs	r3, #6
 8000f98:	e0b1      	b.n	80010fe <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f001 faa2 	bl	80024e6 <bno055_set_opmode>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <bno055_init+0x6c>
        return err;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	e0a6      	b.n	80010fe <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f002 fa7f 	bl	80034b4 <HAL_Delay>
    bno055_reset(imu);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f001 fb81 	bl	80026be <bno055_reset>
    HAL_Delay(5000);
 8000fbc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fc0:	f002 fa78 	bl	80034b4 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f001 fb1c 	bl	8002604 <bno055_set_pwr_mode>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <bno055_init+0x96>
        return err;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	e091      	b.n	80010fe <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f002 fa6a 	bl	80034b4 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f001 fc14 	bl	8002810 <bno055_set_page>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <bno055_init+0xb2>
        return err;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	e083      	b.n	80010fe <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8000ff6:	200c      	movs	r0, #12
 8000ff8:	f002 fa5c 	bl	80034b4 <HAL_Delay>
    bno055_on(imu);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f001 fb81 	bl	8002704 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	791b      	ldrb	r3, [r3, #4]
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f001 fa6c 	bl	80024e6 <bno055_set_opmode>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <bno055_init+0xd8>
        return err;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	e070      	b.n	80010fe <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800101c:	2018      	movs	r0, #24
 800101e:	f002 fa49 	bl	80034b4 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a38      	ldr	r2, [pc, #224]	; (8001108 <bno055_init+0x1c4>)
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a38      	ldr	r2, [pc, #224]	; (800110c <bno055_init+0x1c8>)
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a37      	ldr	r2, [pc, #220]	; (8001110 <bno055_init+0x1cc>)
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a37      	ldr	r2, [pc, #220]	; (8001114 <bno055_init+0x1d0>)
 8001038:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a36      	ldr	r2, [pc, #216]	; (8001118 <bno055_init+0x1d4>)
 800103e:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a36      	ldr	r2, [pc, #216]	; (800111c <bno055_init+0x1d8>)
 8001044:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a35      	ldr	r2, [pc, #212]	; (8001120 <bno055_init+0x1dc>)
 800104a:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a35      	ldr	r2, [pc, #212]	; (8001124 <bno055_init+0x1e0>)
 8001050:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a34      	ldr	r2, [pc, #208]	; (8001128 <bno055_init+0x1e4>)
 8001056:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a34      	ldr	r2, [pc, #208]	; (800112c <bno055_init+0x1e8>)
 800105c:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a33      	ldr	r2, [pc, #204]	; (8001130 <bno055_init+0x1ec>)
 8001062:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a33      	ldr	r2, [pc, #204]	; (8001134 <bno055_init+0x1f0>)
 8001068:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a32      	ldr	r2, [pc, #200]	; (8001138 <bno055_init+0x1f4>)
 800106e:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a32      	ldr	r2, [pc, #200]	; (800113c <bno055_init+0x1f8>)
 8001074:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a31      	ldr	r2, [pc, #196]	; (8001140 <bno055_init+0x1fc>)
 800107a:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a31      	ldr	r2, [pc, #196]	; (8001144 <bno055_init+0x200>)
 8001080:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a30      	ldr	r2, [pc, #192]	; (8001148 <bno055_init+0x204>)
 8001086:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a30      	ldr	r2, [pc, #192]	; (800114c <bno055_init+0x208>)
 800108c:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <bno055_init+0x20c>)
 8001092:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a2f      	ldr	r2, [pc, #188]	; (8001154 <bno055_init+0x210>)
 8001098:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a2e      	ldr	r2, [pc, #184]	; (8001158 <bno055_init+0x214>)
 800109e:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a2e      	ldr	r2, [pc, #184]	; (800115c <bno055_init+0x218>)
 80010a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a2d      	ldr	r2, [pc, #180]	; (8001160 <bno055_init+0x21c>)
 80010ac:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a2c      	ldr	r2, [pc, #176]	; (8001164 <bno055_init+0x220>)
 80010b2:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a2c      	ldr	r2, [pc, #176]	; (8001168 <bno055_init+0x224>)
 80010b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a2b      	ldr	r2, [pc, #172]	; (800116c <bno055_init+0x228>)
 80010c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a2a      	ldr	r2, [pc, #168]	; (8001170 <bno055_init+0x22c>)
 80010c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a29      	ldr	r2, [pc, #164]	; (8001174 <bno055_init+0x230>)
 80010d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a28      	ldr	r2, [pc, #160]	; (8001178 <bno055_init+0x234>)
 80010d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a27      	ldr	r2, [pc, #156]	; (800117c <bno055_init+0x238>)
 80010e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a26      	ldr	r2, [pc, #152]	; (8001180 <bno055_init+0x23c>)
 80010e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a25      	ldr	r2, [pc, #148]	; (8001184 <bno055_init+0x240>)
 80010f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a24      	ldr	r2, [pc, #144]	; (8001188 <bno055_init+0x244>)
 80010f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}
 8001106:	bf00      	nop
 8001108:	0800118d 	.word	0x0800118d
 800110c:	080011f5 	.word	0x080011f5
 8001110:	08001279 	.word	0x08001279
 8001114:	080012fd 	.word	0x080012fd
 8001118:	08001381 	.word	0x08001381
 800111c:	08001451 	.word	0x08001451
 8001120:	080014d5 	.word	0x080014d5
 8001124:	08001559 	.word	0x08001559
 8001128:	080015dd 	.word	0x080015dd
 800112c:	080016ad 	.word	0x080016ad
 8001130:	08001731 	.word	0x08001731
 8001134:	080017b5 	.word	0x080017b5
 8001138:	08001839 	.word	0x08001839
 800113c:	08001909 	.word	0x08001909
 8001140:	08001979 	.word	0x08001979
 8001144:	080019e9 	.word	0x080019e9
 8001148:	08001a59 	.word	0x08001a59
 800114c:	08001b19 	.word	0x08001b19
 8001150:	08001b9d 	.word	0x08001b9d
 8001154:	08001c21 	.word	0x08001c21
 8001158:	08001ca5 	.word	0x08001ca5
 800115c:	08001d75 	.word	0x08001d75
 8001160:	08001df9 	.word	0x08001df9
 8001164:	08001e7d 	.word	0x08001e7d
 8001168:	08001f01 	.word	0x08001f01
 800116c:	08001fd1 	.word	0x08001fd1
 8001170:	08002041 	.word	0x08002041
 8001174:	080020b1 	.word	0x080020b1
 8001178:	08002121 	.word	0x08002121
 800117c:	08002191 	.word	0x08002191
 8001180:	08002279 	.word	0x08002279
 8001184:	08002349 	.word	0x08002349
 8001188:	08002417 	.word	0x08002417

0800118c <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b0af      	sub	sp, #188	; 0xbc
 8001190:	af2a      	add	r7, sp, #168	; 0xa8
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 800119a:	687c      	ldr	r4, [r7, #4]
 800119c:	2301      	movs	r3, #1
 800119e:	9329      	str	r3, [sp, #164]	; 0xa4
 80011a0:	f107 030e 	add.w	r3, r7, #14
 80011a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80011a6:	2334      	movs	r3, #52	; 0x34
 80011a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80011aa:	4668      	mov	r0, sp
 80011ac:	f104 0310 	add.w	r3, r4, #16
 80011b0:	229c      	movs	r2, #156	; 0x9c
 80011b2:	4619      	mov	r1, r3
 80011b4:	f005 fee6 	bl	8006f84 <memcpy>
 80011b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011bc:	f001 fac5 	bl	800274a <bno055_read_regs>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <bno055_temperature+0x42>
        return err;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	e00d      	b.n	80011ea <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7bdb      	ldrb	r3, [r3, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <bno055_temperature+0x54>
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	e001      	b.n	80011e4 <bno055_temperature+0x58>
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd90      	pop	{r4, r7, pc}
	...

080011f4 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b0af      	sub	sp, #188	; 0xbc
 80011f8:	af2a      	add	r7, sp, #168	; 0xa8
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 80011fe:	687c      	ldr	r4, [r7, #4]
 8001200:	2302      	movs	r3, #2
 8001202:	9329      	str	r3, [sp, #164]	; 0xa4
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	9328      	str	r3, [sp, #160]	; 0xa0
 800120a:	2308      	movs	r3, #8
 800120c:	9327      	str	r3, [sp, #156]	; 0x9c
 800120e:	4668      	mov	r0, sp
 8001210:	f104 0310 	add.w	r3, r4, #16
 8001214:	229c      	movs	r2, #156	; 0x9c
 8001216:	4619      	mov	r1, r3
 8001218:	f005 feb4 	bl	8006f84 <memcpy>
 800121c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001220:	f001 fa93 	bl	800274a <bno055_read_regs>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <bno055_acc_x+0x3e>
        return err;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	e01b      	b.n	800126a <bno055_acc_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001232:	7b7b      	ldrb	r3, [r7, #13]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b21a      	sxth	r2, r3
 8001238:	7b3b      	ldrb	r3, [r7, #12]
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21b      	sxth	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fcdb 	bl	8000bfc <__aeabi_i2f>
 8001246:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <bno055_acc_x+0x60>
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <bno055_acc_x+0x80>)
 8001252:	e001      	b.n	8001258 <bno055_acc_x+0x64>
 8001254:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f7ff fdd6 	bl	8000e0c <__aeabi_fdiv>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001268:	2300      	movs	r3, #0
};
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bd90      	pop	{r4, r7, pc}
 8001272:	bf00      	nop
 8001274:	42c80000 	.word	0x42c80000

08001278 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b0af      	sub	sp, #188	; 0xbc
 800127c:	af2a      	add	r7, sp, #168	; 0xa8
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001282:	687c      	ldr	r4, [r7, #4]
 8001284:	2302      	movs	r3, #2
 8001286:	9329      	str	r3, [sp, #164]	; 0xa4
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	9328      	str	r3, [sp, #160]	; 0xa0
 800128e:	230a      	movs	r3, #10
 8001290:	9327      	str	r3, [sp, #156]	; 0x9c
 8001292:	4668      	mov	r0, sp
 8001294:	f104 0310 	add.w	r3, r4, #16
 8001298:	229c      	movs	r2, #156	; 0x9c
 800129a:	4619      	mov	r1, r3
 800129c:	f005 fe72 	bl	8006f84 <memcpy>
 80012a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012a4:	f001 fa51 	bl	800274a <bno055_read_regs>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <bno055_acc_y+0x3e>
        return err;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	e01b      	b.n	80012ee <bno055_acc_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80012b6:	7b7b      	ldrb	r3, [r7, #13]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	7b3b      	ldrb	r3, [r7, #12]
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fc99 	bl	8000bfc <__aeabi_i2f>
 80012ca:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <bno055_acc_y+0x60>
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <bno055_acc_y+0x80>)
 80012d6:	e001      	b.n	80012dc <bno055_acc_y+0x64>
 80012d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 80012dc:	4619      	mov	r1, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	f7ff fd94 	bl	8000e0c <__aeabi_fdiv>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80012ec:	2300      	movs	r3, #0
};
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd90      	pop	{r4, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	42c80000 	.word	0x42c80000

080012fc <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b0af      	sub	sp, #188	; 0xbc
 8001300:	af2a      	add	r7, sp, #168	; 0xa8
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001306:	687c      	ldr	r4, [r7, #4]
 8001308:	2302      	movs	r3, #2
 800130a:	9329      	str	r3, [sp, #164]	; 0xa4
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	9328      	str	r3, [sp, #160]	; 0xa0
 8001312:	230c      	movs	r3, #12
 8001314:	9327      	str	r3, [sp, #156]	; 0x9c
 8001316:	4668      	mov	r0, sp
 8001318:	f104 0310 	add.w	r3, r4, #16
 800131c:	229c      	movs	r2, #156	; 0x9c
 800131e:	4619      	mov	r1, r3
 8001320:	f005 fe30 	bl	8006f84 <memcpy>
 8001324:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001328:	f001 fa0f 	bl	800274a <bno055_read_regs>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <bno055_acc_z+0x3e>
        return err;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	e01b      	b.n	8001372 <bno055_acc_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800133a:	7b7b      	ldrb	r3, [r7, #13]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	7b3b      	ldrb	r3, [r7, #12]
 8001342:	b21b      	sxth	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b21b      	sxth	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fc57 	bl	8000bfc <__aeabi_i2f>
 800134e:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <bno055_acc_z+0x60>
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <bno055_acc_z+0x80>)
 800135a:	e001      	b.n	8001360 <bno055_acc_z+0x64>
 800135c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001360:	4619      	mov	r1, r3
 8001362:	4610      	mov	r0, r2
 8001364:	f7ff fd52 	bl	8000e0c <__aeabi_fdiv>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001370:	2300      	movs	r3, #0
};
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bd90      	pop	{r4, r7, pc}
 800137a:	bf00      	nop
 800137c:	42c80000 	.word	0x42c80000

08001380 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b0b1      	sub	sp, #196	; 0xc4
 8001384:	af2a      	add	r7, sp, #168	; 0xa8
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 800138a:	687c      	ldr	r4, [r7, #4]
 800138c:	2306      	movs	r3, #6
 800138e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	9328      	str	r3, [sp, #160]	; 0xa0
 8001396:	2308      	movs	r3, #8
 8001398:	9327      	str	r3, [sp, #156]	; 0x9c
 800139a:	4668      	mov	r0, sp
 800139c:	f104 0310 	add.w	r3, r4, #16
 80013a0:	229c      	movs	r2, #156	; 0x9c
 80013a2:	4619      	mov	r1, r3
 80013a4:	f005 fdee 	bl	8006f84 <memcpy>
 80013a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013ac:	f001 f9cd 	bl	800274a <bno055_read_regs>
 80013b0:	4603      	mov	r3, r0
 80013b2:	75fb      	strb	r3, [r7, #23]
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <bno055_acc+0x3e>
        return err;
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	e042      	b.n	8001444 <bno055_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <bno055_acc+0x4a>
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <bno055_acc+0xcc>)
 80013c8:	e001      	b.n	80013ce <bno055_acc+0x4e>
 80013ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80013ce:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80013d0:	7a7b      	ldrb	r3, [r7, #9]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	7a3b      	ldrb	r3, [r7, #8]
 80013d8:	b21b      	sxth	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fc0c 	bl	8000bfc <__aeabi_i2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	6939      	ldr	r1, [r7, #16]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fd0f 	bl	8000e0c <__aeabi_fdiv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80013f6:	7afb      	ldrb	r3, [r7, #11]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	7abb      	ldrb	r3, [r7, #10]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b21b      	sxth	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fbf9 	bl	8000bfc <__aeabi_i2f>
 800140a:	4603      	mov	r3, r0
 800140c:	6939      	ldr	r1, [r7, #16]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fcfc 	bl	8000e0c <__aeabi_fdiv>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 800141c:	7b7b      	ldrb	r3, [r7, #13]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	b21a      	sxth	r2, r3
 8001422:	7b3b      	ldrb	r3, [r7, #12]
 8001424:	b21b      	sxth	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b21b      	sxth	r3, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fbe6 	bl	8000bfc <__aeabi_i2f>
 8001430:	4603      	mov	r3, r0
 8001432:	6939      	ldr	r1, [r7, #16]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fce9 	bl	8000e0c <__aeabi_fdiv>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 8001442:	2300      	movs	r3, #0
};
 8001444:	4618      	mov	r0, r3
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd90      	pop	{r4, r7, pc}
 800144c:	42c80000 	.word	0x42c80000

08001450 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b0af      	sub	sp, #188	; 0xbc
 8001454:	af2a      	add	r7, sp, #168	; 0xa8
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800145a:	687c      	ldr	r4, [r7, #4]
 800145c:	2302      	movs	r3, #2
 800145e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	9328      	str	r3, [sp, #160]	; 0xa0
 8001466:	2328      	movs	r3, #40	; 0x28
 8001468:	9327      	str	r3, [sp, #156]	; 0x9c
 800146a:	4668      	mov	r0, sp
 800146c:	f104 0310 	add.w	r3, r4, #16
 8001470:	229c      	movs	r2, #156	; 0x9c
 8001472:	4619      	mov	r1, r3
 8001474:	f005 fd86 	bl	8006f84 <memcpy>
 8001478:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800147c:	f001 f965 	bl	800274a <bno055_read_regs>
 8001480:	4603      	mov	r3, r0
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <bno055_linear_acc_x+0x3e>
        return err;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	e01b      	b.n	80014c6 <bno055_linear_acc_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800148e:	7b7b      	ldrb	r3, [r7, #13]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b21a      	sxth	r2, r3
 8001494:	7b3b      	ldrb	r3, [r7, #12]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21b      	sxth	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fbad 	bl	8000bfc <__aeabi_i2f>
 80014a2:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <bno055_linear_acc_x+0x60>
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <bno055_linear_acc_x+0x80>)
 80014ae:	e001      	b.n	80014b4 <bno055_linear_acc_x+0x64>
 80014b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 80014b4:	4619      	mov	r1, r3
 80014b6:	4610      	mov	r0, r2
 80014b8:	f7ff fca8 	bl	8000e0c <__aeabi_fdiv>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80014c4:	2300      	movs	r3, #0
};
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	42c80000 	.word	0x42c80000

080014d4 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b0af      	sub	sp, #188	; 0xbc
 80014d8:	af2a      	add	r7, sp, #168	; 0xa8
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80014de:	687c      	ldr	r4, [r7, #4]
 80014e0:	2302      	movs	r3, #2
 80014e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80014ea:	232a      	movs	r3, #42	; 0x2a
 80014ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80014ee:	4668      	mov	r0, sp
 80014f0:	f104 0310 	add.w	r3, r4, #16
 80014f4:	229c      	movs	r2, #156	; 0x9c
 80014f6:	4619      	mov	r1, r3
 80014f8:	f005 fd44 	bl	8006f84 <memcpy>
 80014fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001500:	f001 f923 	bl	800274a <bno055_read_regs>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <bno055_linear_acc_y+0x3e>
        return err;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	e01b      	b.n	800154a <bno055_linear_acc_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001512:	7b7b      	ldrb	r3, [r7, #13]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	7b3b      	ldrb	r3, [r7, #12]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21b      	sxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fb6b 	bl	8000bfc <__aeabi_i2f>
 8001526:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <bno055_linear_acc_y+0x60>
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <bno055_linear_acc_y+0x80>)
 8001532:	e001      	b.n	8001538 <bno055_linear_acc_y+0x64>
 8001534:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001538:	4619      	mov	r1, r3
 800153a:	4610      	mov	r0, r2
 800153c:	f7ff fc66 	bl	8000e0c <__aeabi_fdiv>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001548:	2300      	movs	r3, #0
};
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	bf00      	nop
 8001554:	42c80000 	.word	0x42c80000

08001558 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b0af      	sub	sp, #188	; 0xbc
 800155c:	af2a      	add	r7, sp, #168	; 0xa8
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001562:	687c      	ldr	r4, [r7, #4]
 8001564:	2302      	movs	r3, #2
 8001566:	9329      	str	r3, [sp, #164]	; 0xa4
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	9328      	str	r3, [sp, #160]	; 0xa0
 800156e:	232c      	movs	r3, #44	; 0x2c
 8001570:	9327      	str	r3, [sp, #156]	; 0x9c
 8001572:	4668      	mov	r0, sp
 8001574:	f104 0310 	add.w	r3, r4, #16
 8001578:	229c      	movs	r2, #156	; 0x9c
 800157a:	4619      	mov	r1, r3
 800157c:	f005 fd02 	bl	8006f84 <memcpy>
 8001580:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001584:	f001 f8e1 	bl	800274a <bno055_read_regs>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <bno055_linear_acc_z+0x3e>
        return err;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	e01b      	b.n	80015ce <bno055_linear_acc_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001596:	7b7b      	ldrb	r3, [r7, #13]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	7b3b      	ldrb	r3, [r7, #12]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fb29 	bl	8000bfc <__aeabi_i2f>
 80015aa:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <bno055_linear_acc_z+0x60>
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <bno055_linear_acc_z+0x80>)
 80015b6:	e001      	b.n	80015bc <bno055_linear_acc_z+0x64>
 80015b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f7ff fc24 	bl	8000e0c <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80015cc:	2300      	movs	r3, #0
};
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	42c80000 	.word	0x42c80000

080015dc <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b0b1      	sub	sp, #196	; 0xc4
 80015e0:	af2a      	add	r7, sp, #168	; 0xa8
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 80015e6:	687c      	ldr	r4, [r7, #4]
 80015e8:	2306      	movs	r3, #6
 80015ea:	9329      	str	r3, [sp, #164]	; 0xa4
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	9328      	str	r3, [sp, #160]	; 0xa0
 80015f2:	2328      	movs	r3, #40	; 0x28
 80015f4:	9327      	str	r3, [sp, #156]	; 0x9c
 80015f6:	4668      	mov	r0, sp
 80015f8:	f104 0310 	add.w	r3, r4, #16
 80015fc:	229c      	movs	r2, #156	; 0x9c
 80015fe:	4619      	mov	r1, r3
 8001600:	f005 fcc0 	bl	8006f84 <memcpy>
 8001604:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001608:	f001 f89f 	bl	800274a <bno055_read_regs>
 800160c:	4603      	mov	r3, r0
 800160e:	75fb      	strb	r3, [r7, #23]
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <bno055_linear_acc+0x3e>
        return err;
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	e042      	b.n	80016a0 <bno055_linear_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <bno055_linear_acc+0x4a>
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <bno055_linear_acc+0xcc>)
 8001624:	e001      	b.n	800162a <bno055_linear_acc+0x4e>
 8001626:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800162a:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 800162c:	7a7b      	ldrb	r3, [r7, #9]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b21a      	sxth	r2, r3
 8001632:	7a3b      	ldrb	r3, [r7, #8]
 8001634:	b21b      	sxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b21b      	sxth	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fade 	bl	8000bfc <__aeabi_i2f>
 8001640:	4603      	mov	r3, r0
 8001642:	6939      	ldr	r1, [r7, #16]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fbe1 	bl	8000e0c <__aeabi_fdiv>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001652:	7afb      	ldrb	r3, [r7, #11]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	7abb      	ldrb	r3, [r7, #10]
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b21b      	sxth	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff facb 	bl	8000bfc <__aeabi_i2f>
 8001666:	4603      	mov	r3, r0
 8001668:	6939      	ldr	r1, [r7, #16]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fbce 	bl	8000e0c <__aeabi_fdiv>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001678:	7b7b      	ldrb	r3, [r7, #13]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b21a      	sxth	r2, r3
 800167e:	7b3b      	ldrb	r3, [r7, #12]
 8001680:	b21b      	sxth	r3, r3
 8001682:	4313      	orrs	r3, r2
 8001684:	b21b      	sxth	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fab8 	bl	8000bfc <__aeabi_i2f>
 800168c:	4603      	mov	r3, r0
 800168e:	6939      	ldr	r1, [r7, #16]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fbbb 	bl	8000e0c <__aeabi_fdiv>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 800169e:	2300      	movs	r3, #0
};
 80016a0:	4618      	mov	r0, r3
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}
 80016a8:	42c80000 	.word	0x42c80000

080016ac <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b0af      	sub	sp, #188	; 0xbc
 80016b0:	af2a      	add	r7, sp, #168	; 0xa8
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 80016b6:	687c      	ldr	r4, [r7, #4]
 80016b8:	2302      	movs	r3, #2
 80016ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80016c2:	2314      	movs	r3, #20
 80016c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80016c6:	4668      	mov	r0, sp
 80016c8:	f104 0310 	add.w	r3, r4, #16
 80016cc:	229c      	movs	r2, #156	; 0x9c
 80016ce:	4619      	mov	r1, r3
 80016d0:	f005 fc58 	bl	8006f84 <memcpy>
 80016d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016d8:	f001 f837 	bl	800274a <bno055_read_regs>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <bno055_gyro_x+0x3e>
        return err;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	e01b      	b.n	8001722 <bno055_gyro_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	7b3b      	ldrb	r3, [r7, #12]
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fa7f 	bl	8000bfc <__aeabi_i2f>
 80016fe:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <bno055_gyro_x+0x62>
 8001708:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800170c:	e000      	b.n	8001710 <bno055_gyro_x+0x64>
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <bno055_gyro_x+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f7ff fb7a 	bl	8000e0c <__aeabi_fdiv>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001720:	2300      	movs	r3, #0
};
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	bf00      	nop
 800172c:	44610000 	.word	0x44610000

08001730 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b0af      	sub	sp, #188	; 0xbc
 8001734:	af2a      	add	r7, sp, #168	; 0xa8
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800173a:	687c      	ldr	r4, [r7, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	9328      	str	r3, [sp, #160]	; 0xa0
 8001746:	2316      	movs	r3, #22
 8001748:	9327      	str	r3, [sp, #156]	; 0x9c
 800174a:	4668      	mov	r0, sp
 800174c:	f104 0310 	add.w	r3, r4, #16
 8001750:	229c      	movs	r2, #156	; 0x9c
 8001752:	4619      	mov	r1, r3
 8001754:	f005 fc16 	bl	8006f84 <memcpy>
 8001758:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800175c:	f000 fff5 	bl	800274a <bno055_read_regs>
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <bno055_gyro_y+0x3e>
        return err;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	e01b      	b.n	80017a6 <bno055_gyro_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800176e:	7b7b      	ldrb	r3, [r7, #13]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21b      	sxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fa3d 	bl	8000bfc <__aeabi_i2f>
 8001782:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <bno055_gyro_y+0x62>
 800178c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001790:	e000      	b.n	8001794 <bno055_gyro_y+0x64>
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <bno055_gyro_y+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f7ff fb38 	bl	8000e0c <__aeabi_fdiv>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80017a4:	2300      	movs	r3, #0
};
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd90      	pop	{r4, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	44610000 	.word	0x44610000

080017b4 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b0af      	sub	sp, #188	; 0xbc
 80017b8:	af2a      	add	r7, sp, #168	; 0xa8
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80017be:	687c      	ldr	r4, [r7, #4]
 80017c0:	2302      	movs	r3, #2
 80017c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80017ca:	2318      	movs	r3, #24
 80017cc:	9327      	str	r3, [sp, #156]	; 0x9c
 80017ce:	4668      	mov	r0, sp
 80017d0:	f104 0310 	add.w	r3, r4, #16
 80017d4:	229c      	movs	r2, #156	; 0x9c
 80017d6:	4619      	mov	r1, r3
 80017d8:	f005 fbd4 	bl	8006f84 <memcpy>
 80017dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017e0:	f000 ffb3 	bl	800274a <bno055_read_regs>
 80017e4:	4603      	mov	r3, r0
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <bno055_gyro_z+0x3e>
        return err;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	e01b      	b.n	800182a <bno055_gyro_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80017f2:	7b7b      	ldrb	r3, [r7, #13]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	7b3b      	ldrb	r3, [r7, #12]
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b21b      	sxth	r3, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff f9fb 	bl	8000bfc <__aeabi_i2f>
 8001806:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <bno055_gyro_z+0x62>
 8001810:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001814:	e000      	b.n	8001818 <bno055_gyro_z+0x64>
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <bno055_gyro_z+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f7ff faf6 	bl	8000e0c <__aeabi_fdiv>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001828:	2300      	movs	r3, #0
};
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	44610000 	.word	0x44610000

08001838 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b0b1      	sub	sp, #196	; 0xc4
 800183c:	af2a      	add	r7, sp, #168	; 0xa8
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001842:	687c      	ldr	r4, [r7, #4]
 8001844:	2306      	movs	r3, #6
 8001846:	9329      	str	r3, [sp, #164]	; 0xa4
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	9328      	str	r3, [sp, #160]	; 0xa0
 800184e:	2314      	movs	r3, #20
 8001850:	9327      	str	r3, [sp, #156]	; 0x9c
 8001852:	4668      	mov	r0, sp
 8001854:	f104 0310 	add.w	r3, r4, #16
 8001858:	229c      	movs	r2, #156	; 0x9c
 800185a:	4619      	mov	r1, r3
 800185c:	f005 fb92 	bl	8006f84 <memcpy>
 8001860:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001864:	f000 ff71 	bl	800274a <bno055_read_regs>
 8001868:	4603      	mov	r3, r0
 800186a:	75fb      	strb	r3, [r7, #23]
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <bno055_gyro+0x3e>
        return err;
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	e042      	b.n	80018fc <bno055_gyro+0xc4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <bno055_gyro+0x4c>
 800187e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001882:	e000      	b.n	8001886 <bno055_gyro+0x4e>
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <bno055_gyro+0xcc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001886:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001888:	7a7b      	ldrb	r3, [r7, #9]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21a      	sxth	r2, r3
 800188e:	7a3b      	ldrb	r3, [r7, #8]
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21b      	sxth	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f9b0 	bl	8000bfc <__aeabi_i2f>
 800189c:	4603      	mov	r3, r0
 800189e:	6939      	ldr	r1, [r7, #16]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fab3 	bl	8000e0c <__aeabi_fdiv>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80018ae:	7afb      	ldrb	r3, [r7, #11]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	7abb      	ldrb	r3, [r7, #10]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff f99d 	bl	8000bfc <__aeabi_i2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	6939      	ldr	r1, [r7, #16]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff faa0 	bl	8000e0c <__aeabi_fdiv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80018d4:	7b7b      	ldrb	r3, [r7, #13]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	7b3b      	ldrb	r3, [r7, #12]
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f98a 	bl	8000bfc <__aeabi_i2f>
 80018e8:	4603      	mov	r3, r0
 80018ea:	6939      	ldr	r1, [r7, #16]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fa8d 	bl	8000e0c <__aeabi_fdiv>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd90      	pop	{r4, r7, pc}
 8001904:	44610000 	.word	0x44610000

08001908 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b0af      	sub	sp, #188	; 0xbc
 800190c:	af2a      	add	r7, sp, #168	; 0xa8
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001912:	687c      	ldr	r4, [r7, #4]
 8001914:	2302      	movs	r3, #2
 8001916:	9329      	str	r3, [sp, #164]	; 0xa4
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	9328      	str	r3, [sp, #160]	; 0xa0
 800191e:	230e      	movs	r3, #14
 8001920:	9327      	str	r3, [sp, #156]	; 0x9c
 8001922:	4668      	mov	r0, sp
 8001924:	f104 0310 	add.w	r3, r4, #16
 8001928:	229c      	movs	r2, #156	; 0x9c
 800192a:	4619      	mov	r1, r3
 800192c:	f005 fb2a 	bl	8006f84 <memcpy>
 8001930:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001934:	f000 ff09 	bl	800274a <bno055_read_regs>
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <bno055_mag_x+0x3e>
        return err;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	e014      	b.n	8001970 <bno055_mag_x+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001946:	7b7b      	ldrb	r3, [r7, #13]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b21a      	sxth	r2, r3
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21b      	sxth	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff f951 	bl	8000bfc <__aeabi_i2f>
 800195a:	4603      	mov	r3, r0
 800195c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa53 	bl	8000e0c <__aeabi_fdiv>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}

08001978 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b0af      	sub	sp, #188	; 0xbc
 800197c:	af2a      	add	r7, sp, #168	; 0xa8
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001982:	687c      	ldr	r4, [r7, #4]
 8001984:	2302      	movs	r3, #2
 8001986:	9329      	str	r3, [sp, #164]	; 0xa4
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	9328      	str	r3, [sp, #160]	; 0xa0
 800198e:	2310      	movs	r3, #16
 8001990:	9327      	str	r3, [sp, #156]	; 0x9c
 8001992:	4668      	mov	r0, sp
 8001994:	f104 0310 	add.w	r3, r4, #16
 8001998:	229c      	movs	r2, #156	; 0x9c
 800199a:	4619      	mov	r1, r3
 800199c:	f005 faf2 	bl	8006f84 <memcpy>
 80019a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019a4:	f000 fed1 	bl	800274a <bno055_read_regs>
 80019a8:	4603      	mov	r3, r0
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <bno055_mag_y+0x3e>
        return err;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	e014      	b.n	80019e0 <bno055_mag_y+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80019b6:	7b7b      	ldrb	r3, [r7, #13]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	7b3b      	ldrb	r3, [r7, #12]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f919 	bl	8000bfc <__aeabi_i2f>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fa1b 	bl	8000e0c <__aeabi_fdiv>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461a      	mov	r2, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}

080019e8 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b0af      	sub	sp, #188	; 0xbc
 80019ec:	af2a      	add	r7, sp, #168	; 0xa8
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80019f2:	687c      	ldr	r4, [r7, #4]
 80019f4:	2302      	movs	r3, #2
 80019f6:	9329      	str	r3, [sp, #164]	; 0xa4
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	9328      	str	r3, [sp, #160]	; 0xa0
 80019fe:	2312      	movs	r3, #18
 8001a00:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a02:	4668      	mov	r0, sp
 8001a04:	f104 0310 	add.w	r3, r4, #16
 8001a08:	229c      	movs	r2, #156	; 0x9c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f005 faba 	bl	8006f84 <memcpy>
 8001a10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a14:	f000 fe99 	bl	800274a <bno055_read_regs>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <bno055_mag_z+0x3e>
        return err;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	e014      	b.n	8001a50 <bno055_mag_z+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	7b3b      	ldrb	r3, [r7, #12]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f8e1 	bl	8000bfc <__aeabi_i2f>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f9e3 	bl	8000e0c <__aeabi_fdiv>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}

08001a58 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b0af      	sub	sp, #188	; 0xbc
 8001a5c:	af2a      	add	r7, sp, #168	; 0xa8
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001a62:	687c      	ldr	r4, [r7, #4]
 8001a64:	2306      	movs	r3, #6
 8001a66:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a6e:	230e      	movs	r3, #14
 8001a70:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a72:	4668      	mov	r0, sp
 8001a74:	f104 0310 	add.w	r3, r4, #16
 8001a78:	229c      	movs	r2, #156	; 0x9c
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f005 fa82 	bl	8006f84 <memcpy>
 8001a80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a84:	f000 fe61 	bl	800274a <bno055_read_regs>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <bno055_mag+0x3e>
        return err;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	e03c      	b.n	8001b10 <bno055_mag+0xb8>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001a96:	7a7b      	ldrb	r3, [r7, #9]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	7a3b      	ldrb	r3, [r7, #8]
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f8a9 	bl	8000bfc <__aeabi_i2f>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f9ab 	bl	8000e0c <__aeabi_fdiv>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	7abb      	ldrb	r3, [r7, #10]
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f895 	bl	8000bfc <__aeabi_i2f>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff f997 	bl	8000e0c <__aeabi_fdiv>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001ae6:	7b7b      	ldrb	r3, [r7, #13]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	7b3b      	ldrb	r3, [r7, #12]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff f881 	bl	8000bfc <__aeabi_i2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f983 	bl	8000e0c <__aeabi_fdiv>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 8001b0e:	2300      	movs	r3, #0
};
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}

08001b18 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b0b1      	sub	sp, #196	; 0xc4
 8001b1c:	af2a      	add	r7, sp, #168	; 0xa8
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001b22:	687c      	ldr	r4, [r7, #4]
 8001b24:	2302      	movs	r3, #2
 8001b26:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b2e:	232e      	movs	r3, #46	; 0x2e
 8001b30:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b32:	4668      	mov	r0, sp
 8001b34:	f104 0310 	add.w	r3, r4, #16
 8001b38:	229c      	movs	r2, #156	; 0x9c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f005 fa22 	bl	8006f84 <memcpy>
 8001b40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b44:	f000 fe01 	bl	800274a <bno055_read_regs>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	75fb      	strb	r3, [r7, #23]
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <bno055_gravity_x+0x3e>
        return err;
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	e01c      	b.n	8001b90 <bno055_gravity_x+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <bno055_gravity_x+0x4a>
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <bno055_gravity_x+0x80>)
 8001b60:	e001      	b.n	8001b66 <bno055_gravity_x+0x4e>
 8001b62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001b66:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001b68:	7b7b      	ldrb	r3, [r7, #13]
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	7b3b      	ldrb	r3, [r7, #12]
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f840 	bl	8000bfc <__aeabi_i2f>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	6939      	ldr	r1, [r7, #16]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f943 	bl	8000e0c <__aeabi_fdiv>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd90      	pop	{r4, r7, pc}
 8001b98:	42c80000 	.word	0x42c80000

08001b9c <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b0b1      	sub	sp, #196	; 0xc4
 8001ba0:	af2a      	add	r7, sp, #168	; 0xa8
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001ba6:	687c      	ldr	r4, [r7, #4]
 8001ba8:	2302      	movs	r3, #2
 8001baa:	9329      	str	r3, [sp, #164]	; 0xa4
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	9328      	str	r3, [sp, #160]	; 0xa0
 8001bb2:	2330      	movs	r3, #48	; 0x30
 8001bb4:	9327      	str	r3, [sp, #156]	; 0x9c
 8001bb6:	4668      	mov	r0, sp
 8001bb8:	f104 0310 	add.w	r3, r4, #16
 8001bbc:	229c      	movs	r2, #156	; 0x9c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f005 f9e0 	bl	8006f84 <memcpy>
 8001bc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bc8:	f000 fdbf 	bl	800274a <bno055_read_regs>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	75fb      	strb	r3, [r7, #23]
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <bno055_gravity_y+0x3e>
        return err;
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	e01c      	b.n	8001c14 <bno055_gravity_y+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <bno055_gravity_y+0x4a>
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <bno055_gravity_y+0x80>)
 8001be4:	e001      	b.n	8001bea <bno055_gravity_y+0x4e>
 8001be6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001bea:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001bec:	7b7b      	ldrb	r3, [r7, #13]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	7b3b      	ldrb	r3, [r7, #12]
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fffe 	bl	8000bfc <__aeabi_i2f>
 8001c00:	4603      	mov	r3, r0
 8001c02:	6939      	ldr	r1, [r7, #16]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f901 	bl	8000e0c <__aeabi_fdiv>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	42c80000 	.word	0x42c80000

08001c20 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b0b1      	sub	sp, #196	; 0xc4
 8001c24:	af2a      	add	r7, sp, #168	; 0xa8
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001c2a:	687c      	ldr	r4, [r7, #4]
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c36:	2332      	movs	r3, #50	; 0x32
 8001c38:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c3a:	4668      	mov	r0, sp
 8001c3c:	f104 0310 	add.w	r3, r4, #16
 8001c40:	229c      	movs	r2, #156	; 0x9c
 8001c42:	4619      	mov	r1, r3
 8001c44:	f005 f99e 	bl	8006f84 <memcpy>
 8001c48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c4c:	f000 fd7d 	bl	800274a <bno055_read_regs>
 8001c50:	4603      	mov	r3, r0
 8001c52:	75fb      	strb	r3, [r7, #23]
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <bno055_gravity_z+0x3e>
        return err;
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	e01c      	b.n	8001c98 <bno055_gravity_z+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <bno055_gravity_z+0x4a>
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <bno055_gravity_z+0x80>)
 8001c68:	e001      	b.n	8001c6e <bno055_gravity_z+0x4e>
 8001c6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001c6e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001c70:	7b7b      	ldrb	r3, [r7, #13]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	7b3b      	ldrb	r3, [r7, #12]
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe ffbc 	bl	8000bfc <__aeabi_i2f>
 8001c84:	4603      	mov	r3, r0
 8001c86:	6939      	ldr	r1, [r7, #16]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f8bf 	bl	8000e0c <__aeabi_fdiv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd90      	pop	{r4, r7, pc}
 8001ca0:	42c80000 	.word	0x42c80000

08001ca4 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b0b1      	sub	sp, #196	; 0xc4
 8001ca8:	af2a      	add	r7, sp, #168	; 0xa8
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001cae:	687c      	ldr	r4, [r7, #4]
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001cb4:	f107 0308 	add.w	r3, r7, #8
 8001cb8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001cba:	232e      	movs	r3, #46	; 0x2e
 8001cbc:	9327      	str	r3, [sp, #156]	; 0x9c
 8001cbe:	4668      	mov	r0, sp
 8001cc0:	f104 0310 	add.w	r3, r4, #16
 8001cc4:	229c      	movs	r2, #156	; 0x9c
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f005 f95c 	bl	8006f84 <memcpy>
 8001ccc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cd0:	f000 fd3b 	bl	800274a <bno055_read_regs>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	75fb      	strb	r3, [r7, #23]
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <bno055_gravity+0x3e>
        return err;
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	e042      	b.n	8001d68 <bno055_gravity+0xc4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <bno055_gravity+0x4a>
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <bno055_gravity+0xcc>)
 8001cec:	e001      	b.n	8001cf2 <bno055_gravity+0x4e>
 8001cee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001cf2:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001cf4:	7a7b      	ldrb	r3, [r7, #9]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	7a3b      	ldrb	r3, [r7, #8]
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe ff7a 	bl	8000bfc <__aeabi_i2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	6939      	ldr	r1, [r7, #16]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f87d 	bl	8000e0c <__aeabi_fdiv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	7abb      	ldrb	r3, [r7, #10]
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe ff67 	bl	8000bfc <__aeabi_i2f>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6939      	ldr	r1, [r7, #16]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f86a 	bl	8000e0c <__aeabi_fdiv>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001d40:	7b7b      	ldrb	r3, [r7, #13]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	7b3b      	ldrb	r3, [r7, #12]
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ff54 	bl	8000bfc <__aeabi_i2f>
 8001d54:	4603      	mov	r3, r0
 8001d56:	6939      	ldr	r1, [r7, #16]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff f857 	bl	8000e0c <__aeabi_fdiv>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd90      	pop	{r4, r7, pc}
 8001d70:	42c80000 	.word	0x42c80000

08001d74 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b0b1      	sub	sp, #196	; 0xc4
 8001d78:	af2a      	add	r7, sp, #168	; 0xa8
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001d7e:	687c      	ldr	r4, [r7, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d8a:	231a      	movs	r3, #26
 8001d8c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d8e:	4668      	mov	r0, sp
 8001d90:	f104 0310 	add.w	r3, r4, #16
 8001d94:	229c      	movs	r2, #156	; 0x9c
 8001d96:	4619      	mov	r1, r3
 8001d98:	f005 f8f4 	bl	8006f84 <memcpy>
 8001d9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001da0:	f000 fcd3 	bl	800274a <bno055_read_regs>
 8001da4:	4603      	mov	r3, r0
 8001da6:	75fb      	strb	r3, [r7, #23]
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
 8001db0:	e01c      	b.n	8001dec <bno055_euler_yaw+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <bno055_euler_yaw+0x4c>
 8001dba:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001dbe:	e000      	b.n	8001dc2 <bno055_euler_yaw+0x4e>
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001dc2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001dc4:	7b7b      	ldrb	r3, [r7, #13]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	7b3b      	ldrb	r3, [r7, #12]
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ff12 	bl	8000bfc <__aeabi_i2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	6939      	ldr	r1, [r7, #16]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f815 	bl	8000e0c <__aeabi_fdiv>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}
 8001df4:	44610000 	.word	0x44610000

08001df8 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b0b1      	sub	sp, #196	; 0xc4
 8001dfc:	af2a      	add	r7, sp, #168	; 0xa8
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8001e02:	687c      	ldr	r4, [r7, #4]
 8001e04:	2302      	movs	r3, #2
 8001e06:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e0e:	231c      	movs	r3, #28
 8001e10:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e12:	4668      	mov	r0, sp
 8001e14:	f104 0310 	add.w	r3, r4, #16
 8001e18:	229c      	movs	r2, #156	; 0x9c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f005 f8b2 	bl	8006f84 <memcpy>
 8001e20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e24:	f000 fc91 	bl	800274a <bno055_read_regs>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	75fb      	strb	r3, [r7, #23]
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <bno055_euler_roll+0x3e>
        return err;
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
 8001e34:	e01c      	b.n	8001e70 <bno055_euler_roll+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <bno055_euler_roll+0x4c>
 8001e3e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001e42:	e000      	b.n	8001e46 <bno055_euler_roll+0x4e>
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001e46:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001e48:	7b7b      	ldrb	r3, [r7, #13]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	b21a      	sxth	r2, r3
 8001e4e:	7b3b      	ldrb	r3, [r7, #12]
 8001e50:	b21b      	sxth	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fed0 	bl	8000bfc <__aeabi_i2f>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	6939      	ldr	r1, [r7, #16]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe ffd3 	bl	8000e0c <__aeabi_fdiv>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	44610000 	.word	0x44610000

08001e7c <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b0b1      	sub	sp, #196	; 0xc4
 8001e80:	af2a      	add	r7, sp, #168	; 0xa8
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8001e86:	687c      	ldr	r4, [r7, #4]
 8001e88:	2302      	movs	r3, #2
 8001e8a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e92:	231e      	movs	r3, #30
 8001e94:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e96:	4668      	mov	r0, sp
 8001e98:	f104 0310 	add.w	r3, r4, #16
 8001e9c:	229c      	movs	r2, #156	; 0x9c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f005 f870 	bl	8006f84 <memcpy>
 8001ea4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ea8:	f000 fc4f 	bl	800274a <bno055_read_regs>
 8001eac:	4603      	mov	r3, r0
 8001eae:	75fb      	strb	r3, [r7, #23]
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <bno055_euler_pitch+0x3e>
        return err;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	e01c      	b.n	8001ef4 <bno055_euler_pitch+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <bno055_euler_pitch+0x4c>
 8001ec2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001ec6:	e000      	b.n	8001eca <bno055_euler_pitch+0x4e>
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001eca:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	7b3b      	ldrb	r3, [r7, #12]
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fe8e 	bl	8000bfc <__aeabi_i2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	6939      	ldr	r1, [r7, #16]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe ff91 	bl	8000e0c <__aeabi_fdiv>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd90      	pop	{r4, r7, pc}
 8001efc:	44610000 	.word	0x44610000

08001f00 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b0b1      	sub	sp, #196	; 0xc4
 8001f04:	af2a      	add	r7, sp, #168	; 0xa8
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8001f0a:	687c      	ldr	r4, [r7, #4]
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	9328      	str	r3, [sp, #160]	; 0xa0
 8001f16:	231a      	movs	r3, #26
 8001f18:	9327      	str	r3, [sp, #156]	; 0x9c
 8001f1a:	4668      	mov	r0, sp
 8001f1c:	f104 0310 	add.w	r3, r4, #16
 8001f20:	229c      	movs	r2, #156	; 0x9c
 8001f22:	4619      	mov	r1, r3
 8001f24:	f005 f82e 	bl	8006f84 <memcpy>
 8001f28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f2c:	f000 fc0d 	bl	800274a <bno055_read_regs>
 8001f30:	4603      	mov	r3, r0
 8001f32:	75fb      	strb	r3, [r7, #23]
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
 8001f3c:	e042      	b.n	8001fc4 <bno055_euler+0xc4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <bno055_euler+0x4c>
 8001f46:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001f4a:	e000      	b.n	8001f4e <bno055_euler+0x4e>
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <bno055_euler+0xcc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8001f4e:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8001f50:	7a7b      	ldrb	r3, [r7, #9]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	b21a      	sxth	r2, r3
 8001f56:	7a3b      	ldrb	r3, [r7, #8]
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fe4c 	bl	8000bfc <__aeabi_i2f>
 8001f64:	4603      	mov	r3, r0
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe ff4f 	bl	8000e0c <__aeabi_fdiv>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	609a      	str	r2, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	7abb      	ldrb	r3, [r7, #10]
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fe39 	bl	8000bfc <__aeabi_i2f>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6939      	ldr	r1, [r7, #16]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe ff3c 	bl	8000e0c <__aeabi_fdiv>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	601a      	str	r2, [r3, #0]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8001f9c:	7b7b      	ldrb	r3, [r7, #13]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	7b3b      	ldrb	r3, [r7, #12]
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fe26 	bl	8000bfc <__aeabi_i2f>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	6939      	ldr	r1, [r7, #16]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe ff29 	bl	8000e0c <__aeabi_fdiv>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
    return BNO_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	44610000 	.word	0x44610000

08001fd0 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b0af      	sub	sp, #188	; 0xbc
 8001fd4:	af2a      	add	r7, sp, #168	; 0xa8
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8001fda:	687c      	ldr	r4, [r7, #4]
 8001fdc:	2302      	movs	r3, #2
 8001fde:	9329      	str	r3, [sp, #164]	; 0xa4
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	9328      	str	r3, [sp, #160]	; 0xa0
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	9327      	str	r3, [sp, #156]	; 0x9c
 8001fea:	4668      	mov	r0, sp
 8001fec:	f104 0310 	add.w	r3, r4, #16
 8001ff0:	229c      	movs	r2, #156	; 0x9c
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f004 ffc6 	bl	8006f84 <memcpy>
 8001ff8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ffc:	f000 fba5 	bl	800274a <bno055_read_regs>
 8002000:	4603      	mov	r3, r0
 8002002:	73fb      	strb	r3, [r7, #15]
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <bno055_quaternion_w+0x3e>
        return err;
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	e014      	b.n	8002038 <bno055_quaternion_w+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800200e:	7b7b      	ldrb	r3, [r7, #13]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	b21a      	sxth	r2, r3
 8002014:	7b3b      	ldrb	r3, [r7, #12]
 8002016:	b21b      	sxth	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b21b      	sxth	r3, r3
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fded 	bl	8000bfc <__aeabi_i2f>
 8002022:	4603      	mov	r3, r0
 8002024:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe feef 	bl	8000e0c <__aeabi_fdiv>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bd90      	pop	{r4, r7, pc}

08002040 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b0af      	sub	sp, #188	; 0xbc
 8002044:	af2a      	add	r7, sp, #168	; 0xa8
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800204a:	687c      	ldr	r4, [r7, #4]
 800204c:	2302      	movs	r3, #2
 800204e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	9328      	str	r3, [sp, #160]	; 0xa0
 8002056:	2322      	movs	r3, #34	; 0x22
 8002058:	9327      	str	r3, [sp, #156]	; 0x9c
 800205a:	4668      	mov	r0, sp
 800205c:	f104 0310 	add.w	r3, r4, #16
 8002060:	229c      	movs	r2, #156	; 0x9c
 8002062:	4619      	mov	r1, r3
 8002064:	f004 ff8e 	bl	8006f84 <memcpy>
 8002068:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800206c:	f000 fb6d 	bl	800274a <bno055_read_regs>
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <bno055_quaternion_x+0x3e>
        return err;
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	e014      	b.n	80020a8 <bno055_quaternion_x+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800207e:	7b7b      	ldrb	r3, [r7, #13]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b21a      	sxth	r2, r3
 8002084:	7b3b      	ldrb	r3, [r7, #12]
 8002086:	b21b      	sxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b21b      	sxth	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fdb5 	bl	8000bfc <__aeabi_i2f>
 8002092:	4603      	mov	r3, r0
 8002094:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe feb7 	bl	8000e0c <__aeabi_fdiv>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd90      	pop	{r4, r7, pc}

080020b0 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b0af      	sub	sp, #188	; 0xbc
 80020b4:	af2a      	add	r7, sp, #168	; 0xa8
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80020ba:	687c      	ldr	r4, [r7, #4]
 80020bc:	2302      	movs	r3, #2
 80020be:	9329      	str	r3, [sp, #164]	; 0xa4
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80020c6:	2324      	movs	r3, #36	; 0x24
 80020c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80020ca:	4668      	mov	r0, sp
 80020cc:	f104 0310 	add.w	r3, r4, #16
 80020d0:	229c      	movs	r2, #156	; 0x9c
 80020d2:	4619      	mov	r1, r3
 80020d4:	f004 ff56 	bl	8006f84 <memcpy>
 80020d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020dc:	f000 fb35 	bl	800274a <bno055_read_regs>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <bno055_quaternion_y+0x3e>
        return err;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	e014      	b.n	8002118 <bno055_quaternion_y+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80020ee:	7b7b      	ldrb	r3, [r7, #13]
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	b21a      	sxth	r2, r3
 80020f4:	7b3b      	ldrb	r3, [r7, #12]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fd7d 	bl	8000bfc <__aeabi_i2f>
 8002102:	4603      	mov	r3, r0
 8002104:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fe7f 	bl	8000e0c <__aeabi_fdiv>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bd90      	pop	{r4, r7, pc}

08002120 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b0af      	sub	sp, #188	; 0xbc
 8002124:	af2a      	add	r7, sp, #168	; 0xa8
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800212a:	687c      	ldr	r4, [r7, #4]
 800212c:	2302      	movs	r3, #2
 800212e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	9328      	str	r3, [sp, #160]	; 0xa0
 8002136:	2326      	movs	r3, #38	; 0x26
 8002138:	9327      	str	r3, [sp, #156]	; 0x9c
 800213a:	4668      	mov	r0, sp
 800213c:	f104 0310 	add.w	r3, r4, #16
 8002140:	229c      	movs	r2, #156	; 0x9c
 8002142:	4619      	mov	r1, r3
 8002144:	f004 ff1e 	bl	8006f84 <memcpy>
 8002148:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800214c:	f000 fafd 	bl	800274a <bno055_read_regs>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <bno055_quaternion_z+0x3e>
        return err;
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	e014      	b.n	8002188 <bno055_quaternion_z+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800215e:	7b7b      	ldrb	r3, [r7, #13]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21a      	sxth	r2, r3
 8002164:	7b3b      	ldrb	r3, [r7, #12]
 8002166:	b21b      	sxth	r3, r3
 8002168:	4313      	orrs	r3, r2
 800216a:	b21b      	sxth	r3, r3
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fd45 	bl	8000bfc <__aeabi_i2f>
 8002172:	4603      	mov	r3, r0
 8002174:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fe47 	bl	8000e0c <__aeabi_fdiv>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}

08002190 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b0b1      	sub	sp, #196	; 0xc4
 8002194:	af2a      	add	r7, sp, #168	; 0xa8
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 800219a:	687c      	ldr	r4, [r7, #4]
 800219c:	2308      	movs	r3, #8
 800219e:	9329      	str	r3, [sp, #164]	; 0xa4
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80021a6:	2320      	movs	r3, #32
 80021a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80021aa:	4668      	mov	r0, sp
 80021ac:	f104 0310 	add.w	r3, r4, #16
 80021b0:	229c      	movs	r2, #156	; 0x9c
 80021b2:	4619      	mov	r1, r3
 80021b4:	f004 fee6 	bl	8006f84 <memcpy>
 80021b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021bc:	f000 fac5 	bl	800274a <bno055_read_regs>
 80021c0:	4603      	mov	r3, r0
 80021c2:	75fb      	strb	r3, [r7, #23]
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <bno055_quaternion+0x3e>
        return err;
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
 80021cc:	e050      	b.n	8002270 <bno055_quaternion+0xe0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80021ce:	7b7b      	ldrb	r3, [r7, #13]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	7b3b      	ldrb	r3, [r7, #12]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21b      	sxth	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fd0d 	bl	8000bfc <__aeabi_i2f>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fe0f 	bl	8000e0c <__aeabi_fdiv>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	60da      	str	r2, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	b21b      	sxth	r3, r3
 8002200:	4313      	orrs	r3, r2
 8002202:	b21b      	sxth	r3, r3
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fcf9 	bl	8000bfc <__aeabi_i2f>
 800220a:	4603      	mov	r3, r0
 800220c:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe fdfb 	bl	8000e0c <__aeabi_fdiv>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	601a      	str	r2, [r3, #0]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 800221e:	7c7b      	ldrb	r3, [r7, #17]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	b21a      	sxth	r2, r3
 8002224:	7c3b      	ldrb	r3, [r7, #16]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21b      	sxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fce5 	bl	8000bfc <__aeabi_i2f>
 8002232:	4603      	mov	r3, r0
 8002234:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fde7 	bl	8000e0c <__aeabi_fdiv>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	605a      	str	r2, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	b21a      	sxth	r2, r3
 800224c:	7cbb      	ldrb	r3, [r7, #18]
 800224e:	b21b      	sxth	r3, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	b21b      	sxth	r3, r3
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fcd1 	bl	8000bfc <__aeabi_i2f>
 800225a:	4603      	mov	r3, r0
 800225c:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fdd3 	bl	8000e0c <__aeabi_fdiv>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	609a      	str	r2, [r3, #8]
    return BNO_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}

08002278 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b0af      	sub	sp, #188	; 0xbc
 800227c:	af2a      	add	r7, sp, #168	; 0xa8
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	4608      	mov	r0, r1
 8002282:	4611      	mov	r1, r2
 8002284:	461a      	mov	r2, r3
 8002286:	4603      	mov	r3, r0
 8002288:	70fb      	strb	r3, [r7, #3]
 800228a:	460b      	mov	r3, r1
 800228c:	70bb      	strb	r3, [r7, #2]
 800228e:	4613      	mov	r3, r2
 8002290:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002292:	2101      	movs	r1, #1
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fabb 	bl	8002810 <bno055_set_page>
 800229a:	4603      	mov	r3, r0
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <bno055_acc_conf+0x30>
        return err;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	e04b      	b.n	8002340 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80022a8:	2100      	movs	r1, #0
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f91b 	bl	80024e6 <bno055_set_opmode>
 80022b0:	4603      	mov	r3, r0
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <bno055_acc_conf+0x46>
        return err;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	e040      	b.n	8002340 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80022be:	200c      	movs	r0, #12
 80022c0:	f001 f8f8 	bl	80034b4 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	78bb      	ldrb	r3, [r7, #2]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	787b      	ldrb	r3, [r7, #1]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80022d4:	687c      	ldr	r4, [r7, #4]
 80022d6:	2301      	movs	r3, #1
 80022d8:	9329      	str	r3, [sp, #164]	; 0xa4
 80022da:	f107 030e 	add.w	r3, r7, #14
 80022de:	9328      	str	r3, [sp, #160]	; 0xa0
 80022e0:	2308      	movs	r3, #8
 80022e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80022e4:	4668      	mov	r0, sp
 80022e6:	f104 0310 	add.w	r3, r4, #16
 80022ea:	229c      	movs	r2, #156	; 0x9c
 80022ec:	4619      	mov	r1, r3
 80022ee:	f004 fe49 	bl	8006f84 <memcpy>
 80022f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022f6:	f000 fa5e 	bl	80027b6 <bno055_write_regs>
 80022fa:	4603      	mov	r3, r0
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <bno055_acc_conf+0x90>
        return err;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	e01b      	b.n	8002340 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	791b      	ldrb	r3, [r3, #4]
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f8e9 	bl	80024e6 <bno055_set_opmode>
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <bno055_acc_conf+0xaa>
        return err;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	e00e      	b.n	8002340 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002322:	2018      	movs	r0, #24
 8002324:	f001 f8c6 	bl	80034b4 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002328:	2100      	movs	r1, #0
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fa70 	bl	8002810 <bno055_set_page>
 8002330:	4603      	mov	r3, r0
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <bno055_acc_conf+0xc6>
        return err;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	e000      	b.n	8002340 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	bd90      	pop	{r4, r7, pc}

08002348 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b0af      	sub	sp, #188	; 0xbc
 800234c:	af2a      	add	r7, sp, #168	; 0xa8
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	4608      	mov	r0, r1
 8002352:	4611      	mov	r1, r2
 8002354:	461a      	mov	r2, r3
 8002356:	4603      	mov	r3, r0
 8002358:	70fb      	strb	r3, [r7, #3]
 800235a:	460b      	mov	r3, r1
 800235c:	70bb      	strb	r3, [r7, #2]
 800235e:	4613      	mov	r3, r2
 8002360:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002362:	2101      	movs	r1, #1
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fa53 	bl	8002810 <bno055_set_page>
 800236a:	4603      	mov	r3, r0
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <bno055_gyr_conf+0x30>
        return err;
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	e04a      	b.n	800240e <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002378:	2100      	movs	r1, #0
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f8b3 	bl	80024e6 <bno055_set_opmode>
 8002380:	4603      	mov	r3, r0
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <bno055_gyr_conf+0x46>
        return err;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	e03f      	b.n	800240e <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800238e:	200c      	movs	r0, #12
 8002390:	f001 f890 	bl	80034b4 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	78bb      	ldrb	r3, [r7, #2]
 8002398:	4313      	orrs	r3, r2
 800239a:	b2db      	uxtb	r3, r3
 800239c:	733b      	strb	r3, [r7, #12]
 800239e:	787b      	ldrb	r3, [r7, #1]
 80023a0:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80023a2:	687c      	ldr	r4, [r7, #4]
 80023a4:	2302      	movs	r3, #2
 80023a6:	9329      	str	r3, [sp, #164]	; 0xa4
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	9328      	str	r3, [sp, #160]	; 0xa0
 80023ae:	230a      	movs	r3, #10
 80023b0:	9327      	str	r3, [sp, #156]	; 0x9c
 80023b2:	4668      	mov	r0, sp
 80023b4:	f104 0310 	add.w	r3, r4, #16
 80023b8:	229c      	movs	r2, #156	; 0x9c
 80023ba:	4619      	mov	r1, r3
 80023bc:	f004 fde2 	bl	8006f84 <memcpy>
 80023c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023c4:	f000 f9f7 	bl	80027b6 <bno055_write_regs>
 80023c8:	4603      	mov	r3, r0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	e01b      	b.n	800240e <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	791b      	ldrb	r3, [r3, #4]
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f882 	bl	80024e6 <bno055_set_opmode>
 80023e2:	4603      	mov	r3, r0
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <bno055_gyr_conf+0xa8>
        return err;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	e00e      	b.n	800240e <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80023f0:	2018      	movs	r0, #24
 80023f2:	f001 f85f 	bl	80034b4 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80023f6:	2100      	movs	r1, #0
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fa09 	bl	8002810 <bno055_set_page>
 80023fe:	4603      	mov	r3, r0
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <bno055_gyr_conf+0xc4>
        return err;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	e000      	b.n	800240e <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bd90      	pop	{r4, r7, pc}

08002416 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8002416:	b590      	push	{r4, r7, lr}
 8002418:	b0af      	sub	sp, #188	; 0xbc
 800241a:	af2a      	add	r7, sp, #168	; 0xa8
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	4608      	mov	r0, r1
 8002420:	4611      	mov	r1, r2
 8002422:	461a      	mov	r2, r3
 8002424:	4603      	mov	r3, r0
 8002426:	70fb      	strb	r3, [r7, #3]
 8002428:	460b      	mov	r3, r1
 800242a:	70bb      	strb	r3, [r7, #2]
 800242c:	4613      	mov	r3, r2
 800242e:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002430:	2101      	movs	r1, #1
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f9ec 	bl	8002810 <bno055_set_page>
 8002438:	4603      	mov	r3, r0
 800243a:	73fb      	strb	r3, [r7, #15]
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <bno055_mag_conf+0x30>
        return err;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	e04b      	b.n	80024de <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002446:	2100      	movs	r1, #0
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f84c 	bl	80024e6 <bno055_set_opmode>
 800244e:	4603      	mov	r3, r0
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <bno055_mag_conf+0x46>
        return err;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	e040      	b.n	80024de <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800245c:	200c      	movs	r0, #12
 800245e:	f001 f829 	bl	80034b4 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	78bb      	ldrb	r3, [r7, #2]
 8002466:	4313      	orrs	r3, r2
 8002468:	b2da      	uxtb	r2, r3
 800246a:	787b      	ldrb	r3, [r7, #1]
 800246c:	4313      	orrs	r3, r2
 800246e:	b2db      	uxtb	r3, r3
 8002470:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8002472:	687c      	ldr	r4, [r7, #4]
 8002474:	2301      	movs	r3, #1
 8002476:	9329      	str	r3, [sp, #164]	; 0xa4
 8002478:	f107 030e 	add.w	r3, r7, #14
 800247c:	9328      	str	r3, [sp, #160]	; 0xa0
 800247e:	2309      	movs	r3, #9
 8002480:	9327      	str	r3, [sp, #156]	; 0x9c
 8002482:	4668      	mov	r0, sp
 8002484:	f104 0310 	add.w	r3, r4, #16
 8002488:	229c      	movs	r2, #156	; 0x9c
 800248a:	4619      	mov	r1, r3
 800248c:	f004 fd7a 	bl	8006f84 <memcpy>
 8002490:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002494:	f000 f98f 	bl	80027b6 <bno055_write_regs>
 8002498:	4603      	mov	r3, r0
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <bno055_mag_conf+0x90>
        return err;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	e01b      	b.n	80024de <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	791b      	ldrb	r3, [r3, #4]
 80024aa:	4619      	mov	r1, r3
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f81a 	bl	80024e6 <bno055_set_opmode>
 80024b2:	4603      	mov	r3, r0
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <bno055_mag_conf+0xaa>
        return err;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	e00e      	b.n	80024de <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80024c0:	2018      	movs	r0, #24
 80024c2:	f000 fff7 	bl	80034b4 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80024c6:	2100      	movs	r1, #0
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f9a1 	bl	8002810 <bno055_set_page>
 80024ce:	4603      	mov	r3, r0
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <bno055_mag_conf+0xc6>
        return err;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	e000      	b.n	80024de <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}

080024e6 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 80024e6:	b590      	push	{r4, r7, lr}
 80024e8:	b0af      	sub	sp, #188	; 0xbc
 80024ea:	af2a      	add	r7, sp, #168	; 0xa8
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80024f2:	687c      	ldr	r4, [r7, #4]
 80024f4:	2301      	movs	r3, #1
 80024f6:	9329      	str	r3, [sp, #164]	; 0xa4
 80024f8:	1cfb      	adds	r3, r7, #3
 80024fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80024fc:	233d      	movs	r3, #61	; 0x3d
 80024fe:	9327      	str	r3, [sp, #156]	; 0x9c
 8002500:	4668      	mov	r0, sp
 8002502:	f104 0310 	add.w	r3, r4, #16
 8002506:	229c      	movs	r2, #156	; 0x9c
 8002508:	4619      	mov	r1, r3
 800250a:	f004 fd3b 	bl	8006f84 <memcpy>
 800250e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002512:	f000 f950 	bl	80027b6 <bno055_write_regs>
 8002516:	4603      	mov	r3, r0
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	e003      	b.n	800252c <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002524:	2018      	movs	r0, #24
 8002526:	f000 ffc5 	bl	80034b4 <HAL_Delay>
    return BNO_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}

08002534 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b0af      	sub	sp, #188	; 0xbc
 8002538:	af2a      	add	r7, sp, #168	; 0xa8
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	461a      	mov	r2, r3
 8002542:	4603      	mov	r3, r0
 8002544:	70fb      	strb	r3, [r7, #3]
 8002546:	460b      	mov	r3, r1
 8002548:	70bb      	strb	r3, [r7, #2]
 800254a:	4613      	mov	r3, r2
 800254c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800254e:	2100      	movs	r1, #0
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ffc8 	bl	80024e6 <bno055_set_opmode>
 8002556:	4603      	mov	r3, r0
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <bno055_set_unit+0x30>
        return err;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	e04b      	b.n	80025fc <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002564:	2100      	movs	r1, #0
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f952 	bl	8002810 <bno055_set_page>
 800256c:	4603      	mov	r3, r0
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <bno055_set_unit+0x46>
        return err;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	e040      	b.n	80025fc <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	78bb      	ldrb	r3, [r7, #2]
 800257e:	4313      	orrs	r3, r2
 8002580:	b2da      	uxtb	r2, r3
 8002582:	787b      	ldrb	r3, [r7, #1]
 8002584:	4313      	orrs	r3, r2
 8002586:	b2da      	uxtb	r2, r3
 8002588:	f897 3020 	ldrb.w	r3, [r7, #32]
 800258c:	4313      	orrs	r3, r2
 800258e:	b2db      	uxtb	r3, r3
 8002590:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8002592:	687c      	ldr	r4, [r7, #4]
 8002594:	2301      	movs	r3, #1
 8002596:	9329      	str	r3, [sp, #164]	; 0xa4
 8002598:	f107 030e 	add.w	r3, r7, #14
 800259c:	9328      	str	r3, [sp, #160]	; 0xa0
 800259e:	233b      	movs	r3, #59	; 0x3b
 80025a0:	9327      	str	r3, [sp, #156]	; 0x9c
 80025a2:	4668      	mov	r0, sp
 80025a4:	f104 0310 	add.w	r3, r4, #16
 80025a8:	229c      	movs	r2, #156	; 0x9c
 80025aa:	4619      	mov	r1, r3
 80025ac:	f004 fcea 	bl	8006f84 <memcpy>
 80025b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025b4:	f000 f8ff 	bl	80027b6 <bno055_write_regs>
 80025b8:	4603      	mov	r3, r0
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <bno055_set_unit+0x92>
        return err;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	e01a      	b.n	80025fc <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	78ba      	ldrb	r2, [r7, #2]
 80025ca:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	787a      	ldrb	r2, [r7, #1]
 80025d0:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025d8:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	791b      	ldrb	r3, [r3, #4]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff7d 	bl	80024e6 <bno055_set_opmode>
 80025ec:	4603      	mov	r3, r0
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <bno055_set_unit+0xc6>
        return err;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	e000      	b.n	80025fc <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	bd90      	pop	{r4, r7, pc}

08002604 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b0af      	sub	sp, #188	; 0xbc
 8002608:	af2a      	add	r7, sp, #168	; 0xa8
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8002616:	2304      	movs	r3, #4
 8002618:	e04d      	b.n	80026b6 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 800261a:	2100      	movs	r1, #0
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff62 	bl	80024e6 <bno055_set_opmode>
 8002622:	4603      	mov	r3, r0
 8002624:	73fb      	strb	r3, [r7, #15]
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <bno055_set_pwr_mode+0x2c>
        return err;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	e042      	b.n	80026b6 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002630:	2100      	movs	r1, #0
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f8ec 	bl	8002810 <bno055_set_page>
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <bno055_set_pwr_mode+0x42>
        return err;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	e037      	b.n	80026b6 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8002646:	687c      	ldr	r4, [r7, #4]
 8002648:	2301      	movs	r3, #1
 800264a:	9329      	str	r3, [sp, #164]	; 0xa4
 800264c:	1cfb      	adds	r3, r7, #3
 800264e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002650:	233e      	movs	r3, #62	; 0x3e
 8002652:	9327      	str	r3, [sp, #156]	; 0x9c
 8002654:	4668      	mov	r0, sp
 8002656:	f104 0310 	add.w	r3, r4, #16
 800265a:	229c      	movs	r2, #156	; 0x9c
 800265c:	4619      	mov	r1, r3
 800265e:	f004 fc91 	bl	8006f84 <memcpy>
 8002662:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002666:	f000 f8a6 	bl	80027b6 <bno055_write_regs>
 800266a:	4603      	mov	r3, r0
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	e01e      	b.n	80026b6 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800267e:	2100      	movs	r1, #0
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f8c5 	bl	8002810 <bno055_set_page>
 8002686:	4603      	mov	r3, r0
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <bno055_set_pwr_mode+0x90>
        return err;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	e010      	b.n	80026b6 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	791b      	ldrb	r3, [r3, #4]
 8002698:	4619      	mov	r1, r3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ff23 	bl	80024e6 <bno055_set_opmode>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <bno055_set_pwr_mode+0xaa>
        return err;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	e003      	b.n	80026b6 <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 80026ae:	2002      	movs	r0, #2
 80026b0:	f000 ff00 	bl	80034b4 <HAL_Delay>
    return BNO_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd90      	pop	{r4, r7, pc}

080026be <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 80026be:	b590      	push	{r4, r7, lr}
 80026c0:	b0af      	sub	sp, #188	; 0xbc
 80026c2:	af2a      	add	r7, sp, #168	; 0xa8
 80026c4:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80026ca:	687c      	ldr	r4, [r7, #4]
 80026cc:	2301      	movs	r3, #1
 80026ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80026d0:	f107 030f 	add.w	r3, r7, #15
 80026d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80026d6:	233f      	movs	r3, #63	; 0x3f
 80026d8:	9327      	str	r3, [sp, #156]	; 0x9c
 80026da:	4668      	mov	r0, sp
 80026dc:	f104 0310 	add.w	r3, r4, #16
 80026e0:	229c      	movs	r2, #156	; 0x9c
 80026e2:	4619      	mov	r1, r3
 80026e4:	f004 fc4e 	bl	8006f84 <memcpy>
 80026e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026ec:	f000 f863 	bl	80027b6 <bno055_write_regs>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <bno055_reset+0x3e>
    }
    return BNO_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}

08002704 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b0af      	sub	sp, #188	; 0xbc
 8002708:	af2a      	add	r7, sp, #168	; 0xa8
 800270a:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002710:	687c      	ldr	r4, [r7, #4]
 8002712:	2301      	movs	r3, #1
 8002714:	9329      	str	r3, [sp, #164]	; 0xa4
 8002716:	f107 030f 	add.w	r3, r7, #15
 800271a:	9328      	str	r3, [sp, #160]	; 0xa0
 800271c:	233f      	movs	r3, #63	; 0x3f
 800271e:	9327      	str	r3, [sp, #156]	; 0x9c
 8002720:	4668      	mov	r0, sp
 8002722:	f104 0310 	add.w	r3, r4, #16
 8002726:	229c      	movs	r2, #156	; 0x9c
 8002728:	4619      	mov	r1, r3
 800272a:	f004 fc2b 	bl	8006f84 <memcpy>
 800272e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002732:	f000 f840 	bl	80027b6 <bno055_write_regs>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <bno055_on+0x3e>
    }
    return BNO_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bd90      	pop	{r4, r7, pc}

0800274a <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 800274a:	b084      	sub	sp, #16
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af02      	add	r7, sp, #8
 8002752:	f107 0c10 	add.w	ip, r7, #16
 8002756:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 800275a:	6938      	ldr	r0, [r7, #16]
 800275c:	7dbb      	ldrb	r3, [r7, #22]
 800275e:	b299      	uxth	r1, r3
 8002760:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8002764:	f04f 33ff 	mov.w	r3, #4294967295
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	f001 faa4 	bl	8003cb8 <HAL_I2C_Master_Transmit>
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 800277a:	2301      	movs	r3, #1
 800277c:	e014      	b.n	80027a8 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 800277e:	6938      	ldr	r0, [r7, #16]
 8002780:	7dbb      	ldrb	r3, [r7, #22]
 8002782:	b299      	uxth	r1, r3
 8002784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002788:	b29b      	uxth	r3, r3
 800278a:	f04f 32ff 	mov.w	r2, #4294967295
 800278e:	9200      	str	r2, [sp, #0]
 8002790:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002794:	f001 fb8e 	bl	8003eb4 <HAL_I2C_Master_Receive>
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027b2:	b004      	add	sp, #16
 80027b4:	4770      	bx	lr

080027b6 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 80027b6:	b084      	sub	sp, #16
 80027b8:	b5b0      	push	{r4, r5, r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af04      	add	r7, sp, #16
 80027be:	f107 0418 	add.w	r4, r7, #24
 80027c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80027c6:	69b8      	ldr	r0, [r7, #24]
 80027c8:	7fbb      	ldrb	r3, [r7, #30]
 80027ca:	b299      	uxth	r1, r3
 80027cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027d6:	b29c      	uxth	r4, r3
 80027d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f04f 35ff 	mov.w	r5, #4294967295
 80027e2:	9502      	str	r5, [sp, #8]
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	4623      	mov	r3, r4
 80027ee:	f001 fdcd 	bl	800438c <HAL_I2C_Mem_Write>
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800280c:	b004      	add	sp, #16
 800280e:	4770      	bx	lr

08002810 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b0af      	sub	sp, #188	; 0xbc
 8002814:	af2a      	add	r7, sp, #168	; 0xa8
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7b5a      	ldrb	r2, [r3, #13]
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <bno055_set_page+0x1a>
        return BNO_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e024      	b.n	8002874 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d901      	bls.n	8002834 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8002830:	2302      	movs	r3, #2
 8002832:	e01f      	b.n	8002874 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8002834:	687c      	ldr	r4, [r7, #4]
 8002836:	2301      	movs	r3, #1
 8002838:	9329      	str	r3, [sp, #164]	; 0xa4
 800283a:	1cfb      	adds	r3, r7, #3
 800283c:	9328      	str	r3, [sp, #160]	; 0xa0
 800283e:	2307      	movs	r3, #7
 8002840:	9327      	str	r3, [sp, #156]	; 0x9c
 8002842:	4668      	mov	r0, sp
 8002844:	f104 0310 	add.w	r3, r4, #16
 8002848:	229c      	movs	r2, #156	; 0x9c
 800284a:	4619      	mov	r1, r3
 800284c:	f004 fb9a 	bl	8006f84 <memcpy>
 8002850:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002854:	f7ff ffaf 	bl	80027b6 <bno055_write_regs>
 8002858:	4603      	mov	r3, r0
 800285a:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <bno055_set_page+0x56>
        return err;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	e006      	b.n	8002874 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 800286c:	2002      	movs	r0, #2
 800286e:	f000 fe21 	bl	80034b4 <HAL_Delay>
    return BNO_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}

0800287c <bno055_err_str>:

char* bno055_err_str(const error_bno err) {
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
    switch (err) {
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b06      	cmp	r3, #6
 800288a:	d81f      	bhi.n	80028cc <bno055_err_str+0x50>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <bno055_err_str+0x18>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028b1 	.word	0x080028b1
 8002898:	080028b5 	.word	0x080028b5
 800289c:	080028b9 	.word	0x080028b9
 80028a0:	080028c5 	.word	0x080028c5
 80028a4:	080028bd 	.word	0x080028bd
 80028a8:	080028c1 	.word	0x080028c1
 80028ac:	080028c9 	.word	0x080028c9
        case BNO_OK:
            return "[BNO] Ok!";
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <bno055_err_str+0x5c>)
 80028b2:	e00c      	b.n	80028ce <bno055_err_str+0x52>
        case BNO_ERR_I2C:
            return "[BNO] I2C error!";
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <bno055_err_str+0x60>)
 80028b6:	e00a      	b.n	80028ce <bno055_err_str+0x52>
        case BNO_ERR_PAGE_TOO_HIGH:
            return "[BNO] Page setting to high.";
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <bno055_err_str+0x64>)
 80028ba:	e008      	b.n	80028ce <bno055_err_str+0x52>
        case BNO_ERR_NULL_PTR:
            return "[BNO] BNO struct is nullpointer.";
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <bno055_err_str+0x68>)
 80028be:	e006      	b.n	80028ce <bno055_err_str+0x52>
        case BNO_ERR_AXIS_REMAP:
            return "[BNO] Axis remap error!";
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <bno055_err_str+0x6c>)
 80028c2:	e004      	b.n	80028ce <bno055_err_str+0x52>
        case BNO_ERR_SETTING_PAGE:
            return "[BNO] TODO";
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <bno055_err_str+0x70>)
 80028c6:	e002      	b.n	80028ce <bno055_err_str+0x52>
        case BNO_ERR_WRONG_CHIP_ID:
            return "[BNO] Wrong Chip ID.";
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <bno055_err_str+0x74>)
 80028ca:	e000      	b.n	80028ce <bno055_err_str+0x52>
    }
    return "[BNO] Ok!";
 80028cc:	4b02      	ldr	r3, [pc, #8]	; (80028d8 <bno055_err_str+0x5c>)
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	08008f30 	.word	0x08008f30
 80028dc:	08008f3c 	.word	0x08008f3c
 80028e0:	08008f50 	.word	0x08008f50
 80028e4:	08008f6c 	.word	0x08008f6c
 80028e8:	08008f90 	.word	0x08008f90
 80028ec:	08008fa8 	.word	0x08008fa8
 80028f0:	08008fb4 	.word	0x08008fb4

080028f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fa:	f107 0310 	add.w	r3, r7, #16
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <MX_GPIO_Init+0xa8>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	4a23      	ldr	r2, [pc, #140]	; (800299c <MX_GPIO_Init+0xa8>)
 800290e:	f043 0310 	orr.w	r3, r3, #16
 8002912:	6193      	str	r3, [r2, #24]
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <MX_GPIO_Init+0xa8>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002920:	4b1e      	ldr	r3, [pc, #120]	; (800299c <MX_GPIO_Init+0xa8>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <MX_GPIO_Init+0xa8>)
 8002926:	f043 0320 	orr.w	r3, r3, #32
 800292a:	6193      	str	r3, [r2, #24]
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <MX_GPIO_Init+0xa8>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <MX_GPIO_Init+0xa8>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	4a17      	ldr	r2, [pc, #92]	; (800299c <MX_GPIO_Init+0xa8>)
 800293e:	f043 0308 	orr.w	r3, r3, #8
 8002942:	6193      	str	r3, [r2, #24]
 8002944:	4b15      	ldr	r3, [pc, #84]	; (800299c <MX_GPIO_Init+0xa8>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <MX_GPIO_Init+0xa8>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a11      	ldr	r2, [pc, #68]	; (800299c <MX_GPIO_Init+0xa8>)
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	6193      	str	r3, [r2, #24]
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <MX_GPIO_Init+0xa8>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002968:	2200      	movs	r2, #0
 800296a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800296e:	480c      	ldr	r0, [pc, #48]	; (80029a0 <MX_GPIO_Init+0xac>)
 8002970:	f001 f82c 	bl	80039cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297a:	2301      	movs	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2302      	movs	r3, #2
 8002984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	4619      	mov	r1, r3
 800298c:	4804      	ldr	r0, [pc, #16]	; (80029a0 <MX_GPIO_Init+0xac>)
 800298e:	f000 fe99 	bl	80036c4 <HAL_GPIO_Init>

}
 8002992:	bf00      	nop
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	40011000 	.word	0x40011000

080029a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <MX_I2C1_Init+0x54>)
 80029ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029b0:	4a12      	ldr	r2, [pc, #72]	; (80029fc <MX_I2C1_Init+0x58>)
 80029b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <MX_I2C1_Init+0x50>)
 80029e2:	f001 f825 	bl	8003a30 <HAL_I2C_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029ec:	f000 fb47 	bl	800307e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000200 	.word	0x20000200
 80029f8:	40005400 	.word	0x40005400
 80029fc:	000186a0 	.word	0x000186a0

08002a00 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a06:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <MX_I2C2_Init+0x54>)
 8002a08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a0c:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <MX_I2C2_Init+0x58>)
 8002a0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a3c:	4804      	ldr	r0, [pc, #16]	; (8002a50 <MX_I2C2_Init+0x50>)
 8002a3e:	f000 fff7 	bl	8003a30 <HAL_I2C_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002a48:	f000 fb19 	bl	800307e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000254 	.word	0x20000254
 8002a54:	40005800 	.word	0x40005800
 8002a58:	00061a80 	.word	0x00061a80

08002a5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 0318 	add.w	r3, r7, #24
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2b      	ldr	r2, [pc, #172]	; (8002b24 <HAL_I2C_MspInit+0xc8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d124      	bne.n	8002ac6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7c:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	4a29      	ldr	r2, [pc, #164]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002a82:	f043 0308 	orr.w	r3, r3, #8
 8002a86:	6193      	str	r3, [r2, #24]
 8002a88:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a94:	23c0      	movs	r3, #192	; 0xc0
 8002a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a98:	2312      	movs	r3, #18
 8002a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa0:	f107 0318 	add.w	r3, r7, #24
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4821      	ldr	r0, [pc, #132]	; (8002b2c <HAL_I2C_MspInit+0xd0>)
 8002aa8:	f000 fe0c 	bl	80036c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aac:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ab6:	61d3      	str	r3, [r2, #28]
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002ac4:	e029      	b.n	8002b1a <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_I2C_MspInit+0xd4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d124      	bne.n	8002b1a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002ad6:	f043 0308 	orr.w	r3, r3, #8
 8002ada:	6193      	str	r3, [r2, #24]
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ae8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aee:	2312      	movs	r3, #18
 8002af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af2:	2303      	movs	r3, #3
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af6:	f107 0318 	add.w	r3, r7, #24
 8002afa:	4619      	mov	r1, r3
 8002afc:	480b      	ldr	r0, [pc, #44]	; (8002b2c <HAL_I2C_MspInit+0xd0>)
 8002afe:	f000 fde1 	bl	80036c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b0c:	61d3      	str	r3, [r2, #28]
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_I2C_MspInit+0xcc>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
}
 8002b1a:	bf00      	nop
 8002b1c:	3728      	adds	r7, #40	; 0x28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40005400 	.word	0x40005400
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40010c00 	.word	0x40010c00
 8002b30:	40005800 	.word	0x40005800

08002b34 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b38:	b0ce      	sub	sp, #312	; 0x138
 8002b3a:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002b3c:	f000 fc58 	bl	80033f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002b40:	f000 fa58 	bl	8002ff4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002b44:	f7ff fed6 	bl	80028f4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002b48:	f7ff ff2c 	bl	80029a4 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8002b4c:	f000 fba0 	bl	8003290 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 8002b50:	f7ff ff56 	bl	8002a00 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	SSD1306_Init();
 8002b54:	f003 f83e 	bl	8005bd4 <SSD1306_Init>
	bno = (bno055_t ) { .i2c = &hi2c1, .addr = BNO_ADDR, .mode = BNO_MODE_IMU,
 8002b58:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <main+0xc0>)
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	23ac      	movs	r3, #172	; 0xac
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2100      	movs	r1, #0
 8002b62:	f004 f983 	bl	8006e6c <memset>
 8002b66:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <main+0xc0>)
 8002b68:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <main+0xc4>)
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <main+0xc0>)
 8002b6e:	2208      	movs	r2, #8
 8002b70:	711a      	strb	r2, [r3, #4]
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <main+0xc0>)
 8002b74:	2229      	movs	r2, #41	; 0x29
 8002b76:	719a      	strb	r2, [r3, #6]
					._temp_unit = 0,
			// .ptr = &bno,
			};
	HAL_Delay(1000);
 8002b78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b7c:	f000 fc9a 	bl	80034b4 <HAL_Delay>

	if ((err = bno055_init(&bno)) == BNO_OK) {
 8002b80:	481c      	ldr	r0, [pc, #112]	; (8002bf4 <main+0xc0>)
 8002b82:	f7fe f9df 	bl	8000f44 <bno055_init>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <main+0xc8>)
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <main+0xc8>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <main+0x70>
		printf("[+] BNO055 init success\r\n");
 8002b96:	481a      	ldr	r0, [pc, #104]	; (8002c00 <main+0xcc>)
 8002b98:	f004 f854 	bl	8006c44 <puts>
		HAL_Delay(100);
 8002b9c:	2064      	movs	r0, #100	; 0x64
 8002b9e:	f000 fc89 	bl	80034b4 <HAL_Delay>
 8002ba2:	e00d      	b.n	8002bc0 <main+0x8c>
	} else {
		printf("[!] BNO055 init failed\r\n");
 8002ba4:	4817      	ldr	r0, [pc, #92]	; (8002c04 <main+0xd0>)
 8002ba6:	f004 f84d 	bl	8006c44 <puts>
		printf("%s\n", bno055_err_str(err));
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <main+0xc8>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fe64 	bl	800287c <bno055_err_str>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f004 f844 	bl	8006c44 <puts>
		Error_Handler();
 8002bbc:	f000 fa5f 	bl	800307e <Error_Handler>
	}
	HAL_Delay(100);
 8002bc0:	2064      	movs	r0, #100	; 0x64
 8002bc2:	f000 fc77 	bl	80034b4 <HAL_Delay>
	err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4808      	ldr	r0, [pc, #32]	; (8002bf4 <main+0xc0>)
 8002bd2:	f7ff fcaf 	bl	8002534 <bno055_set_unit>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <main+0xc8>)
 8002bdc:	701a      	strb	r2, [r3, #0]
			BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
	if (err != BNO_OK) {
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <main+0xc8>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d012      	beq.n	8002c0c <main+0xd8>
		printf("[BNO] Failed to set units. Err: %d\r\n", err);
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <main+0xc8>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4806      	ldr	r0, [pc, #24]	; (8002c08 <main+0xd4>)
 8002bee:	f003 ffc3 	bl	8006b78 <iprintf>
 8002bf2:	e00e      	b.n	8002c12 <main+0xde>
 8002bf4:	200002a8 	.word	0x200002a8
 8002bf8:	20000200 	.word	0x20000200
 8002bfc:	20000354 	.word	0x20000354
 8002c00:	08008fcc 	.word	0x08008fcc
 8002c04:	08008fe8 	.word	0x08008fe8
 8002c08:	08009000 	.word	0x08009000
	} else {
		printf("[BNO] Unit selection success\r\n");
 8002c0c:	48b9      	ldr	r0, [pc, #740]	; (8002ef4 <main+0x3c0>)
 8002c0e:	f004 f819 	bl	8006c44 <puts>
	}

	HAL_Delay(1000);
 8002c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c16:	f000 fc4d 	bl	80034b4 <HAL_Delay>
	s8 temperature = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	// f32 acc_x = 0.0f, acc_y = 0.0f, acc_z = 0.0f;
	bno055_vec3_t acc = { 0, 0, 0 };
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	667b      	str	r3, [r7, #100]	; 0x64
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	66fb      	str	r3, [r7, #108]	; 0x6c
	bno055_vec3_t lia = { 0, 0, 0 };
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	663b      	str	r3, [r7, #96]	; 0x60
	bno055_vec3_t gyr = { 0, 0, 0 };
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	657b      	str	r3, [r7, #84]	; 0x54
	bno055_vec3_t mag = { 0, 0, 0 };
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
	bno055_vec3_t grv = { 0, 0, 0 };
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	63fb      	str	r3, [r7, #60]	; 0x3c
	bno055_euler_t eul = { 0, 0, 0 };
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30
	bno055_vec4_t qua = { 0, 0, 0 };
 8002c8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c94:	461a      	mov	r2, r3
 8002c96:	2300      	movs	r3, #0
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	6053      	str	r3, [r2, #4]
 8002c9c:	6093      	str	r3, [r2, #8]
 8002c9e:	60d3      	str	r3, [r2, #12]
	SSD1306_Clear();
 8002ca0:	f003 f9bb 	bl	800601a <SSD1306_Clear>
	SSD1306_GotoXY(11, 11); // goto 10, 10
 8002ca4:	210b      	movs	r1, #11
 8002ca6:	200b      	movs	r0, #11
 8002ca8:	f003 f8fc 	bl	8005ea4 <SSD1306_GotoXY>
	SSD1306_Puts("ANH", &Font_11x18, 1); // print Hello
 8002cac:	2201      	movs	r2, #1
 8002cae:	4992      	ldr	r1, [pc, #584]	; (8002ef8 <main+0x3c4>)
 8002cb0:	4892      	ldr	r0, [pc, #584]	; (8002efc <main+0x3c8>)
 8002cb2:	f003 f98d 	bl	8005fd0 <SSD1306_Puts>
	SSD1306_GotoXY(10, 35);
 8002cb6:	2123      	movs	r1, #35	; 0x23
 8002cb8:	200a      	movs	r0, #10
 8002cba:	f003 f8f3 	bl	8005ea4 <SSD1306_GotoXY>
	SSD1306_Puts("KHOA !!", &Font_11x18, 1);
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	498d      	ldr	r1, [pc, #564]	; (8002ef8 <main+0x3c4>)
 8002cc2:	488f      	ldr	r0, [pc, #572]	; (8002f00 <main+0x3cc>)
 8002cc4:	f003 f984 	bl	8005fd0 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8002cc8:	f003 f848 	bl	8005d5c <SSD1306_UpdateScreen>
	SSD1306_Clear();
 8002ccc:	f003 f9a5 	bl	800601a <SSD1306_Clear>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	char buffer[20] = { 0 };
 8002cd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002cd4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		bno.temperature(&bno, &temperature);
 8002ce8:	4b86      	ldr	r3, [pc, #536]	; (8002f04 <main+0x3d0>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f107 0273 	add.w	r2, r7, #115	; 0x73
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4884      	ldr	r0, [pc, #528]	; (8002f04 <main+0x3d0>)
 8002cf4:	4798      	blx	r3
		bno.acc(&bno, &acc);
 8002cf6:	4b83      	ldr	r3, [pc, #524]	; (8002f04 <main+0x3d0>)
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4880      	ldr	r0, [pc, #512]	; (8002f04 <main+0x3d0>)
 8002d02:	4798      	blx	r3
		bno.linear_acc(&bno, &lia);
 8002d04:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <main+0x3d0>)
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	487d      	ldr	r0, [pc, #500]	; (8002f04 <main+0x3d0>)
 8002d10:	4798      	blx	r3
		bno.gyro(&bno, &gyr);
 8002d12:	4b7c      	ldr	r3, [pc, #496]	; (8002f04 <main+0x3d0>)
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	4879      	ldr	r0, [pc, #484]	; (8002f04 <main+0x3d0>)
 8002d1e:	4798      	blx	r3
		bno.mag(&bno, &mag);
 8002d20:	4b78      	ldr	r3, [pc, #480]	; (8002f04 <main+0x3d0>)
 8002d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d24:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4876      	ldr	r0, [pc, #472]	; (8002f04 <main+0x3d0>)
 8002d2c:	4798      	blx	r3
		bno.gravity(&bno, &grv);
 8002d2e:	4b75      	ldr	r3, [pc, #468]	; (8002f04 <main+0x3d0>)
 8002d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d32:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d36:	4611      	mov	r1, r2
 8002d38:	4872      	ldr	r0, [pc, #456]	; (8002f04 <main+0x3d0>)
 8002d3a:	4798      	blx	r3
		bno.euler(&bno, &eul);
 8002d3c:	4b71      	ldr	r3, [pc, #452]	; (8002f04 <main+0x3d0>)
 8002d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d46:	4611      	mov	r1, r2
 8002d48:	486e      	ldr	r0, [pc, #440]	; (8002f04 <main+0x3d0>)
 8002d4a:	4798      	blx	r3
		bno.quaternion(&bno, &qua);
 8002d4c:	4b6d      	ldr	r3, [pc, #436]	; (8002f04 <main+0x3d0>)
 8002d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d52:	f107 0218 	add.w	r2, r7, #24
 8002d56:	4611      	mov	r1, r2
 8002d58:	486a      	ldr	r0, [pc, #424]	; (8002f04 <main+0x3d0>)
 8002d5a:	4798      	blx	r3
		snprintf(buffer, sizeof(buffer), "%s%2d°C", "Temperature:", temperature);
 8002d5c:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 8002d60:	1d38      	adds	r0, r7, #4
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4b68      	ldr	r3, [pc, #416]	; (8002f08 <main+0x3d4>)
 8002d66:	4a69      	ldr	r2, [pc, #420]	; (8002f0c <main+0x3d8>)
 8002d68:	2114      	movs	r1, #20
 8002d6a:	f003 ff73 	bl	8006c54 <sniprintf>
		SSD1306_GotoXY(5, 40);
 8002d6e:	2128      	movs	r1, #40	; 0x28
 8002d70:	2005      	movs	r0, #5
 8002d72:	f003 f897 	bl	8005ea4 <SSD1306_GotoXY>
		SSD1306_Puts(buffer, &Font_7x10, 1);
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4965      	ldr	r1, [pc, #404]	; (8002f10 <main+0x3dc>)
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 f927 	bl	8005fd0 <SSD1306_Puts>
		printf("[+] ACC - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", acc.x, acc.y,
 8002d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fb4f 	bl	8000428 <__aeabi_f2d>
 8002d8a:	4680      	mov	r8, r0
 8002d8c:	4689      	mov	r9, r1
 8002d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fb49 	bl	8000428 <__aeabi_f2d>
 8002d96:	4604      	mov	r4, r0
 8002d98:	460d      	mov	r5, r1
				acc.z);
 8002d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
		printf("[+] ACC - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", acc.x, acc.y,
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fb43 	bl	8000428 <__aeabi_f2d>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002daa:	e9cd 4500 	strd	r4, r5, [sp]
 8002dae:	4642      	mov	r2, r8
 8002db0:	464b      	mov	r3, r9
 8002db2:	4858      	ldr	r0, [pc, #352]	; (8002f14 <main+0x3e0>)
 8002db4:	f003 fee0 	bl	8006b78 <iprintf>
		printf("[+] LIA - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", lia.x, lia.y,
 8002db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fb34 	bl	8000428 <__aeabi_f2d>
 8002dc0:	4680      	mov	r8, r0
 8002dc2:	4689      	mov	r9, r1
 8002dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fb2e 	bl	8000428 <__aeabi_f2d>
 8002dcc:	4604      	mov	r4, r0
 8002dce:	460d      	mov	r5, r1
				lia.z);
 8002dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		printf("[+] LIA - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", lia.x, lia.y,
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fb28 	bl	8000428 <__aeabi_f2d>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002de0:	e9cd 4500 	strd	r4, r5, [sp]
 8002de4:	4642      	mov	r2, r8
 8002de6:	464b      	mov	r3, r9
 8002de8:	484b      	ldr	r0, [pc, #300]	; (8002f18 <main+0x3e4>)
 8002dea:	f003 fec5 	bl	8006b78 <iprintf>
		printf("[+] GYR - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", gyr.x, gyr.y,
 8002dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fb19 	bl	8000428 <__aeabi_f2d>
 8002df6:	4680      	mov	r8, r0
 8002df8:	4689      	mov	r9, r1
 8002dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fd fb13 	bl	8000428 <__aeabi_f2d>
 8002e02:	4604      	mov	r4, r0
 8002e04:	460d      	mov	r5, r1
				gyr.z);
 8002e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
		printf("[+] GYR - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", gyr.x, gyr.y,
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fb0d 	bl	8000428 <__aeabi_f2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e16:	e9cd 4500 	strd	r4, r5, [sp]
 8002e1a:	4642      	mov	r2, r8
 8002e1c:	464b      	mov	r3, r9
 8002e1e:	483f      	ldr	r0, [pc, #252]	; (8002f1c <main+0x3e8>)
 8002e20:	f003 feaa 	bl	8006b78 <iprintf>
		printf("[+] MAG - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", mag.x, mag.y,
 8002e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fafe 	bl	8000428 <__aeabi_f2d>
 8002e2c:	4680      	mov	r8, r0
 8002e2e:	4689      	mov	r9, r1
 8002e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd faf8 	bl	8000428 <__aeabi_f2d>
 8002e38:	4604      	mov	r4, r0
 8002e3a:	460d      	mov	r5, r1
				mag.z);
 8002e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
		printf("[+] MAG - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", mag.x, mag.y,
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd faf2 	bl	8000428 <__aeabi_f2d>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e4c:	e9cd 4500 	strd	r4, r5, [sp]
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	4832      	ldr	r0, [pc, #200]	; (8002f20 <main+0x3ec>)
 8002e56:	f003 fe8f 	bl	8006b78 <iprintf>
		printf("[+] GRV - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", grv.x, grv.y,
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fae3 	bl	8000428 <__aeabi_f2d>
 8002e62:	4680      	mov	r8, r0
 8002e64:	4689      	mov	r9, r1
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fadd 	bl	8000428 <__aeabi_f2d>
 8002e6e:	4604      	mov	r4, r0
 8002e70:	460d      	mov	r5, r1
				grv.z);
 8002e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
		printf("[+] GRV - x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n", grv.x, grv.y,
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fad7 	bl	8000428 <__aeabi_f2d>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e82:	e9cd 4500 	strd	r4, r5, [sp]
 8002e86:	4642      	mov	r2, r8
 8002e88:	464b      	mov	r3, r9
 8002e8a:	4826      	ldr	r0, [pc, #152]	; (8002f24 <main+0x3f0>)
 8002e8c:	f003 fe74 	bl	8006b78 <iprintf>

		snprintf(buffer, sizeof(buffer), "%s%+2.2f", "Roll:", eul.roll);
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fac8 	bl	8000428 <__aeabi_f2d>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	1d38      	adds	r0, r7, #4
 8002e9e:	e9cd 2300 	strd	r2, r3, [sp]
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <main+0x3f4>)
 8002ea4:	4a21      	ldr	r2, [pc, #132]	; (8002f2c <main+0x3f8>)
 8002ea6:	2114      	movs	r1, #20
 8002ea8:	f003 fed4 	bl	8006c54 <sniprintf>
		SSD1306_GotoXY(5, 4);
 8002eac:	2104      	movs	r1, #4
 8002eae:	2005      	movs	r0, #5
 8002eb0:	f002 fff8 	bl	8005ea4 <SSD1306_GotoXY>
		SSD1306_Puts(buffer, &Font_7x10, 1);
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	4915      	ldr	r1, [pc, #84]	; (8002f10 <main+0x3dc>)
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 f888 	bl	8005fd0 <SSD1306_Puts>
		snprintf(buffer, sizeof(buffer), "%s%+2.2f", "YaW:", eul.yaw);
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fab0 	bl	8000428 <__aeabi_f2d>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	1d38      	adds	r0, r7, #4
 8002ece:	e9cd 2300 	strd	r2, r3, [sp]
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <main+0x3fc>)
 8002ed4:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <main+0x3f8>)
 8002ed6:	2114      	movs	r1, #20
 8002ed8:	f003 febc 	bl	8006c54 <sniprintf>
		SSD1306_GotoXY(5, 16);
 8002edc:	2110      	movs	r1, #16
 8002ede:	2005      	movs	r0, #5
 8002ee0:	f002 ffe0 	bl	8005ea4 <SSD1306_GotoXY>
		SSD1306_Puts(buffer, &Font_7x10, 1);
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4909      	ldr	r1, [pc, #36]	; (8002f10 <main+0x3dc>)
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 f870 	bl	8005fd0 <SSD1306_Puts>
		snprintf(buffer, sizeof(buffer), "%s%+2.2f", "Pitch:", eul.pitch);
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	e01f      	b.n	8002f34 <main+0x400>
 8002ef4:	08009028 	.word	0x08009028
 8002ef8:	20000014 	.word	0x20000014
 8002efc:	08009048 	.word	0x08009048
 8002f00:	0800904c 	.word	0x0800904c
 8002f04:	200002a8 	.word	0x200002a8
 8002f08:	08009054 	.word	0x08009054
 8002f0c:	08009064 	.word	0x08009064
 8002f10:	2000000c 	.word	0x2000000c
 8002f14:	08009070 	.word	0x08009070
 8002f18:	080090a0 	.word	0x080090a0
 8002f1c:	080090d0 	.word	0x080090d0
 8002f20:	08009100 	.word	0x08009100
 8002f24:	08009130 	.word	0x08009130
 8002f28:	08009160 	.word	0x08009160
 8002f2c:	08009168 	.word	0x08009168
 8002f30:	08009174 	.word	0x08009174
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fa77 	bl	8000428 <__aeabi_f2d>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	1d38      	adds	r0, r7, #4
 8002f40:	e9cd 2300 	strd	r2, r3, [sp]
 8002f44:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <main+0x4ac>)
 8002f46:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <main+0x4b0>)
 8002f48:	2114      	movs	r1, #20
 8002f4a:	f003 fe83 	bl	8006c54 <sniprintf>
		SSD1306_GotoXY(5, 26);
 8002f4e:	211a      	movs	r1, #26
 8002f50:	2005      	movs	r0, #5
 8002f52:	f002 ffa7 	bl	8005ea4 <SSD1306_GotoXY>
		SSD1306_Puts(buffer, &Font_7x10, 1);
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4923      	ldr	r1, [pc, #140]	; (8002fe8 <main+0x4b4>)
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f003 f837 	bl	8005fd0 <SSD1306_Puts>
		SSD1306_UpdateScreen(); // update screen
 8002f62:	f002 fefb 	bl	8005d5c <SSD1306_UpdateScreen>
		printf("[+] QUA - w: %+2.2f | x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n",
				qua.w, qua.x, qua.y, qua.z);
 8002f66:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f6e:	68db      	ldr	r3, [r3, #12]
		printf("[+] QUA - w: %+2.2f | x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n",
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fa59 	bl	8000428 <__aeabi_f2d>
 8002f76:	4682      	mov	sl, r0
 8002f78:	468b      	mov	fp, r1
				qua.w, qua.x, qua.y, qua.z);
 8002f7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f82:	681b      	ldr	r3, [r3, #0]
		printf("[+] QUA - w: %+2.2f | x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n",
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd fa4f 	bl	8000428 <__aeabi_f2d>
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	460d      	mov	r5, r1
				qua.w, qua.x, qua.y, qua.z);
 8002f8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f96:	685b      	ldr	r3, [r3, #4]
		printf("[+] QUA - w: %+2.2f | x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n",
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fa45 	bl	8000428 <__aeabi_f2d>
 8002f9e:	4680      	mov	r8, r0
 8002fa0:	4689      	mov	r9, r1
				qua.w, qua.x, qua.y, qua.z);
 8002fa2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002faa:	689b      	ldr	r3, [r3, #8]
		printf("[+] QUA - w: %+2.2f | x: %+2.2f | y: %+2.2f | z: %+2.2f\r\n",
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fa3b 	bl	8000428 <__aeabi_f2d>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002fba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002fbe:	e9cd 4500 	strd	r4, r5, [sp]
 8002fc2:	4652      	mov	r2, sl
 8002fc4:	465b      	mov	r3, fp
 8002fc6:	4809      	ldr	r0, [pc, #36]	; (8002fec <main+0x4b8>)
 8002fc8:	f003 fdd6 	bl	8006b78 <iprintf>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002fcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fd0:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <main+0x4bc>)
 8002fd2:	f000 fd13 	bl	80039fc <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002fd6:	2064      	movs	r0, #100	; 0x64
 8002fd8:	f000 fa6c 	bl	80034b4 <HAL_Delay>
		bno.temperature(&bno, &temperature);
 8002fdc:	e684      	b.n	8002ce8 <main+0x1b4>
 8002fde:	bf00      	nop
 8002fe0:	0800917c 	.word	0x0800917c
 8002fe4:	08009168 	.word	0x08009168
 8002fe8:	2000000c 	.word	0x2000000c
 8002fec:	08009184 	.word	0x08009184
 8002ff0:	40011000 	.word	0x40011000

08002ff4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b090      	sub	sp, #64	; 0x40
 8002ff8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002ffa:	f107 0318 	add.w	r3, r7, #24
 8002ffe:	2228      	movs	r2, #40	; 0x28
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f003 ff32 	bl	8006e6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003008:	1d3b      	adds	r3, r7, #4
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	60da      	str	r2, [r3, #12]
 8003014:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003016:	2301      	movs	r3, #1
 8003018:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800301a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800301e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003020:	2300      	movs	r3, #0
 8003022:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003024:	2301      	movs	r3, #1
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003028:	2302      	movs	r3, #2
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800302c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003030:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003032:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003036:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003038:	f107 0318 	add.w	r3, r7, #24
 800303c:	4618      	mov	r0, r3
 800303e:	f001 ffe9 	bl	8005014 <HAL_RCC_OscConfig>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <SystemClock_Config+0x58>
		Error_Handler();
 8003048:	f000 f819 	bl	800307e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800304c:	230f      	movs	r3, #15
 800304e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003050:	2302      	movs	r3, #2
 8003052:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800305c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	2102      	movs	r1, #2
 8003066:	4618      	mov	r0, r3
 8003068:	f002 fa56 	bl	8005518 <HAL_RCC_ClockConfig>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <SystemClock_Config+0x82>
		Error_Handler();
 8003072:	f000 f804 	bl	800307e <Error_Handler>
	}
}
 8003076:	bf00      	nop
 8003078:	3740      	adds	r7, #64	; 0x40
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003082:	b672      	cpsid	i
}
 8003084:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003086:	e7fe      	b.n	8003086 <Error_Handler+0x8>

08003088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_MspInit+0x5c>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_MspInit+0x5c>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6193      	str	r3, [r2, #24]
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_MspInit+0x5c>)
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <HAL_MspInit+0x5c>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <HAL_MspInit+0x5c>)
 80030ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b0:	61d3      	str	r3, [r2, #28]
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_MspInit+0x5c>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <HAL_MspInit+0x60>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_MspInit+0x60>)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40010000 	.word	0x40010000

080030ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <NMI_Handler+0x4>

080030f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030f6:	e7fe      	b.n	80030f6 <HardFault_Handler+0x4>

080030f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030fc:	e7fe      	b.n	80030fc <MemManage_Handler+0x4>

080030fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003102:	e7fe      	b.n	8003102 <BusFault_Handler+0x4>

08003104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <UsageFault_Handler+0x4>

0800310a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003132:	f000 f9a3 	bl	800347c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}

0800313a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800313a:	b480      	push	{r7}
 800313c:	af00      	add	r7, sp, #0
  return 1;
 800313e:	2301      	movs	r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <_kill>:

int _kill(int pid, int sig)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003152:	f003 fedd 	bl	8006f10 <__errno>
 8003156:	4603      	mov	r3, r0
 8003158:	2216      	movs	r2, #22
 800315a:	601a      	str	r2, [r3, #0]
  return -1;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_exit>:

void _exit (int status)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003170:	f04f 31ff 	mov.w	r1, #4294967295
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ffe7 	bl	8003148 <_kill>
  while (1) {}    /* Make sure we hang here */
 800317a:	e7fe      	b.n	800317a <_exit+0x12>

0800317c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	e00a      	b.n	80031a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800318e:	f3af 8000 	nop.w
 8003192:	4601      	mov	r1, r0
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	60ba      	str	r2, [r7, #8]
 800319a:	b2ca      	uxtb	r2, r1
 800319c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	3301      	adds	r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	dbf0      	blt.n	800318e <_read+0x12>
  }

  return len;
 80031ac:	687b      	ldr	r3, [r7, #4]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031dc:	605a      	str	r2, [r3, #4]
  return 0;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <_isatty>:

int _isatty(int file)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031f2:	2301      	movs	r3, #1
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
	...

08003218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003220:	4a14      	ldr	r2, [pc, #80]	; (8003274 <_sbrk+0x5c>)
 8003222:	4b15      	ldr	r3, [pc, #84]	; (8003278 <_sbrk+0x60>)
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <_sbrk+0x64>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <_sbrk+0x64>)
 8003236:	4a12      	ldr	r2, [pc, #72]	; (8003280 <_sbrk+0x68>)
 8003238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <_sbrk+0x64>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	429a      	cmp	r2, r3
 8003246:	d207      	bcs.n	8003258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003248:	f003 fe62 	bl	8006f10 <__errno>
 800324c:	4603      	mov	r3, r0
 800324e:	220c      	movs	r2, #12
 8003250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
 8003256:	e009      	b.n	800326c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <_sbrk+0x64>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <_sbrk+0x64>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	4a05      	ldr	r2, [pc, #20]	; (800327c <_sbrk+0x64>)
 8003268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800326a:	68fb      	ldr	r3, [r7, #12]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20005000 	.word	0x20005000
 8003278:	00000400 	.word	0x00000400
 800327c:	20000358 	.word	0x20000358
 8003280:	20000900 	.word	0x20000900

08003284 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <MX_USART1_UART_Init+0x4c>)
 8003296:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <MX_USART1_UART_Init+0x50>)
 8003298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <MX_USART1_UART_Init+0x4c>)
 800329c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <MX_USART1_UART_Init+0x4c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <MX_USART1_UART_Init+0x4c>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <MX_USART1_UART_Init+0x4c>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <MX_USART1_UART_Init+0x4c>)
 80032b6:	220c      	movs	r2, #12
 80032b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ba:	4b08      	ldr	r3, [pc, #32]	; (80032dc <MX_USART1_UART_Init+0x4c>)
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <MX_USART1_UART_Init+0x4c>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032c6:	4805      	ldr	r0, [pc, #20]	; (80032dc <MX_USART1_UART_Init+0x4c>)
 80032c8:	f002 fab4 	bl	8005834 <HAL_UART_Init>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80032d2:	f7ff fed4 	bl	800307e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	2000035c 	.word	0x2000035c
 80032e0:	40013800 	.word	0x40013800

080032e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 0310 	add.w	r3, r7, #16
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_UART_MspInit+0x8c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d131      	bne.n	8003368 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_UART_MspInit+0x90>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <HAL_UART_MspInit+0x90>)
 800330a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330e:	6193      	str	r3, [r2, #24]
 8003310:	4b18      	ldr	r3, [pc, #96]	; (8003374 <HAL_UART_MspInit+0x90>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_UART_MspInit+0x90>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <HAL_UART_MspInit+0x90>)
 8003322:	f043 0304 	orr.w	r3, r3, #4
 8003326:	6193      	str	r3, [r2, #24]
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <HAL_UART_MspInit+0x90>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003338:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800333e:	2303      	movs	r3, #3
 8003340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003342:	f107 0310 	add.w	r3, r7, #16
 8003346:	4619      	mov	r1, r3
 8003348:	480b      	ldr	r0, [pc, #44]	; (8003378 <HAL_UART_MspInit+0x94>)
 800334a:	f000 f9bb 	bl	80036c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800334e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335c:	f107 0310 	add.w	r3, r7, #16
 8003360:	4619      	mov	r1, r3
 8003362:	4805      	ldr	r0, [pc, #20]	; (8003378 <HAL_UART_MspInit+0x94>)
 8003364:	f000 f9ae 	bl	80036c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003368:	bf00      	nop
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40013800 	.word	0x40013800
 8003374:	40021000 	.word	0x40021000
 8003378:	40010800 	.word	0x40010800

0800337c <_write>:
}

/* USER CODE BEGIN 1 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, UART_Delay);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	b29a      	uxth	r2, r3
 800338c:	230a      	movs	r3, #10
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	4803      	ldr	r0, [pc, #12]	; (80033a0 <_write+0x24>)
 8003392:	f002 fa9f 	bl	80058d4 <HAL_UART_Transmit>
  return len;
 8003396:	687b      	ldr	r3, [r7, #4]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	2000035c 	.word	0x2000035c

080033a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033a4:	f7ff ff6e 	bl	8003284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033a8:	480b      	ldr	r0, [pc, #44]	; (80033d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80033aa:	490c      	ldr	r1, [pc, #48]	; (80033dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80033ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b0:	e002      	b.n	80033b8 <LoopCopyDataInit>

080033b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033b6:	3304      	adds	r3, #4

080033b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033bc:	d3f9      	bcc.n	80033b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033be:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80033c0:	4c09      	ldr	r4, [pc, #36]	; (80033e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c4:	e001      	b.n	80033ca <LoopFillZerobss>

080033c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c8:	3204      	adds	r2, #4

080033ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033cc:	d3fb      	bcc.n	80033c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033ce:	f003 fda5 	bl	8006f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033d2:	f7ff fbaf 	bl	8002b34 <main>
  bx lr
 80033d6:	4770      	bx	lr
  ldr r0, =_sdata
 80033d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033dc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80033e0:	0800aa2c 	.word	0x0800aa2c
  ldr r2, =_sbss
 80033e4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80033e8:	200008fc 	.word	0x200008fc

080033ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033ec:	e7fe      	b.n	80033ec <ADC1_2_IRQHandler>
	...

080033f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_Init+0x28>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a07      	ldr	r2, [pc, #28]	; (8003418 <HAL_Init+0x28>)
 80033fa:	f043 0310 	orr.w	r3, r3, #16
 80033fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003400:	2003      	movs	r0, #3
 8003402:	f000 f92b 	bl	800365c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003406:	200f      	movs	r0, #15
 8003408:	f000 f808 	bl	800341c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800340c:	f7ff fe3c 	bl	8003088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40022000 	.word	0x40022000

0800341c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_InitTick+0x54>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_InitTick+0x58>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4619      	mov	r1, r3
 800342e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003432:	fbb3 f3f1 	udiv	r3, r3, r1
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f935 	bl	80036aa <HAL_SYSTICK_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e00e      	b.n	8003468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b0f      	cmp	r3, #15
 800344e:	d80a      	bhi.n	8003466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003450:	2200      	movs	r2, #0
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	f000 f90b 	bl	8003672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800345c:	4a06      	ldr	r2, [pc, #24]	; (8003478 <HAL_InitTick+0x5c>)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000000 	.word	0x20000000
 8003474:	20000008 	.word	0x20000008
 8003478:	20000004 	.word	0x20000004

0800347c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_IncTick+0x1c>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_IncTick+0x20>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4413      	add	r3, r2
 800348c:	4a03      	ldr	r2, [pc, #12]	; (800349c <HAL_IncTick+0x20>)
 800348e:	6013      	str	r3, [r2, #0]
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	20000008 	.word	0x20000008
 800349c:	200003a4 	.word	0x200003a4

080034a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return uwTick;
 80034a4:	4b02      	ldr	r3, [pc, #8]	; (80034b0 <HAL_GetTick+0x10>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	200003a4 	.word	0x200003a4

080034b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034bc:	f7ff fff0 	bl	80034a0 <HAL_GetTick>
 80034c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034cc:	d005      	beq.n	80034da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_Delay+0x44>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034da:	bf00      	nop
 80034dc:	f7ff ffe0 	bl	80034a0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d8f7      	bhi.n	80034dc <HAL_Delay+0x28>
  {
  }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000008 	.word	0x20000008

080034fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003518:	4013      	ands	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352e:	4a04      	ldr	r2, [pc, #16]	; (8003540 <__NVIC_SetPriorityGrouping+0x44>)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	60d3      	str	r3, [r2, #12]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <__NVIC_GetPriorityGrouping+0x18>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	f003 0307 	and.w	r3, r3, #7
}
 8003552:	4618      	mov	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	2b00      	cmp	r3, #0
 8003572:	db0a      	blt.n	800358a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	490c      	ldr	r1, [pc, #48]	; (80035ac <__NVIC_SetPriority+0x4c>)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	440b      	add	r3, r1
 8003584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003588:	e00a      	b.n	80035a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4908      	ldr	r1, [pc, #32]	; (80035b0 <__NVIC_SetPriority+0x50>)
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	3b04      	subs	r3, #4
 8003598:	0112      	lsls	r2, r2, #4
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	440b      	add	r3, r1
 800359e:	761a      	strb	r2, [r3, #24]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000e100 	.word	0xe000e100
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	; 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f1c3 0307 	rsb	r3, r3, #7
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	bf28      	it	cs
 80035d2:	2304      	movcs	r3, #4
 80035d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3304      	adds	r3, #4
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d902      	bls.n	80035e4 <NVIC_EncodePriority+0x30>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3b03      	subs	r3, #3
 80035e2:	e000      	b.n	80035e6 <NVIC_EncodePriority+0x32>
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43da      	mvns	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	401a      	ands	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fa01 f303 	lsl.w	r3, r1, r3
 8003606:	43d9      	mvns	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	4313      	orrs	r3, r2
         );
}
 800360e:	4618      	mov	r0, r3
 8003610:	3724      	adds	r7, #36	; 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003628:	d301      	bcc.n	800362e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362a:	2301      	movs	r3, #1
 800362c:	e00f      	b.n	800364e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362e:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <SysTick_Config+0x40>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003636:	210f      	movs	r1, #15
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	f7ff ff90 	bl	8003560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <SysTick_Config+0x40>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <SysTick_Config+0x40>)
 8003648:	2207      	movs	r2, #7
 800364a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000e010 	.word	0xe000e010

0800365c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff49 	bl	80034fc <__NVIC_SetPriorityGrouping>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003684:	f7ff ff5e 	bl	8003544 <__NVIC_GetPriorityGrouping>
 8003688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7ff ff90 	bl	80035b4 <NVIC_EncodePriority>
 8003694:	4602      	mov	r2, r0
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff5f 	bl	8003560 <__NVIC_SetPriority>
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ffb0 	bl	8003618 <SysTick_Config>
 80036b8:	4603      	mov	r3, r0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b08b      	sub	sp, #44	; 0x2c
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036d2:	2300      	movs	r3, #0
 80036d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036d6:	e169      	b.n	80039ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036d8:	2201      	movs	r2, #1
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	f040 8158 	bne.w	80039a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4a9a      	ldr	r2, [pc, #616]	; (8003964 <HAL_GPIO_Init+0x2a0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d05e      	beq.n	80037be <HAL_GPIO_Init+0xfa>
 8003700:	4a98      	ldr	r2, [pc, #608]	; (8003964 <HAL_GPIO_Init+0x2a0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d875      	bhi.n	80037f2 <HAL_GPIO_Init+0x12e>
 8003706:	4a98      	ldr	r2, [pc, #608]	; (8003968 <HAL_GPIO_Init+0x2a4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d058      	beq.n	80037be <HAL_GPIO_Init+0xfa>
 800370c:	4a96      	ldr	r2, [pc, #600]	; (8003968 <HAL_GPIO_Init+0x2a4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d86f      	bhi.n	80037f2 <HAL_GPIO_Init+0x12e>
 8003712:	4a96      	ldr	r2, [pc, #600]	; (800396c <HAL_GPIO_Init+0x2a8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d052      	beq.n	80037be <HAL_GPIO_Init+0xfa>
 8003718:	4a94      	ldr	r2, [pc, #592]	; (800396c <HAL_GPIO_Init+0x2a8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d869      	bhi.n	80037f2 <HAL_GPIO_Init+0x12e>
 800371e:	4a94      	ldr	r2, [pc, #592]	; (8003970 <HAL_GPIO_Init+0x2ac>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d04c      	beq.n	80037be <HAL_GPIO_Init+0xfa>
 8003724:	4a92      	ldr	r2, [pc, #584]	; (8003970 <HAL_GPIO_Init+0x2ac>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d863      	bhi.n	80037f2 <HAL_GPIO_Init+0x12e>
 800372a:	4a92      	ldr	r2, [pc, #584]	; (8003974 <HAL_GPIO_Init+0x2b0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d046      	beq.n	80037be <HAL_GPIO_Init+0xfa>
 8003730:	4a90      	ldr	r2, [pc, #576]	; (8003974 <HAL_GPIO_Init+0x2b0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d85d      	bhi.n	80037f2 <HAL_GPIO_Init+0x12e>
 8003736:	2b12      	cmp	r3, #18
 8003738:	d82a      	bhi.n	8003790 <HAL_GPIO_Init+0xcc>
 800373a:	2b12      	cmp	r3, #18
 800373c:	d859      	bhi.n	80037f2 <HAL_GPIO_Init+0x12e>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <HAL_GPIO_Init+0x80>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	080037bf 	.word	0x080037bf
 8003748:	08003799 	.word	0x08003799
 800374c:	080037ab 	.word	0x080037ab
 8003750:	080037ed 	.word	0x080037ed
 8003754:	080037f3 	.word	0x080037f3
 8003758:	080037f3 	.word	0x080037f3
 800375c:	080037f3 	.word	0x080037f3
 8003760:	080037f3 	.word	0x080037f3
 8003764:	080037f3 	.word	0x080037f3
 8003768:	080037f3 	.word	0x080037f3
 800376c:	080037f3 	.word	0x080037f3
 8003770:	080037f3 	.word	0x080037f3
 8003774:	080037f3 	.word	0x080037f3
 8003778:	080037f3 	.word	0x080037f3
 800377c:	080037f3 	.word	0x080037f3
 8003780:	080037f3 	.word	0x080037f3
 8003784:	080037f3 	.word	0x080037f3
 8003788:	080037a1 	.word	0x080037a1
 800378c:	080037b5 	.word	0x080037b5
 8003790:	4a79      	ldr	r2, [pc, #484]	; (8003978 <HAL_GPIO_Init+0x2b4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003796:	e02c      	b.n	80037f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	623b      	str	r3, [r7, #32]
          break;
 800379e:	e029      	b.n	80037f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	3304      	adds	r3, #4
 80037a6:	623b      	str	r3, [r7, #32]
          break;
 80037a8:	e024      	b.n	80037f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	3308      	adds	r3, #8
 80037b0:	623b      	str	r3, [r7, #32]
          break;
 80037b2:	e01f      	b.n	80037f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	330c      	adds	r3, #12
 80037ba:	623b      	str	r3, [r7, #32]
          break;
 80037bc:	e01a      	b.n	80037f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037c6:	2304      	movs	r3, #4
 80037c8:	623b      	str	r3, [r7, #32]
          break;
 80037ca:	e013      	b.n	80037f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d105      	bne.n	80037e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037d4:	2308      	movs	r3, #8
 80037d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	611a      	str	r2, [r3, #16]
          break;
 80037de:	e009      	b.n	80037f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037e0:	2308      	movs	r3, #8
 80037e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	615a      	str	r2, [r3, #20]
          break;
 80037ea:	e003      	b.n	80037f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037ec:	2300      	movs	r3, #0
 80037ee:	623b      	str	r3, [r7, #32]
          break;
 80037f0:	e000      	b.n	80037f4 <HAL_GPIO_Init+0x130>
          break;
 80037f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2bff      	cmp	r3, #255	; 0xff
 80037f8:	d801      	bhi.n	80037fe <HAL_GPIO_Init+0x13a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	e001      	b.n	8003802 <HAL_GPIO_Init+0x13e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2bff      	cmp	r3, #255	; 0xff
 8003808:	d802      	bhi.n	8003810 <HAL_GPIO_Init+0x14c>
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	e002      	b.n	8003816 <HAL_GPIO_Init+0x152>
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	3b08      	subs	r3, #8
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	210f      	movs	r1, #15
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	401a      	ands	r2, r3
 8003828:	6a39      	ldr	r1, [r7, #32]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	431a      	orrs	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80b1 	beq.w	80039a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003844:	4b4d      	ldr	r3, [pc, #308]	; (800397c <HAL_GPIO_Init+0x2b8>)
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	4a4c      	ldr	r2, [pc, #304]	; (800397c <HAL_GPIO_Init+0x2b8>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	6193      	str	r3, [r2, #24]
 8003850:	4b4a      	ldr	r3, [pc, #296]	; (800397c <HAL_GPIO_Init+0x2b8>)
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800385c:	4a48      	ldr	r2, [pc, #288]	; (8003980 <HAL_GPIO_Init+0x2bc>)
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	3302      	adds	r3, #2
 8003864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003868:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	220f      	movs	r2, #15
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4013      	ands	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a40      	ldr	r2, [pc, #256]	; (8003984 <HAL_GPIO_Init+0x2c0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d013      	beq.n	80038b0 <HAL_GPIO_Init+0x1ec>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3f      	ldr	r2, [pc, #252]	; (8003988 <HAL_GPIO_Init+0x2c4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00d      	beq.n	80038ac <HAL_GPIO_Init+0x1e8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3e      	ldr	r2, [pc, #248]	; (800398c <HAL_GPIO_Init+0x2c8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d007      	beq.n	80038a8 <HAL_GPIO_Init+0x1e4>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3d      	ldr	r2, [pc, #244]	; (8003990 <HAL_GPIO_Init+0x2cc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_GPIO_Init+0x1e0>
 80038a0:	2303      	movs	r3, #3
 80038a2:	e006      	b.n	80038b2 <HAL_GPIO_Init+0x1ee>
 80038a4:	2304      	movs	r3, #4
 80038a6:	e004      	b.n	80038b2 <HAL_GPIO_Init+0x1ee>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e002      	b.n	80038b2 <HAL_GPIO_Init+0x1ee>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_GPIO_Init+0x1ee>
 80038b0:	2300      	movs	r3, #0
 80038b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b4:	f002 0203 	and.w	r2, r2, #3
 80038b8:	0092      	lsls	r2, r2, #2
 80038ba:	4093      	lsls	r3, r2
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038c2:	492f      	ldr	r1, [pc, #188]	; (8003980 <HAL_GPIO_Init+0x2bc>)
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	3302      	adds	r3, #2
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d006      	beq.n	80038ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038dc:	4b2d      	ldr	r3, [pc, #180]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	492c      	ldr	r1, [pc, #176]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]
 80038e8:	e006      	b.n	80038f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038ea:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	4928      	ldr	r1, [pc, #160]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d006      	beq.n	8003912 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003904:	4b23      	ldr	r3, [pc, #140]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	4922      	ldr	r1, [pc, #136]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	4313      	orrs	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
 8003910:	e006      	b.n	8003920 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	43db      	mvns	r3, r3
 800391a:	491e      	ldr	r1, [pc, #120]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 800391c:	4013      	ands	r3, r2
 800391e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d006      	beq.n	800393a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	4918      	ldr	r1, [pc, #96]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
 8003938:	e006      	b.n	8003948 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800393a:	4b16      	ldr	r3, [pc, #88]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	43db      	mvns	r3, r3
 8003942:	4914      	ldr	r1, [pc, #80]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 8003944:	4013      	ands	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d021      	beq.n	8003998 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	490e      	ldr	r1, [pc, #56]	; (8003994 <HAL_GPIO_Init+0x2d0>)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]
 8003960:	e021      	b.n	80039a6 <HAL_GPIO_Init+0x2e2>
 8003962:	bf00      	nop
 8003964:	10320000 	.word	0x10320000
 8003968:	10310000 	.word	0x10310000
 800396c:	10220000 	.word	0x10220000
 8003970:	10210000 	.word	0x10210000
 8003974:	10120000 	.word	0x10120000
 8003978:	10110000 	.word	0x10110000
 800397c:	40021000 	.word	0x40021000
 8003980:	40010000 	.word	0x40010000
 8003984:	40010800 	.word	0x40010800
 8003988:	40010c00 	.word	0x40010c00
 800398c:	40011000 	.word	0x40011000
 8003990:	40011400 	.word	0x40011400
 8003994:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_GPIO_Init+0x304>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	43db      	mvns	r3, r3
 80039a0:	4909      	ldr	r1, [pc, #36]	; (80039c8 <HAL_GPIO_Init+0x304>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	3301      	adds	r3, #1
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f47f ae8e 	bne.w	80036d8 <HAL_GPIO_Init+0x14>
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	372c      	adds	r7, #44	; 0x2c
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	40010400 	.word	0x40010400

080039cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
 80039d8:	4613      	mov	r3, r2
 80039da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039dc:	787b      	ldrb	r3, [r7, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039e8:	e003      	b.n	80039f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039ea:	887b      	ldrh	r3, [r7, #2]
 80039ec:	041a      	lsls	r2, r3, #16
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	611a      	str	r2, [r3, #16]
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a0e:	887a      	ldrh	r2, [r7, #2]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4013      	ands	r3, r2
 8003a14:	041a      	lsls	r2, r3, #16
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	43d9      	mvns	r1, r3
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	611a      	str	r2, [r3, #16]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e12b      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff f800 	bl	8002a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2224      	movs	r2, #36	; 0x24
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a94:	f001 fe88 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 8003a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4a81      	ldr	r2, [pc, #516]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d807      	bhi.n	8003ab4 <HAL_I2C_Init+0x84>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a80      	ldr	r2, [pc, #512]	; (8003ca8 <HAL_I2C_Init+0x278>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	bf94      	ite	ls
 8003aac:	2301      	movls	r3, #1
 8003aae:	2300      	movhi	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e006      	b.n	8003ac2 <HAL_I2C_Init+0x92>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a7d      	ldr	r2, [pc, #500]	; (8003cac <HAL_I2C_Init+0x27c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bf94      	ite	ls
 8003abc:	2301      	movls	r3, #1
 8003abe:	2300      	movhi	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0e7      	b.n	8003c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a78      	ldr	r2, [pc, #480]	; (8003cb0 <HAL_I2C_Init+0x280>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0c9b      	lsrs	r3, r3, #18
 8003ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a6a      	ldr	r2, [pc, #424]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d802      	bhi.n	8003b04 <HAL_I2C_Init+0xd4>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3301      	adds	r3, #1
 8003b02:	e009      	b.n	8003b18 <HAL_I2C_Init+0xe8>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	4a69      	ldr	r2, [pc, #420]	; (8003cb4 <HAL_I2C_Init+0x284>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	3301      	adds	r3, #1
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	495c      	ldr	r1, [pc, #368]	; (8003ca4 <HAL_I2C_Init+0x274>)
 8003b34:	428b      	cmp	r3, r1
 8003b36:	d819      	bhi.n	8003b6c <HAL_I2C_Init+0x13c>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1e59      	subs	r1, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_I2C_Init+0x138>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1e59      	subs	r1, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b60:	3301      	adds	r3, #1
 8003b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b66:	e051      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	e04f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d111      	bne.n	8003b98 <HAL_I2C_Init+0x168>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e58      	subs	r0, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	440b      	add	r3, r1
 8003b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e012      	b.n	8003bbe <HAL_I2C_Init+0x18e>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1e58      	subs	r0, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	0099      	lsls	r1, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Init+0x196>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e022      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10e      	bne.n	8003bec <HAL_I2C_Init+0x1bc>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1e58      	subs	r0, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	440b      	add	r3, r1
 8003bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be0:	3301      	adds	r3, #1
 8003be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bea:	e00f      	b.n	8003c0c <HAL_I2C_Init+0x1dc>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e58      	subs	r0, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	0099      	lsls	r1, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	6809      	ldr	r1, [r1, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6911      	ldr	r1, [r2, #16]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68d2      	ldr	r2, [r2, #12]
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	000186a0 	.word	0x000186a0
 8003ca8:	001e847f 	.word	0x001e847f
 8003cac:	003d08ff 	.word	0x003d08ff
 8003cb0:	431bde83 	.word	0x431bde83
 8003cb4:	10624dd3 	.word	0x10624dd3

08003cb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	817b      	strh	r3, [r7, #10]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7ff fbe8 	bl	80034a0 <HAL_GetTick>
 8003cd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	f040 80e0 	bne.w	8003ea0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2319      	movs	r3, #25
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4970      	ldr	r1, [pc, #448]	; (8003eac <HAL_I2C_Master_Transmit+0x1f4>)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 ff5c 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e0d3      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_I2C_Master_Transmit+0x50>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e0cc      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d007      	beq.n	8003d2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2221      	movs	r2, #33	; 0x21
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	893a      	ldrh	r2, [r7, #8]
 8003d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a50      	ldr	r2, [pc, #320]	; (8003eb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d70:	8979      	ldrh	r1, [r7, #10]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	6a3a      	ldr	r2, [r7, #32]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fd30 	bl	80047dc <I2C_MasterRequestWrite>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e08d      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d86:	2300      	movs	r3, #0
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d9c:	e066      	b.n	8003e6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	6a39      	ldr	r1, [r7, #32]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f001 f81a 	bl	8004ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00d      	beq.n	8003dca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d107      	bne.n	8003dc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e06b      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d11b      	bne.n	8003e40 <HAL_I2C_Master_Transmit+0x188>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d017      	beq.n	8003e40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	781a      	ldrb	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	6a39      	ldr	r1, [r7, #32]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f001 f811 	bl	8004e6c <I2C_WaitOnBTFFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d107      	bne.n	8003e68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e01a      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d194      	bne.n	8003d9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	00100002 	.word	0x00100002
 8003eb0:	ffff0000 	.word	0xffff0000

08003eb4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08c      	sub	sp, #48	; 0x30
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	817b      	strh	r3, [r7, #10]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ecc:	f7ff fae8 	bl	80034a0 <HAL_GetTick>
 8003ed0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	f040 824b 	bne.w	8004376 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2319      	movs	r3, #25
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	497f      	ldr	r1, [pc, #508]	; (80040e8 <HAL_I2C_Master_Receive+0x234>)
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fe5c 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e23e      	b.n	8004378 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_I2C_Master_Receive+0x54>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e237      	b.n	8004378 <HAL_I2C_Master_Receive+0x4c4>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d007      	beq.n	8003f2e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2222      	movs	r2, #34	; 0x22
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2210      	movs	r2, #16
 8003f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	893a      	ldrh	r2, [r7, #8]
 8003f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4a5f      	ldr	r2, [pc, #380]	; (80040ec <HAL_I2C_Master_Receive+0x238>)
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f70:	8979      	ldrh	r1, [r7, #10]
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fcb2 	bl	80048e0 <I2C_MasterRequestRead>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e1f8      	b.n	8004378 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d113      	bne.n	8003fb6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e1cc      	b.n	8004350 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d11e      	bne.n	8003ffc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fce:	b672      	cpsid	i
}
 8003fd0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	61bb      	str	r3, [r7, #24]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ff8:	b662      	cpsie	i
}
 8003ffa:	e035      	b.n	8004068 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b02      	cmp	r3, #2
 8004002:	d11e      	bne.n	8004042 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004012:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004014:	b672      	cpsid	i
}
 8004016:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800403e:	b662      	cpsie	i
}
 8004040:	e012      	b.n	8004068 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004068:	e172      	b.n	8004350 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406e:	2b03      	cmp	r3, #3
 8004070:	f200 811f 	bhi.w	80042b2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	2b01      	cmp	r3, #1
 800407a:	d123      	bne.n	80040c4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 ff3b 	bl	8004efc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e173      	b.n	8004378 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040c2:	e145      	b.n	8004350 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d152      	bne.n	8004172 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	2200      	movs	r2, #0
 80040d4:	4906      	ldr	r1, [pc, #24]	; (80040f0 <HAL_I2C_Master_Receive+0x23c>)
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fd66 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e148      	b.n	8004378 <HAL_I2C_Master_Receive+0x4c4>
 80040e6:	bf00      	nop
 80040e8:	00100002 	.word	0x00100002
 80040ec:	ffff0000 	.word	0xffff0000
 80040f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80040f4:	b672      	cpsid	i
}
 80040f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004106:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800413a:	b662      	cpsie	i
}
 800413c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004170:	e0ee      	b.n	8004350 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	2200      	movs	r2, #0
 800417a:	4981      	ldr	r1, [pc, #516]	; (8004380 <HAL_I2C_Master_Receive+0x4cc>)
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fd13 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0f5      	b.n	8004378 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800419c:	b672      	cpsid	i
}
 800419e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041d2:	4b6c      	ldr	r3, [pc, #432]	; (8004384 <HAL_I2C_Master_Receive+0x4d0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	08db      	lsrs	r3, r3, #3
 80041d8:	4a6b      	ldr	r2, [pc, #428]	; (8004388 <HAL_I2C_Master_Receive+0x4d4>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	0a1a      	lsrs	r2, r3, #8
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	00da      	lsls	r2, r3, #3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d118      	bne.n	800422a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f043 0220 	orr.w	r2, r3, #32
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800421a:	b662      	cpsie	i
}
 800421c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0a6      	b.n	8004378 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d1d9      	bne.n	80041ec <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800427a:	b662      	cpsie	i
}
 800427c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042b0:	e04e      	b.n	8004350 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fe20 	bl	8004efc <I2C_WaitOnRXNEFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e058      	b.n	8004378 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b04      	cmp	r3, #4
 8004304:	d124      	bne.n	8004350 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	2b03      	cmp	r3, #3
 800430c:	d107      	bne.n	800431e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	f47f ae88 	bne.w	800406a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e000      	b.n	8004378 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3728      	adds	r7, #40	; 0x28
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	00010004 	.word	0x00010004
 8004384:	20000000 	.word	0x20000000
 8004388:	14f8b589 	.word	0x14f8b589

0800438c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4603      	mov	r3, r0
 800439c:	817b      	strh	r3, [r7, #10]
 800439e:	460b      	mov	r3, r1
 80043a0:	813b      	strh	r3, [r7, #8]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043a6:	f7ff f87b 	bl	80034a0 <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	f040 80d9 	bne.w	800456c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	2319      	movs	r3, #25
 80043c0:	2201      	movs	r2, #1
 80043c2:	496d      	ldr	r1, [pc, #436]	; (8004578 <HAL_I2C_Mem_Write+0x1ec>)
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 fbef 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
 80043d2:	e0cc      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_I2C_Mem_Write+0x56>
 80043de:	2302      	movs	r3, #2
 80043e0:	e0c5      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d007      	beq.n	8004408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2221      	movs	r2, #33	; 0x21
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2240      	movs	r2, #64	; 0x40
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4a4d      	ldr	r2, [pc, #308]	; (800457c <HAL_I2C_Mem_Write+0x1f0>)
 8004448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800444a:	88f8      	ldrh	r0, [r7, #6]
 800444c:	893a      	ldrh	r2, [r7, #8]
 800444e:	8979      	ldrh	r1, [r7, #10]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	4603      	mov	r3, r0
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fb0e 	bl	8004a7c <I2C_RequestMemoryWrite>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d052      	beq.n	800450c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e081      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fcb4 	bl	8004ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b04      	cmp	r3, #4
 8004480:	d107      	bne.n	8004492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e06b      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	781a      	ldrb	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d11b      	bne.n	800450c <HAL_I2C_Mem_Write+0x180>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d017      	beq.n	800450c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1aa      	bne.n	800446a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fca7 	bl	8004e6c <I2C_WaitOnBTFFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	2b04      	cmp	r3, #4
 800452a:	d107      	bne.n	800453c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e016      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	e000      	b.n	800456e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800456c:	2302      	movs	r3, #2
  }
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	00100002 	.word	0x00100002
 800457c:	ffff0000 	.word	0xffff0000

08004580 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	460b      	mov	r3, r1
 800458e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004590:	f7fe ff86 	bl	80034a0 <HAL_GetTick>
 8004594:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	f040 8111 	bne.w	80047ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2319      	movs	r3, #25
 80045ae:	2201      	movs	r2, #1
 80045b0:	4988      	ldr	r1, [pc, #544]	; (80047d4 <HAL_I2C_IsDeviceReady+0x254>)
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 faf8 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80045be:	2302      	movs	r3, #2
 80045c0:	e104      	b.n	80047cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_I2C_IsDeviceReady+0x50>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e0fd      	b.n	80047cc <HAL_I2C_IsDeviceReady+0x24c>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d007      	beq.n	80045f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004604:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2224      	movs	r2, #36	; 0x24
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a70      	ldr	r2, [pc, #448]	; (80047d8 <HAL_I2C_IsDeviceReady+0x258>)
 8004618:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004628:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2200      	movs	r2, #0
 8004632:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fab6 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00d      	beq.n	800465e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004650:	d103      	bne.n	800465a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0b6      	b.n	80047cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800465e:	897b      	ldrh	r3, [r7, #10]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800466c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800466e:	f7fe ff17 	bl	80034a0 <HAL_GetTick>
 8004672:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	bf0c      	ite	eq
 8004682:	2301      	moveq	r3, #1
 8004684:	2300      	movne	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004698:	bf0c      	ite	eq
 800469a:	2301      	moveq	r3, #1
 800469c:	2300      	movne	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80046a2:	e025      	b.n	80046f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046a4:	f7fe fefc 	bl	80034a0 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d302      	bcc.n	80046ba <HAL_I2C_IsDeviceReady+0x13a>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	22a0      	movs	r2, #160	; 0xa0
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2ba0      	cmp	r3, #160	; 0xa0
 80046fa:	d005      	beq.n	8004708 <HAL_I2C_IsDeviceReady+0x188>
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <HAL_I2C_IsDeviceReady+0x188>
 8004702:	7dbb      	ldrb	r3, [r7, #22]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0cd      	beq.n	80046a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b02      	cmp	r3, #2
 800471c:	d129      	bne.n	8004772 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472e:	2300      	movs	r3, #0
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	2319      	movs	r3, #25
 800474a:	2201      	movs	r2, #1
 800474c:	4921      	ldr	r1, [pc, #132]	; (80047d4 <HAL_I2C_IsDeviceReady+0x254>)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fa2a 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e036      	b.n	80047cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	e02c      	b.n	80047cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004780:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800478a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	2319      	movs	r3, #25
 8004792:	2201      	movs	r2, #1
 8004794:	490f      	ldr	r1, [pc, #60]	; (80047d4 <HAL_I2C_IsDeviceReady+0x254>)
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fa06 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e012      	b.n	80047cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	3301      	adds	r3, #1
 80047aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	f4ff af32 	bcc.w	800461a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	00100002 	.word	0x00100002
 80047d8:	ffff0000 	.word	0xffff0000

080047dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	460b      	mov	r3, r1
 80047ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d006      	beq.n	8004806 <I2C_MasterRequestWrite+0x2a>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d003      	beq.n	8004806 <I2C_MasterRequestWrite+0x2a>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004804:	d108      	bne.n	8004818 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e00b      	b.n	8004830 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	2b12      	cmp	r3, #18
 800481e:	d107      	bne.n	8004830 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f9b3 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00d      	beq.n	8004864 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004856:	d103      	bne.n	8004860 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e035      	b.n	80048d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800486c:	d108      	bne.n	8004880 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800486e:	897b      	ldrh	r3, [r7, #10]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	461a      	mov	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800487c:	611a      	str	r2, [r3, #16]
 800487e:	e01b      	b.n	80048b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004880:	897b      	ldrh	r3, [r7, #10]
 8004882:	11db      	asrs	r3, r3, #7
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 0306 	and.w	r3, r3, #6
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f063 030f 	orn	r3, r3, #15
 8004890:	b2da      	uxtb	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	490e      	ldr	r1, [pc, #56]	; (80048d8 <I2C_MasterRequestWrite+0xfc>)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f9fc 	bl	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e010      	b.n	80048d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048ae:	897b      	ldrh	r3, [r7, #10]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	4907      	ldr	r1, [pc, #28]	; (80048dc <I2C_MasterRequestWrite+0x100>)
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f9ec 	bl	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	00010008 	.word	0x00010008
 80048dc:	00010002 	.word	0x00010002

080048e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	460b      	mov	r3, r1
 80048ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004904:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d006      	beq.n	800491a <I2C_MasterRequestRead+0x3a>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d003      	beq.n	800491a <I2C_MasterRequestRead+0x3a>
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004918:	d108      	bne.n	800492c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e00b      	b.n	8004944 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	2b11      	cmp	r3, #17
 8004932:	d107      	bne.n	8004944 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004942:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f929 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00d      	beq.n	8004978 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496a:	d103      	bne.n	8004974 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e079      	b.n	8004a6c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004980:	d108      	bne.n	8004994 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004982:	897b      	ldrh	r3, [r7, #10]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	b2da      	uxtb	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	611a      	str	r2, [r3, #16]
 8004992:	e05f      	b.n	8004a54 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004994:	897b      	ldrh	r3, [r7, #10]
 8004996:	11db      	asrs	r3, r3, #7
 8004998:	b2db      	uxtb	r3, r3
 800499a:	f003 0306 	and.w	r3, r3, #6
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	f063 030f 	orn	r3, r3, #15
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4930      	ldr	r1, [pc, #192]	; (8004a74 <I2C_MasterRequestRead+0x194>)
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f972 	bl	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e054      	b.n	8004a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049c2:	897b      	ldrh	r3, [r7, #10]
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4929      	ldr	r1, [pc, #164]	; (8004a78 <I2C_MasterRequestRead+0x198>)
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f962 	bl	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e044      	b.n	8004a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f8c7 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00d      	beq.n	8004a3c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2e:	d103      	bne.n	8004a38 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e017      	b.n	8004a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a3c:	897b      	ldrh	r3, [r7, #10]
 8004a3e:	11db      	asrs	r3, r3, #7
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	f003 0306 	and.w	r3, r3, #6
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f063 030e 	orn	r3, r3, #14
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4907      	ldr	r1, [pc, #28]	; (8004a78 <I2C_MasterRequestRead+0x198>)
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f91e 	bl	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	00010008 	.word	0x00010008
 8004a78:	00010002 	.word	0x00010002

08004a7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	4608      	mov	r0, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	817b      	strh	r3, [r7, #10]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	813b      	strh	r3, [r7, #8]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 f878 	bl	8004ba8 <I2C_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00d      	beq.n	8004ada <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004acc:	d103      	bne.n	8004ad6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e05f      	b.n	8004b9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ada:	897b      	ldrh	r3, [r7, #10]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ae8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	6a3a      	ldr	r2, [r7, #32]
 8004aee:	492d      	ldr	r1, [pc, #180]	; (8004ba4 <I2C_RequestMemoryWrite+0x128>)
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f8d3 	bl	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e04c      	b.n	8004b9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b18:	6a39      	ldr	r1, [r7, #32]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f95e 	bl	8004ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00d      	beq.n	8004b42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d107      	bne.n	8004b3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e02b      	b.n	8004b9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d105      	bne.n	8004b54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b48:	893b      	ldrh	r3, [r7, #8]
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	611a      	str	r2, [r3, #16]
 8004b52:	e021      	b.n	8004b98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b54:	893b      	ldrh	r3, [r7, #8]
 8004b56:	0a1b      	lsrs	r3, r3, #8
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b64:	6a39      	ldr	r1, [r7, #32]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f938 	bl	8004ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d107      	bne.n	8004b8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e005      	b.n	8004b9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b8e:	893b      	ldrh	r3, [r7, #8]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	00010002 	.word	0x00010002

08004ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb8:	e048      	b.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d044      	beq.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc2:	f7fe fc6d 	bl	80034a0 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d302      	bcc.n	8004bd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d139      	bne.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d10d      	bne.n	8004bfe <I2C_WaitOnFlagUntilTimeout+0x56>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	43da      	mvns	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	4013      	ands	r3, r2
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2301      	moveq	r3, #1
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	e00c      	b.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	43da      	mvns	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf0c      	ite	eq
 8004c10:	2301      	moveq	r3, #1
 8004c12:	2300      	movne	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d116      	bne.n	8004c4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f043 0220 	orr.w	r2, r3, #32
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e023      	b.n	8004c94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	0c1b      	lsrs	r3, r3, #16
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d10d      	bne.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	43da      	mvns	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4013      	ands	r3, r2
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	e00c      	b.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	43da      	mvns	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf0c      	ite	eq
 8004c84:	2301      	moveq	r3, #1
 8004c86:	2300      	movne	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d093      	beq.n	8004bba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004caa:	e071      	b.n	8004d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cba:	d123      	bne.n	8004d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f043 0204 	orr.w	r2, r3, #4
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e067      	b.n	8004dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d041      	beq.n	8004d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0c:	f7fe fbc8 	bl	80034a0 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d136      	bne.n	8004d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	0c1b      	lsrs	r3, r3, #16
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d10c      	bne.n	8004d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	43da      	mvns	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4013      	ands	r3, r2
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bf14      	ite	ne
 8004d3e:	2301      	movne	r3, #1
 8004d40:	2300      	moveq	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	e00b      	b.n	8004d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	43da      	mvns	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	4013      	ands	r3, r2
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d016      	beq.n	8004d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	f043 0220 	orr.w	r2, r3, #32
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e021      	b.n	8004dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d10c      	bne.n	8004db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	43da      	mvns	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4013      	ands	r3, r2
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e00b      	b.n	8004dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	43da      	mvns	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bf14      	ite	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	2300      	moveq	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f47f af6d 	bne.w	8004cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004de8:	e034      	b.n	8004e54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f8e3 	bl	8004fb6 <I2C_IsAcknowledgeFailed>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e034      	b.n	8004e64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d028      	beq.n	8004e54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e02:	f7fe fb4d 	bl	80034a0 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d302      	bcc.n	8004e18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11d      	bne.n	8004e54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d016      	beq.n	8004e54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e007      	b.n	8004e64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5e:	2b80      	cmp	r3, #128	; 0x80
 8004e60:	d1c3      	bne.n	8004dea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e78:	e034      	b.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 f89b 	bl	8004fb6 <I2C_IsAcknowledgeFailed>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e034      	b.n	8004ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d028      	beq.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e92:	f7fe fb05 	bl	80034a0 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d11d      	bne.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d016      	beq.n	8004ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	f043 0220 	orr.w	r2, r3, #32
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e007      	b.n	8004ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d1c3      	bne.n	8004e7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f08:	e049      	b.n	8004f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d119      	bne.n	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0210 	mvn.w	r2, #16
 8004f20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e030      	b.n	8004fae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4c:	f7fe faa8 	bl	80034a0 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d302      	bcc.n	8004f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d11d      	bne.n	8004f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	2b40      	cmp	r3, #64	; 0x40
 8004f6e:	d016      	beq.n	8004f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e007      	b.n	8004fae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d1ae      	bne.n	8004f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fcc:	d11b      	bne.n	8005006 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fd6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f043 0204 	orr.w	r2, r3, #4
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
	...

08005014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e272      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8087 	beq.w	8005142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005034:	4b92      	ldr	r3, [pc, #584]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f003 030c 	and.w	r3, r3, #12
 800503c:	2b04      	cmp	r3, #4
 800503e:	d00c      	beq.n	800505a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005040:	4b8f      	ldr	r3, [pc, #572]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 030c 	and.w	r3, r3, #12
 8005048:	2b08      	cmp	r3, #8
 800504a:	d112      	bne.n	8005072 <HAL_RCC_OscConfig+0x5e>
 800504c:	4b8c      	ldr	r3, [pc, #560]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005058:	d10b      	bne.n	8005072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505a:	4b89      	ldr	r3, [pc, #548]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d06c      	beq.n	8005140 <HAL_RCC_OscConfig+0x12c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d168      	bne.n	8005140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e24c      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507a:	d106      	bne.n	800508a <HAL_RCC_OscConfig+0x76>
 800507c:	4b80      	ldr	r3, [pc, #512]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a7f      	ldr	r2, [pc, #508]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	e02e      	b.n	80050e8 <HAL_RCC_OscConfig+0xd4>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10c      	bne.n	80050ac <HAL_RCC_OscConfig+0x98>
 8005092:	4b7b      	ldr	r3, [pc, #492]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a7a      	ldr	r2, [pc, #488]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	4b78      	ldr	r3, [pc, #480]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a77      	ldr	r2, [pc, #476]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e01d      	b.n	80050e8 <HAL_RCC_OscConfig+0xd4>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0xbc>
 80050b6:	4b72      	ldr	r3, [pc, #456]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a71      	ldr	r2, [pc, #452]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	4b6f      	ldr	r3, [pc, #444]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6e      	ldr	r2, [pc, #440]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e00b      	b.n	80050e8 <HAL_RCC_OscConfig+0xd4>
 80050d0:	4b6b      	ldr	r3, [pc, #428]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a6a      	ldr	r2, [pc, #424]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	4b68      	ldr	r3, [pc, #416]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a67      	ldr	r2, [pc, #412]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80050e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d013      	beq.n	8005118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fe f9d6 	bl	80034a0 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fe f9d2 	bl	80034a0 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	; 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e200      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510a:	4b5d      	ldr	r3, [pc, #372]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0xe4>
 8005116:	e014      	b.n	8005142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fe f9c2 	bl	80034a0 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005120:	f7fe f9be 	bl	80034a0 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	; 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e1ec      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005132:	4b53      	ldr	r3, [pc, #332]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x10c>
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d063      	beq.n	8005216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800514e:	4b4c      	ldr	r3, [pc, #304]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800515a:	4b49      	ldr	r3, [pc, #292]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 030c 	and.w	r3, r3, #12
 8005162:	2b08      	cmp	r3, #8
 8005164:	d11c      	bne.n	80051a0 <HAL_RCC_OscConfig+0x18c>
 8005166:	4b46      	ldr	r3, [pc, #280]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d116      	bne.n	80051a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005172:	4b43      	ldr	r3, [pc, #268]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_RCC_OscConfig+0x176>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d001      	beq.n	800518a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e1c0      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518a:	4b3d      	ldr	r3, [pc, #244]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4939      	ldr	r1, [pc, #228]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 800519a:	4313      	orrs	r3, r2
 800519c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519e:	e03a      	b.n	8005216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d020      	beq.n	80051ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051a8:	4b36      	ldr	r3, [pc, #216]	; (8005284 <HAL_RCC_OscConfig+0x270>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ae:	f7fe f977 	bl	80034a0 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b6:	f7fe f973 	bl	80034a0 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e1a1      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c8:	4b2d      	ldr	r3, [pc, #180]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d4:	4b2a      	ldr	r3, [pc, #168]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4927      	ldr	r1, [pc, #156]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]
 80051e8:	e015      	b.n	8005216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ea:	4b26      	ldr	r3, [pc, #152]	; (8005284 <HAL_RCC_OscConfig+0x270>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fe f956 	bl	80034a0 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f8:	f7fe f952 	bl	80034a0 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e180      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520a:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d03a      	beq.n	8005298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d019      	beq.n	800525e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522a:	4b17      	ldr	r3, [pc, #92]	; (8005288 <HAL_RCC_OscConfig+0x274>)
 800522c:	2201      	movs	r2, #1
 800522e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005230:	f7fe f936 	bl	80034a0 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005238:	f7fe f932 	bl	80034a0 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e160      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524a:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <HAL_RCC_OscConfig+0x26c>)
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005256:	2001      	movs	r0, #1
 8005258:	f000 face 	bl	80057f8 <RCC_Delay>
 800525c:	e01c      	b.n	8005298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800525e:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <HAL_RCC_OscConfig+0x274>)
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005264:	f7fe f91c 	bl	80034a0 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800526a:	e00f      	b.n	800528c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526c:	f7fe f918 	bl	80034a0 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d908      	bls.n	800528c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e146      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000
 8005284:	42420000 	.word	0x42420000
 8005288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800528c:	4b92      	ldr	r3, [pc, #584]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e9      	bne.n	800526c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80a6 	beq.w	80053f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052aa:	4b8b      	ldr	r3, [pc, #556]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10d      	bne.n	80052d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b6:	4b88      	ldr	r3, [pc, #544]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	4a87      	ldr	r2, [pc, #540]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 80052bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c0:	61d3      	str	r3, [r2, #28]
 80052c2:	4b85      	ldr	r3, [pc, #532]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ce:	2301      	movs	r3, #1
 80052d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d2:	4b82      	ldr	r3, [pc, #520]	; (80054dc <HAL_RCC_OscConfig+0x4c8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d118      	bne.n	8005310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052de:	4b7f      	ldr	r3, [pc, #508]	; (80054dc <HAL_RCC_OscConfig+0x4c8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a7e      	ldr	r2, [pc, #504]	; (80054dc <HAL_RCC_OscConfig+0x4c8>)
 80052e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ea:	f7fe f8d9 	bl	80034a0 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f2:	f7fe f8d5 	bl	80034a0 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b64      	cmp	r3, #100	; 0x64
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e103      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	4b75      	ldr	r3, [pc, #468]	; (80054dc <HAL_RCC_OscConfig+0x4c8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0x312>
 8005318:	4b6f      	ldr	r3, [pc, #444]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	4a6e      	ldr	r2, [pc, #440]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	6213      	str	r3, [r2, #32]
 8005324:	e02d      	b.n	8005382 <HAL_RCC_OscConfig+0x36e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10c      	bne.n	8005348 <HAL_RCC_OscConfig+0x334>
 800532e:	4b6a      	ldr	r3, [pc, #424]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	4a69      	ldr	r2, [pc, #420]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	6213      	str	r3, [r2, #32]
 800533a:	4b67      	ldr	r3, [pc, #412]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	4a66      	ldr	r2, [pc, #408]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	6213      	str	r3, [r2, #32]
 8005346:	e01c      	b.n	8005382 <HAL_RCC_OscConfig+0x36e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b05      	cmp	r3, #5
 800534e:	d10c      	bne.n	800536a <HAL_RCC_OscConfig+0x356>
 8005350:	4b61      	ldr	r3, [pc, #388]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	4a60      	ldr	r2, [pc, #384]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005356:	f043 0304 	orr.w	r3, r3, #4
 800535a:	6213      	str	r3, [r2, #32]
 800535c:	4b5e      	ldr	r3, [pc, #376]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	4a5d      	ldr	r2, [pc, #372]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	6213      	str	r3, [r2, #32]
 8005368:	e00b      	b.n	8005382 <HAL_RCC_OscConfig+0x36e>
 800536a:	4b5b      	ldr	r3, [pc, #364]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4a5a      	ldr	r2, [pc, #360]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	6213      	str	r3, [r2, #32]
 8005376:	4b58      	ldr	r3, [pc, #352]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	4a57      	ldr	r2, [pc, #348]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 800537c:	f023 0304 	bic.w	r3, r3, #4
 8005380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d015      	beq.n	80053b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800538a:	f7fe f889 	bl	80034a0 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005390:	e00a      	b.n	80053a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005392:	f7fe f885 	bl	80034a0 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e0b1      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a8:	4b4b      	ldr	r3, [pc, #300]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0ee      	beq.n	8005392 <HAL_RCC_OscConfig+0x37e>
 80053b4:	e014      	b.n	80053e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053b6:	f7fe f873 	bl	80034a0 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053bc:	e00a      	b.n	80053d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053be:	f7fe f86f 	bl	80034a0 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e09b      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d4:	4b40      	ldr	r3, [pc, #256]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1ee      	bne.n	80053be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d105      	bne.n	80053f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e6:	4b3c      	ldr	r3, [pc, #240]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	4a3b      	ldr	r2, [pc, #236]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 80053ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 8087 	beq.w	800550a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053fc:	4b36      	ldr	r3, [pc, #216]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 030c 	and.w	r3, r3, #12
 8005404:	2b08      	cmp	r3, #8
 8005406:	d061      	beq.n	80054cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d146      	bne.n	800549e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005410:	4b33      	ldr	r3, [pc, #204]	; (80054e0 <HAL_RCC_OscConfig+0x4cc>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005416:	f7fe f843 	bl	80034a0 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800541e:	f7fe f83f 	bl	80034a0 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e06d      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005430:	4b29      	ldr	r3, [pc, #164]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f0      	bne.n	800541e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d108      	bne.n	8005458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	4921      	ldr	r1, [pc, #132]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005454:	4313      	orrs	r3, r2
 8005456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005458:	4b1f      	ldr	r3, [pc, #124]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a19      	ldr	r1, [r3, #32]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	430b      	orrs	r3, r1
 800546a:	491b      	ldr	r1, [pc, #108]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 800546c:	4313      	orrs	r3, r2
 800546e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005470:	4b1b      	ldr	r3, [pc, #108]	; (80054e0 <HAL_RCC_OscConfig+0x4cc>)
 8005472:	2201      	movs	r2, #1
 8005474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005476:	f7fe f813 	bl	80034a0 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547e:	f7fe f80f 	bl	80034a0 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e03d      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0x46a>
 800549c:	e035      	b.n	800550a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549e:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <HAL_RCC_OscConfig+0x4cc>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a4:	f7fd fffc 	bl	80034a0 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fd fff8 	bl	80034a0 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e026      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_RCC_OscConfig+0x4c4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f0      	bne.n	80054ac <HAL_RCC_OscConfig+0x498>
 80054ca:	e01e      	b.n	800550a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d107      	bne.n	80054e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e019      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
 80054d8:	40021000 	.word	0x40021000
 80054dc:	40007000 	.word	0x40007000
 80054e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_OscConfig+0x500>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d106      	bne.n	8005506 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005502:	429a      	cmp	r2, r3
 8005504:	d001      	beq.n	800550a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000

08005518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e0d0      	b.n	80056ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800552c:	4b6a      	ldr	r3, [pc, #424]	; (80056d8 <HAL_RCC_ClockConfig+0x1c0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d910      	bls.n	800555c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553a:	4b67      	ldr	r3, [pc, #412]	; (80056d8 <HAL_RCC_ClockConfig+0x1c0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 0207 	bic.w	r2, r3, #7
 8005542:	4965      	ldr	r1, [pc, #404]	; (80056d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	4313      	orrs	r3, r2
 8005548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	4b63      	ldr	r3, [pc, #396]	; (80056d8 <HAL_RCC_ClockConfig+0x1c0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0b8      	b.n	80056ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d020      	beq.n	80055aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005574:	4b59      	ldr	r3, [pc, #356]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	4a58      	ldr	r2, [pc, #352]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 800557a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800557e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800558c:	4b53      	ldr	r3, [pc, #332]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a52      	ldr	r2, [pc, #328]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 8005592:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005596:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005598:	4b50      	ldr	r3, [pc, #320]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	494d      	ldr	r1, [pc, #308]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d040      	beq.n	8005638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d107      	bne.n	80055ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055be:	4b47      	ldr	r3, [pc, #284]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d115      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e07f      	b.n	80056ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d107      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055d6:	4b41      	ldr	r3, [pc, #260]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d109      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e073      	b.n	80056ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e6:	4b3d      	ldr	r3, [pc, #244]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e06b      	b.n	80056ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055f6:	4b39      	ldr	r3, [pc, #228]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f023 0203 	bic.w	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	4936      	ldr	r1, [pc, #216]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 8005604:	4313      	orrs	r3, r2
 8005606:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005608:	f7fd ff4a 	bl	80034a0 <HAL_GetTick>
 800560c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560e:	e00a      	b.n	8005626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005610:	f7fd ff46 	bl	80034a0 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f241 3288 	movw	r2, #5000	; 0x1388
 800561e:	4293      	cmp	r3, r2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e053      	b.n	80056ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005626:	4b2d      	ldr	r3, [pc, #180]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 020c 	and.w	r2, r3, #12
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	429a      	cmp	r2, r3
 8005636:	d1eb      	bne.n	8005610 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005638:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <HAL_RCC_ClockConfig+0x1c0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d210      	bcs.n	8005668 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005646:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 0207 	bic.w	r2, r3, #7
 800564e:	4922      	ldr	r1, [pc, #136]	; (80056d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	4313      	orrs	r3, r2
 8005654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005656:	4b20      	ldr	r3, [pc, #128]	; (80056d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d001      	beq.n	8005668 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e032      	b.n	80056ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005674:	4b19      	ldr	r3, [pc, #100]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	4916      	ldr	r1, [pc, #88]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 8005682:	4313      	orrs	r3, r2
 8005684:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	490e      	ldr	r1, [pc, #56]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056a6:	f000 f821 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 80056aa:	4602      	mov	r2, r0
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_RCC_ClockConfig+0x1c4>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	490a      	ldr	r1, [pc, #40]	; (80056e0 <HAL_RCC_ClockConfig+0x1c8>)
 80056b8:	5ccb      	ldrb	r3, [r1, r3]
 80056ba:	fa22 f303 	lsr.w	r3, r2, r3
 80056be:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <HAL_RCC_ClockConfig+0x1cc>)
 80056c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056c2:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <HAL_RCC_ClockConfig+0x1d0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fd fea8 	bl	800341c <HAL_InitTick>

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40022000 	.word	0x40022000
 80056dc:	40021000 	.word	0x40021000
 80056e0:	080091c0 	.word	0x080091c0
 80056e4:	20000000 	.word	0x20000000
 80056e8:	20000004 	.word	0x20000004

080056ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	2300      	movs	r3, #0
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005706:	4b1e      	ldr	r3, [pc, #120]	; (8005780 <HAL_RCC_GetSysClockFreq+0x94>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b04      	cmp	r3, #4
 8005714:	d002      	beq.n	800571c <HAL_RCC_GetSysClockFreq+0x30>
 8005716:	2b08      	cmp	r3, #8
 8005718:	d003      	beq.n	8005722 <HAL_RCC_GetSysClockFreq+0x36>
 800571a:	e027      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800571c:	4b19      	ldr	r3, [pc, #100]	; (8005784 <HAL_RCC_GetSysClockFreq+0x98>)
 800571e:	613b      	str	r3, [r7, #16]
      break;
 8005720:	e027      	b.n	8005772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	0c9b      	lsrs	r3, r3, #18
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800572c:	5cd3      	ldrb	r3, [r2, r3]
 800572e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d010      	beq.n	800575c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <HAL_RCC_GetSysClockFreq+0x94>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	0c5b      	lsrs	r3, r3, #17
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	4a11      	ldr	r2, [pc, #68]	; (800578c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005746:	5cd3      	ldrb	r3, [r2, r3]
 8005748:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a0d      	ldr	r2, [pc, #52]	; (8005784 <HAL_RCC_GetSysClockFreq+0x98>)
 800574e:	fb03 f202 	mul.w	r2, r3, r2
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	fbb2 f3f3 	udiv	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e004      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a0c      	ldr	r2, [pc, #48]	; (8005790 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005760:	fb02 f303 	mul.w	r3, r2, r3
 8005764:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	613b      	str	r3, [r7, #16]
      break;
 800576a:	e002      	b.n	8005772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800576c:	4b05      	ldr	r3, [pc, #20]	; (8005784 <HAL_RCC_GetSysClockFreq+0x98>)
 800576e:	613b      	str	r3, [r7, #16]
      break;
 8005770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005772:	693b      	ldr	r3, [r7, #16]
}
 8005774:	4618      	mov	r0, r3
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40021000 	.word	0x40021000
 8005784:	007a1200 	.word	0x007a1200
 8005788:	080091d8 	.word	0x080091d8
 800578c:	080091e8 	.word	0x080091e8
 8005790:	003d0900 	.word	0x003d0900

08005794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005798:	4b02      	ldr	r3, [pc, #8]	; (80057a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800579a:	681b      	ldr	r3, [r3, #0]
}
 800579c:	4618      	mov	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr
 80057a4:	20000000 	.word	0x20000000

080057a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057ac:	f7ff fff2 	bl	8005794 <HAL_RCC_GetHCLKFreq>
 80057b0:	4602      	mov	r2, r0
 80057b2:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	4903      	ldr	r1, [pc, #12]	; (80057cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057be:	5ccb      	ldrb	r3, [r1, r3]
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40021000 	.word	0x40021000
 80057cc:	080091d0 	.word	0x080091d0

080057d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057d4:	f7ff ffde 	bl	8005794 <HAL_RCC_GetHCLKFreq>
 80057d8:	4602      	mov	r2, r0
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	0adb      	lsrs	r3, r3, #11
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	4903      	ldr	r1, [pc, #12]	; (80057f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057e6:	5ccb      	ldrb	r3, [r1, r3]
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000
 80057f4:	080091d0 	.word	0x080091d0

080057f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005800:	4b0a      	ldr	r3, [pc, #40]	; (800582c <RCC_Delay+0x34>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <RCC_Delay+0x38>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	0a5b      	lsrs	r3, r3, #9
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005814:	bf00      	nop
  }
  while (Delay --);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1e5a      	subs	r2, r3, #1
 800581a:	60fa      	str	r2, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f9      	bne.n	8005814 <RCC_Delay+0x1c>
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr
 800582c:	20000000 	.word	0x20000000
 8005830:	10624dd3 	.word	0x10624dd3

08005834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e042      	b.n	80058cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fd fd42 	bl	80032e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2224      	movs	r2, #36	; 0x24
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f91d 	bl	8005ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800588c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800589c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	; 0x28
 80058d8:	af02      	add	r7, sp, #8
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d16d      	bne.n	80059d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_UART_Transmit+0x2c>
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e066      	b.n	80059d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2221      	movs	r2, #33	; 0x21
 800590e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005912:	f7fd fdc5 	bl	80034a0 <HAL_GetTick>
 8005916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	88fa      	ldrh	r2, [r7, #6]
 800591c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	88fa      	ldrh	r2, [r7, #6]
 8005922:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592c:	d108      	bne.n	8005940 <HAL_UART_Transmit+0x6c>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d104      	bne.n	8005940 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005936:	2300      	movs	r3, #0
 8005938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	e003      	b.n	8005948 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005944:	2300      	movs	r3, #0
 8005946:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005948:	e02a      	b.n	80059a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2200      	movs	r2, #0
 8005952:	2180      	movs	r1, #128	; 0x80
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f840 	bl	80059da <UART_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e036      	b.n	80059d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10b      	bne.n	8005982 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005978:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	3302      	adds	r3, #2
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	e007      	b.n	8005992 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	781a      	ldrb	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	3301      	adds	r3, #1
 8005990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1cf      	bne.n	800594a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	2140      	movs	r1, #64	; 0x40
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f810 	bl	80059da <UART_WaitOnFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e006      	b.n	80059d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e000      	b.n	80059d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b090      	sub	sp, #64	; 0x40
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	603b      	str	r3, [r7, #0]
 80059e6:	4613      	mov	r3, r2
 80059e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ea:	e050      	b.n	8005a8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f2:	d04c      	beq.n	8005a8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x30>
 80059fa:	f7fd fd51 	bl	80034a0 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d241      	bcs.n	8005a8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a2a:	637a      	str	r2, [r7, #52]	; 0x34
 8005a2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e5      	bne.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3314      	adds	r3, #20
 8005a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a5e:	623a      	str	r2, [r7, #32]
 8005a60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	69f9      	ldr	r1, [r7, #28]
 8005a64:	6a3a      	ldr	r2, [r7, #32]
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e5      	bne.n	8005a3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e00f      	b.n	8005aae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4013      	ands	r3, r2
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d09f      	beq.n	80059ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3740      	adds	r7, #64	; 0x40
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005af2:	f023 030c 	bic.w	r3, r3, #12
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	430b      	orrs	r3, r1
 8005afe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2c      	ldr	r2, [pc, #176]	; (8005bcc <UART_SetConfig+0x114>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d103      	bne.n	8005b28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b20:	f7ff fe56 	bl	80057d0 <HAL_RCC_GetPCLK2Freq>
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	e002      	b.n	8005b2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b28:	f7ff fe3e 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 8005b2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	009a      	lsls	r2, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b44:	4a22      	ldr	r2, [pc, #136]	; (8005bd0 <UART_SetConfig+0x118>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	0119      	lsls	r1, r3, #4
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009a      	lsls	r2, r3, #2
 8005b58:	441a      	add	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b64:	4b1a      	ldr	r3, [pc, #104]	; (8005bd0 <UART_SetConfig+0x118>)
 8005b66:	fba3 0302 	umull	r0, r3, r3, r2
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	2064      	movs	r0, #100	; 0x64
 8005b6e:	fb00 f303 	mul.w	r3, r0, r3
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	3332      	adds	r3, #50	; 0x32
 8005b78:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <UART_SetConfig+0x118>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b84:	4419      	add	r1, r3
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009a      	lsls	r2, r3, #2
 8005b90:	441a      	add	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <UART_SetConfig+0x118>)
 8005b9e:	fba3 0302 	umull	r0, r3, r3, r2
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	2064      	movs	r0, #100	; 0x64
 8005ba6:	fb00 f303 	mul.w	r3, r0, r3
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	3332      	adds	r3, #50	; 0x32
 8005bb0:	4a07      	ldr	r2, [pc, #28]	; (8005bd0 <UART_SetConfig+0x118>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	f003 020f 	and.w	r2, r3, #15
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40013800 	.word	0x40013800
 8005bd0:	51eb851f 	.word	0x51eb851f

08005bd4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8005bda:	f000 fa27 	bl	800602c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8005bde:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005be2:	2201      	movs	r2, #1
 8005be4:	2178      	movs	r1, #120	; 0x78
 8005be6:	485b      	ldr	r0, [pc, #364]	; (8005d54 <SSD1306_Init+0x180>)
 8005be8:	f7fe fcca 	bl	8004580 <HAL_I2C_IsDeviceReady>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e0a9      	b.n	8005d4a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8005bf6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8005bfa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005bfc:	e002      	b.n	8005c04 <SSD1306_Init+0x30>
		p--;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f9      	bne.n	8005bfe <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8005c0a:	22ae      	movs	r2, #174	; 0xae
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	2078      	movs	r0, #120	; 0x78
 8005c10:	f000 fa86 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8005c14:	2220      	movs	r2, #32
 8005c16:	2100      	movs	r1, #0
 8005c18:	2078      	movs	r0, #120	; 0x78
 8005c1a:	f000 fa81 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8005c1e:	2210      	movs	r2, #16
 8005c20:	2100      	movs	r1, #0
 8005c22:	2078      	movs	r0, #120	; 0x78
 8005c24:	f000 fa7c 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005c28:	22b0      	movs	r2, #176	; 0xb0
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	2078      	movs	r0, #120	; 0x78
 8005c2e:	f000 fa77 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8005c32:	22c8      	movs	r2, #200	; 0xc8
 8005c34:	2100      	movs	r1, #0
 8005c36:	2078      	movs	r0, #120	; 0x78
 8005c38:	f000 fa72 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2100      	movs	r1, #0
 8005c40:	2078      	movs	r0, #120	; 0x78
 8005c42:	f000 fa6d 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8005c46:	2210      	movs	r2, #16
 8005c48:	2100      	movs	r1, #0
 8005c4a:	2078      	movs	r0, #120	; 0x78
 8005c4c:	f000 fa68 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8005c50:	2240      	movs	r2, #64	; 0x40
 8005c52:	2100      	movs	r1, #0
 8005c54:	2078      	movs	r0, #120	; 0x78
 8005c56:	f000 fa63 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8005c5a:	2281      	movs	r2, #129	; 0x81
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	2078      	movs	r0, #120	; 0x78
 8005c60:	f000 fa5e 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8005c64:	22ff      	movs	r2, #255	; 0xff
 8005c66:	2100      	movs	r1, #0
 8005c68:	2078      	movs	r0, #120	; 0x78
 8005c6a:	f000 fa59 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8005c6e:	22a1      	movs	r2, #161	; 0xa1
 8005c70:	2100      	movs	r1, #0
 8005c72:	2078      	movs	r0, #120	; 0x78
 8005c74:	f000 fa54 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8005c78:	22a6      	movs	r2, #166	; 0xa6
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	2078      	movs	r0, #120	; 0x78
 8005c7e:	f000 fa4f 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8005c82:	22a8      	movs	r2, #168	; 0xa8
 8005c84:	2100      	movs	r1, #0
 8005c86:	2078      	movs	r0, #120	; 0x78
 8005c88:	f000 fa4a 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8005c8c:	223f      	movs	r2, #63	; 0x3f
 8005c8e:	2100      	movs	r1, #0
 8005c90:	2078      	movs	r0, #120	; 0x78
 8005c92:	f000 fa45 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005c96:	22a4      	movs	r2, #164	; 0xa4
 8005c98:	2100      	movs	r1, #0
 8005c9a:	2078      	movs	r0, #120	; 0x78
 8005c9c:	f000 fa40 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8005ca0:	22d3      	movs	r2, #211	; 0xd3
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	2078      	movs	r0, #120	; 0x78
 8005ca6:	f000 fa3b 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8005caa:	2200      	movs	r2, #0
 8005cac:	2100      	movs	r1, #0
 8005cae:	2078      	movs	r0, #120	; 0x78
 8005cb0:	f000 fa36 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8005cb4:	22d5      	movs	r2, #213	; 0xd5
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	2078      	movs	r0, #120	; 0x78
 8005cba:	f000 fa31 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8005cbe:	22f0      	movs	r2, #240	; 0xf0
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	2078      	movs	r0, #120	; 0x78
 8005cc4:	f000 fa2c 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8005cc8:	22d9      	movs	r2, #217	; 0xd9
 8005cca:	2100      	movs	r1, #0
 8005ccc:	2078      	movs	r0, #120	; 0x78
 8005cce:	f000 fa27 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8005cd2:	2222      	movs	r2, #34	; 0x22
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	2078      	movs	r0, #120	; 0x78
 8005cd8:	f000 fa22 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8005cdc:	22da      	movs	r2, #218	; 0xda
 8005cde:	2100      	movs	r1, #0
 8005ce0:	2078      	movs	r0, #120	; 0x78
 8005ce2:	f000 fa1d 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8005ce6:	2212      	movs	r2, #18
 8005ce8:	2100      	movs	r1, #0
 8005cea:	2078      	movs	r0, #120	; 0x78
 8005cec:	f000 fa18 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8005cf0:	22db      	movs	r2, #219	; 0xdb
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	2078      	movs	r0, #120	; 0x78
 8005cf6:	f000 fa13 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	2078      	movs	r0, #120	; 0x78
 8005d00:	f000 fa0e 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8005d04:	228d      	movs	r2, #141	; 0x8d
 8005d06:	2100      	movs	r1, #0
 8005d08:	2078      	movs	r0, #120	; 0x78
 8005d0a:	f000 fa09 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8005d0e:	2214      	movs	r2, #20
 8005d10:	2100      	movs	r1, #0
 8005d12:	2078      	movs	r0, #120	; 0x78
 8005d14:	f000 fa04 	bl	8006120 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8005d18:	22af      	movs	r2, #175	; 0xaf
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	2078      	movs	r0, #120	; 0x78
 8005d1e:	f000 f9ff 	bl	8006120 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8005d22:	222e      	movs	r2, #46	; 0x2e
 8005d24:	2100      	movs	r1, #0
 8005d26:	2078      	movs	r0, #120	; 0x78
 8005d28:	f000 f9fa 	bl	8006120 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	f000 f843 	bl	8005db8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8005d32:	f000 f813 	bl	8005d5c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8005d36:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <SSD1306_Init+0x184>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <SSD1306_Init+0x184>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <SSD1306_Init+0x184>)
 8005d44:	2201      	movs	r2, #1
 8005d46:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8005d48:	2301      	movs	r3, #1
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000254 	.word	0x20000254
 8005d58:	200007a8 	.word	0x200007a8

08005d5c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8005d62:	2300      	movs	r3, #0
 8005d64:	71fb      	strb	r3, [r7, #7]
 8005d66:	e01d      	b.n	8005da4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	3b50      	subs	r3, #80	; 0x50
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	2100      	movs	r1, #0
 8005d72:	2078      	movs	r0, #120	; 0x78
 8005d74:	f000 f9d4 	bl	8006120 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	2078      	movs	r0, #120	; 0x78
 8005d7e:	f000 f9cf 	bl	8006120 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8005d82:	2210      	movs	r2, #16
 8005d84:	2100      	movs	r1, #0
 8005d86:	2078      	movs	r0, #120	; 0x78
 8005d88:	f000 f9ca 	bl	8006120 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	01db      	lsls	r3, r3, #7
 8005d90:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <SSD1306_UpdateScreen+0x58>)
 8005d92:	441a      	add	r2, r3
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	2140      	movs	r1, #64	; 0x40
 8005d98:	2078      	movs	r0, #120	; 0x78
 8005d9a:	f000 f95b 	bl	8006054 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	3301      	adds	r3, #1
 8005da2:	71fb      	strb	r3, [r7, #7]
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	2b07      	cmp	r3, #7
 8005da8:	d9de      	bls.n	8005d68 <SSD1306_UpdateScreen+0xc>
	}
}
 8005daa:	bf00      	nop
 8005dac:	bf00      	nop
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	200003a8 	.word	0x200003a8

08005db8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <SSD1306_Fill+0x14>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e000      	b.n	8005dce <SSD1306_Fill+0x16>
 8005dcc:	23ff      	movs	r3, #255	; 0xff
 8005dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4803      	ldr	r0, [pc, #12]	; (8005de4 <SSD1306_Fill+0x2c>)
 8005dd6:	f001 f849 	bl	8006e6c <memset>
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	200003a8 	.word	0x200003a8

08005de8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	80fb      	strh	r3, [r7, #6]
 8005df2:	460b      	mov	r3, r1
 8005df4:	80bb      	strh	r3, [r7, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	70fb      	strb	r3, [r7, #3]
	if (
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8005dfe:	d848      	bhi.n	8005e92 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8005e00:	88bb      	ldrh	r3, [r7, #4]
 8005e02:	2b3f      	cmp	r3, #63	; 0x3f
 8005e04:	d845      	bhi.n	8005e92 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8005e06:	4b25      	ldr	r3, [pc, #148]	; (8005e9c <SSD1306_DrawPixel+0xb4>)
 8005e08:	791b      	ldrb	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d006      	beq.n	8005e1c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	bf0c      	ite	eq
 8005e14:	2301      	moveq	r3, #1
 8005e16:	2300      	movne	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d11a      	bne.n	8005e58 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	88bb      	ldrh	r3, [r7, #4]
 8005e26:	08db      	lsrs	r3, r3, #3
 8005e28:	b298      	uxth	r0, r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	01db      	lsls	r3, r3, #7
 8005e2e:	4413      	add	r3, r2
 8005e30:	4a1b      	ldr	r2, [pc, #108]	; (8005ea0 <SSD1306_DrawPixel+0xb8>)
 8005e32:	5cd3      	ldrb	r3, [r2, r3]
 8005e34:	b25a      	sxtb	r2, r3
 8005e36:	88bb      	ldrh	r3, [r7, #4]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e42:	b25b      	sxtb	r3, r3
 8005e44:	4313      	orrs	r3, r2
 8005e46:	b259      	sxtb	r1, r3
 8005e48:	88fa      	ldrh	r2, [r7, #6]
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	01db      	lsls	r3, r3, #7
 8005e4e:	4413      	add	r3, r2
 8005e50:	b2c9      	uxtb	r1, r1
 8005e52:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <SSD1306_DrawPixel+0xb8>)
 8005e54:	54d1      	strb	r1, [r2, r3]
 8005e56:	e01d      	b.n	8005e94 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	88bb      	ldrh	r3, [r7, #4]
 8005e5c:	08db      	lsrs	r3, r3, #3
 8005e5e:	b298      	uxth	r0, r3
 8005e60:	4603      	mov	r3, r0
 8005e62:	01db      	lsls	r3, r3, #7
 8005e64:	4413      	add	r3, r2
 8005e66:	4a0e      	ldr	r2, [pc, #56]	; (8005ea0 <SSD1306_DrawPixel+0xb8>)
 8005e68:	5cd3      	ldrb	r3, [r2, r3]
 8005e6a:	b25a      	sxtb	r2, r3
 8005e6c:	88bb      	ldrh	r3, [r7, #4]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	2101      	movs	r1, #1
 8005e74:	fa01 f303 	lsl.w	r3, r1, r3
 8005e78:	b25b      	sxtb	r3, r3
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	b25b      	sxtb	r3, r3
 8005e7e:	4013      	ands	r3, r2
 8005e80:	b259      	sxtb	r1, r3
 8005e82:	88fa      	ldrh	r2, [r7, #6]
 8005e84:	4603      	mov	r3, r0
 8005e86:	01db      	lsls	r3, r3, #7
 8005e88:	4413      	add	r3, r2
 8005e8a:	b2c9      	uxtb	r1, r1
 8005e8c:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <SSD1306_DrawPixel+0xb8>)
 8005e8e:	54d1      	strb	r1, [r2, r3]
 8005e90:	e000      	b.n	8005e94 <SSD1306_DrawPixel+0xac>
		return;
 8005e92:	bf00      	nop
	}
}
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr
 8005e9c:	200007a8 	.word	0x200007a8
 8005ea0:	200003a8 	.word	0x200003a8

08005ea4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	460a      	mov	r2, r1
 8005eae:	80fb      	strh	r3, [r7, #6]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8005eb4:	4a05      	ldr	r2, [pc, #20]	; (8005ecc <SSD1306_GotoXY+0x28>)
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8005eba:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <SSD1306_GotoXY+0x28>)
 8005ebc:	88bb      	ldrh	r3, [r7, #4]
 8005ebe:	8053      	strh	r3, [r2, #2]
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	200007a8 	.word	0x200007a8

08005ed0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	6039      	str	r1, [r7, #0]
 8005eda:	71fb      	strb	r3, [r7, #7]
 8005edc:	4613      	mov	r3, r2
 8005ede:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005ee0:	4b3a      	ldr	r3, [pc, #232]	; (8005fcc <SSD1306_Putc+0xfc>)
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	4413      	add	r3, r2
	if (
 8005eec:	2b7f      	cmp	r3, #127	; 0x7f
 8005eee:	dc07      	bgt.n	8005f00 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8005ef0:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <SSD1306_Putc+0xfc>)
 8005ef2:	885b      	ldrh	r3, [r3, #2]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005efc:	2b3f      	cmp	r3, #63	; 0x3f
 8005efe:	dd01      	ble.n	8005f04 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	e05e      	b.n	8005fc2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	e04b      	b.n	8005fa2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	3b20      	subs	r3, #32
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	7849      	ldrb	r1, [r1, #1]
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	440b      	add	r3, r1
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8005f28:	2300      	movs	r3, #0
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	e030      	b.n	8005f90 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d010      	beq.n	8005f60 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8005f3e:	4b23      	ldr	r3, [pc, #140]	; (8005fcc <SSD1306_Putc+0xfc>)
 8005f40:	881a      	ldrh	r2, [r3, #0]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	b298      	uxth	r0, r3
 8005f4a:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <SSD1306_Putc+0xfc>)
 8005f4c:	885a      	ldrh	r2, [r3, #2]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	4413      	add	r3, r2
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	79ba      	ldrb	r2, [r7, #6]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	f7ff ff45 	bl	8005de8 <SSD1306_DrawPixel>
 8005f5e:	e014      	b.n	8005f8a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8005f60:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <SSD1306_Putc+0xfc>)
 8005f62:	881a      	ldrh	r2, [r3, #0]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	4413      	add	r3, r2
 8005f6a:	b298      	uxth	r0, r3
 8005f6c:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <SSD1306_Putc+0xfc>)
 8005f6e:	885a      	ldrh	r2, [r3, #2]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	b299      	uxth	r1, r3
 8005f78:	79bb      	ldrb	r3, [r7, #6]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2301      	moveq	r3, #1
 8005f80:	2300      	movne	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	f7ff ff2f 	bl	8005de8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	613b      	str	r3, [r7, #16]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d3c8      	bcc.n	8005f2e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d3ad      	bcc.n	8005f0a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8005fae:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <SSD1306_Putc+0xfc>)
 8005fb0:	881a      	ldrh	r2, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	4b03      	ldr	r3, [pc, #12]	; (8005fcc <SSD1306_Putc+0xfc>)
 8005fbe:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	200007a8 	.word	0x200007a8

08005fd0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8005fde:	e012      	b.n	8006006 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	79fa      	ldrb	r2, [r7, #7]
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff ff71 	bl	8005ed0 <SSD1306_Putc>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d002      	beq.n	8006000 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	e008      	b.n	8006012 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3301      	adds	r3, #1
 8006004:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e8      	bne.n	8005fe0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	781b      	ldrb	r3, [r3, #0]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800601e:	2000      	movs	r0, #0
 8006020:	f7ff feca 	bl	8005db8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8006024:	f7ff fe9a 	bl	8005d5c <SSD1306_UpdateScreen>
}
 8006028:	bf00      	nop
 800602a:	bd80      	pop	{r7, pc}

0800602c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8006032:	4b07      	ldr	r3, [pc, #28]	; (8006050 <ssd1306_I2C_Init+0x24>)
 8006034:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006036:	e002      	b.n	800603e <ssd1306_I2C_Init+0x12>
		p--;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3b01      	subs	r3, #1
 800603c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f9      	bne.n	8006038 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr
 8006050:	0003d090 	.word	0x0003d090

08006054 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8006054:	b590      	push	{r4, r7, lr}
 8006056:	b0c7      	sub	sp, #284	; 0x11c
 8006058:	af02      	add	r7, sp, #8
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8006062:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8006066:	600a      	str	r2, [r1, #0]
 8006068:	4619      	mov	r1, r3
 800606a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800606e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8006072:	4622      	mov	r2, r4
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800607a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800607e:	4602      	mov	r2, r0
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006086:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800608a:	460a      	mov	r2, r1
 800608c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800608e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006096:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800609a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800609e:	7812      	ldrb	r2, [r2, #0]
 80060a0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80060a2:	2300      	movs	r3, #0
 80060a4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80060a8:	e015      	b.n	80060d6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80060aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80060ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80060b2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	441a      	add	r2, r3
 80060ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80060be:	3301      	adds	r3, #1
 80060c0:	7811      	ldrb	r1, [r2, #0]
 80060c2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80060c6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80060ca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80060cc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80060d0:	3301      	adds	r3, #1
 80060d2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80060d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80060e0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80060e4:	8812      	ldrh	r2, [r2, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d8df      	bhi.n	80060aa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 80060ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060ee:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	b299      	uxth	r1, r3
 80060f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	3301      	adds	r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	f107 020c 	add.w	r2, r7, #12
 8006108:	200a      	movs	r0, #10
 800610a:	9000      	str	r0, [sp, #0]
 800610c:	4803      	ldr	r0, [pc, #12]	; (800611c <ssd1306_I2C_WriteMulti+0xc8>)
 800610e:	f7fd fdd3 	bl	8003cb8 <HAL_I2C_Master_Transmit>
}
 8006112:	bf00      	nop
 8006114:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8006118:	46bd      	mov	sp, r7
 800611a:	bd90      	pop	{r4, r7, pc}
 800611c:	20000254 	.word	0x20000254

08006120 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af02      	add	r7, sp, #8
 8006126:	4603      	mov	r3, r0
 8006128:	71fb      	strb	r3, [r7, #7]
 800612a:	460b      	mov	r3, r1
 800612c:	71bb      	strb	r3, [r7, #6]
 800612e:	4613      	mov	r3, r2
 8006130:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8006132:	79bb      	ldrb	r3, [r7, #6]
 8006134:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8006136:	797b      	ldrb	r3, [r7, #5]
 8006138:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	b299      	uxth	r1, r3
 800613e:	f107 020c 	add.w	r2, r7, #12
 8006142:	230a      	movs	r3, #10
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	2302      	movs	r3, #2
 8006148:	4803      	ldr	r0, [pc, #12]	; (8006158 <ssd1306_I2C_Write+0x38>)
 800614a:	f7fd fdb5 	bl	8003cb8 <HAL_I2C_Master_Transmit>
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000254 	.word	0x20000254

0800615c <__cvt>:
 800615c:	2b00      	cmp	r3, #0
 800615e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006162:	461f      	mov	r7, r3
 8006164:	bfbb      	ittet	lt
 8006166:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800616a:	461f      	movlt	r7, r3
 800616c:	2300      	movge	r3, #0
 800616e:	232d      	movlt	r3, #45	; 0x2d
 8006170:	b088      	sub	sp, #32
 8006172:	4614      	mov	r4, r2
 8006174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006176:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006178:	7013      	strb	r3, [r2, #0]
 800617a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800617c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006180:	f023 0820 	bic.w	r8, r3, #32
 8006184:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006188:	d005      	beq.n	8006196 <__cvt+0x3a>
 800618a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800618e:	d100      	bne.n	8006192 <__cvt+0x36>
 8006190:	3501      	adds	r5, #1
 8006192:	2302      	movs	r3, #2
 8006194:	e000      	b.n	8006198 <__cvt+0x3c>
 8006196:	2303      	movs	r3, #3
 8006198:	aa07      	add	r2, sp, #28
 800619a:	9204      	str	r2, [sp, #16]
 800619c:	aa06      	add	r2, sp, #24
 800619e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80061a2:	e9cd 3500 	strd	r3, r5, [sp]
 80061a6:	4622      	mov	r2, r4
 80061a8:	463b      	mov	r3, r7
 80061aa:	f000 ff85 	bl	80070b8 <_dtoa_r>
 80061ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061b2:	4606      	mov	r6, r0
 80061b4:	d102      	bne.n	80061bc <__cvt+0x60>
 80061b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061b8:	07db      	lsls	r3, r3, #31
 80061ba:	d522      	bpl.n	8006202 <__cvt+0xa6>
 80061bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061c0:	eb06 0905 	add.w	r9, r6, r5
 80061c4:	d110      	bne.n	80061e8 <__cvt+0x8c>
 80061c6:	7833      	ldrb	r3, [r6, #0]
 80061c8:	2b30      	cmp	r3, #48	; 0x30
 80061ca:	d10a      	bne.n	80061e2 <__cvt+0x86>
 80061cc:	2200      	movs	r2, #0
 80061ce:	2300      	movs	r3, #0
 80061d0:	4620      	mov	r0, r4
 80061d2:	4639      	mov	r1, r7
 80061d4:	f7fa fbe8 	bl	80009a8 <__aeabi_dcmpeq>
 80061d8:	b918      	cbnz	r0, 80061e2 <__cvt+0x86>
 80061da:	f1c5 0501 	rsb	r5, r5, #1
 80061de:	f8ca 5000 	str.w	r5, [sl]
 80061e2:	f8da 3000 	ldr.w	r3, [sl]
 80061e6:	4499      	add	r9, r3
 80061e8:	2200      	movs	r2, #0
 80061ea:	2300      	movs	r3, #0
 80061ec:	4620      	mov	r0, r4
 80061ee:	4639      	mov	r1, r7
 80061f0:	f7fa fbda 	bl	80009a8 <__aeabi_dcmpeq>
 80061f4:	b108      	cbz	r0, 80061fa <__cvt+0x9e>
 80061f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80061fa:	2230      	movs	r2, #48	; 0x30
 80061fc:	9b07      	ldr	r3, [sp, #28]
 80061fe:	454b      	cmp	r3, r9
 8006200:	d307      	bcc.n	8006212 <__cvt+0xb6>
 8006202:	4630      	mov	r0, r6
 8006204:	9b07      	ldr	r3, [sp, #28]
 8006206:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006208:	1b9b      	subs	r3, r3, r6
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	b008      	add	sp, #32
 800620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006212:	1c59      	adds	r1, r3, #1
 8006214:	9107      	str	r1, [sp, #28]
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	e7f0      	b.n	80061fc <__cvt+0xa0>

0800621a <__exponent>:
 800621a:	4603      	mov	r3, r0
 800621c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800621e:	2900      	cmp	r1, #0
 8006220:	f803 2b02 	strb.w	r2, [r3], #2
 8006224:	bfb6      	itet	lt
 8006226:	222d      	movlt	r2, #45	; 0x2d
 8006228:	222b      	movge	r2, #43	; 0x2b
 800622a:	4249      	neglt	r1, r1
 800622c:	2909      	cmp	r1, #9
 800622e:	7042      	strb	r2, [r0, #1]
 8006230:	dd2a      	ble.n	8006288 <__exponent+0x6e>
 8006232:	f10d 0207 	add.w	r2, sp, #7
 8006236:	4617      	mov	r7, r2
 8006238:	260a      	movs	r6, #10
 800623a:	fb91 f5f6 	sdiv	r5, r1, r6
 800623e:	4694      	mov	ip, r2
 8006240:	fb06 1415 	mls	r4, r6, r5, r1
 8006244:	3430      	adds	r4, #48	; 0x30
 8006246:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800624a:	460c      	mov	r4, r1
 800624c:	2c63      	cmp	r4, #99	; 0x63
 800624e:	4629      	mov	r1, r5
 8006250:	f102 32ff 	add.w	r2, r2, #4294967295
 8006254:	dcf1      	bgt.n	800623a <__exponent+0x20>
 8006256:	3130      	adds	r1, #48	; 0x30
 8006258:	f1ac 0402 	sub.w	r4, ip, #2
 800625c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006260:	4622      	mov	r2, r4
 8006262:	1c41      	adds	r1, r0, #1
 8006264:	42ba      	cmp	r2, r7
 8006266:	d30a      	bcc.n	800627e <__exponent+0x64>
 8006268:	f10d 0209 	add.w	r2, sp, #9
 800626c:	eba2 020c 	sub.w	r2, r2, ip
 8006270:	42bc      	cmp	r4, r7
 8006272:	bf88      	it	hi
 8006274:	2200      	movhi	r2, #0
 8006276:	4413      	add	r3, r2
 8006278:	1a18      	subs	r0, r3, r0
 800627a:	b003      	add	sp, #12
 800627c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006282:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006286:	e7ed      	b.n	8006264 <__exponent+0x4a>
 8006288:	2330      	movs	r3, #48	; 0x30
 800628a:	3130      	adds	r1, #48	; 0x30
 800628c:	7083      	strb	r3, [r0, #2]
 800628e:	70c1      	strb	r1, [r0, #3]
 8006290:	1d03      	adds	r3, r0, #4
 8006292:	e7f1      	b.n	8006278 <__exponent+0x5e>

08006294 <_printf_float>:
 8006294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	b091      	sub	sp, #68	; 0x44
 800629a:	460c      	mov	r4, r1
 800629c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80062a0:	4616      	mov	r6, r2
 80062a2:	461f      	mov	r7, r3
 80062a4:	4605      	mov	r5, r0
 80062a6:	f000 fde9 	bl	8006e7c <_localeconv_r>
 80062aa:	6803      	ldr	r3, [r0, #0]
 80062ac:	4618      	mov	r0, r3
 80062ae:	9309      	str	r3, [sp, #36]	; 0x24
 80062b0:	f7f9 ff4e 	bl	8000150 <strlen>
 80062b4:	2300      	movs	r3, #0
 80062b6:	930e      	str	r3, [sp, #56]	; 0x38
 80062b8:	f8d8 3000 	ldr.w	r3, [r8]
 80062bc:	900a      	str	r0, [sp, #40]	; 0x28
 80062be:	3307      	adds	r3, #7
 80062c0:	f023 0307 	bic.w	r3, r3, #7
 80062c4:	f103 0208 	add.w	r2, r3, #8
 80062c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80062cc:	f8d4 b000 	ldr.w	fp, [r4]
 80062d0:	f8c8 2000 	str.w	r2, [r8]
 80062d4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80062d8:	4652      	mov	r2, sl
 80062da:	4643      	mov	r3, r8
 80062dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062e0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80062e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	4650      	mov	r0, sl
 80062ec:	4b9c      	ldr	r3, [pc, #624]	; (8006560 <_printf_float+0x2cc>)
 80062ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062f0:	f7fa fb8c 	bl	8000a0c <__aeabi_dcmpun>
 80062f4:	bb70      	cbnz	r0, 8006354 <_printf_float+0xc0>
 80062f6:	f04f 32ff 	mov.w	r2, #4294967295
 80062fa:	4650      	mov	r0, sl
 80062fc:	4b98      	ldr	r3, [pc, #608]	; (8006560 <_printf_float+0x2cc>)
 80062fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006300:	f7fa fb66 	bl	80009d0 <__aeabi_dcmple>
 8006304:	bb30      	cbnz	r0, 8006354 <_printf_float+0xc0>
 8006306:	2200      	movs	r2, #0
 8006308:	2300      	movs	r3, #0
 800630a:	4650      	mov	r0, sl
 800630c:	4641      	mov	r1, r8
 800630e:	f7fa fb55 	bl	80009bc <__aeabi_dcmplt>
 8006312:	b110      	cbz	r0, 800631a <_printf_float+0x86>
 8006314:	232d      	movs	r3, #45	; 0x2d
 8006316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800631a:	4a92      	ldr	r2, [pc, #584]	; (8006564 <_printf_float+0x2d0>)
 800631c:	4b92      	ldr	r3, [pc, #584]	; (8006568 <_printf_float+0x2d4>)
 800631e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006322:	bf94      	ite	ls
 8006324:	4690      	movls	r8, r2
 8006326:	4698      	movhi	r8, r3
 8006328:	2303      	movs	r3, #3
 800632a:	f04f 0a00 	mov.w	sl, #0
 800632e:	6123      	str	r3, [r4, #16]
 8006330:	f02b 0304 	bic.w	r3, fp, #4
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	4633      	mov	r3, r6
 8006338:	4621      	mov	r1, r4
 800633a:	4628      	mov	r0, r5
 800633c:	9700      	str	r7, [sp, #0]
 800633e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006340:	f000 f9d6 	bl	80066f0 <_printf_common>
 8006344:	3001      	adds	r0, #1
 8006346:	f040 8090 	bne.w	800646a <_printf_float+0x1d6>
 800634a:	f04f 30ff 	mov.w	r0, #4294967295
 800634e:	b011      	add	sp, #68	; 0x44
 8006350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006354:	4652      	mov	r2, sl
 8006356:	4643      	mov	r3, r8
 8006358:	4650      	mov	r0, sl
 800635a:	4641      	mov	r1, r8
 800635c:	f7fa fb56 	bl	8000a0c <__aeabi_dcmpun>
 8006360:	b148      	cbz	r0, 8006376 <_printf_float+0xe2>
 8006362:	f1b8 0f00 	cmp.w	r8, #0
 8006366:	bfb8      	it	lt
 8006368:	232d      	movlt	r3, #45	; 0x2d
 800636a:	4a80      	ldr	r2, [pc, #512]	; (800656c <_printf_float+0x2d8>)
 800636c:	bfb8      	it	lt
 800636e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006372:	4b7f      	ldr	r3, [pc, #508]	; (8006570 <_printf_float+0x2dc>)
 8006374:	e7d3      	b.n	800631e <_printf_float+0x8a>
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	d142      	bne.n	8006406 <_printf_float+0x172>
 8006380:	2306      	movs	r3, #6
 8006382:	6063      	str	r3, [r4, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	9206      	str	r2, [sp, #24]
 8006388:	aa0e      	add	r2, sp, #56	; 0x38
 800638a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800638e:	aa0d      	add	r2, sp, #52	; 0x34
 8006390:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006394:	9203      	str	r2, [sp, #12]
 8006396:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800639a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800639e:	6023      	str	r3, [r4, #0]
 80063a0:	6863      	ldr	r3, [r4, #4]
 80063a2:	4652      	mov	r2, sl
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	4628      	mov	r0, r5
 80063a8:	4643      	mov	r3, r8
 80063aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80063ac:	f7ff fed6 	bl	800615c <__cvt>
 80063b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063b2:	4680      	mov	r8, r0
 80063b4:	2947      	cmp	r1, #71	; 0x47
 80063b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063b8:	d108      	bne.n	80063cc <_printf_float+0x138>
 80063ba:	1cc8      	adds	r0, r1, #3
 80063bc:	db02      	blt.n	80063c4 <_printf_float+0x130>
 80063be:	6863      	ldr	r3, [r4, #4]
 80063c0:	4299      	cmp	r1, r3
 80063c2:	dd40      	ble.n	8006446 <_printf_float+0x1b2>
 80063c4:	f1a9 0902 	sub.w	r9, r9, #2
 80063c8:	fa5f f989 	uxtb.w	r9, r9
 80063cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063d0:	d81f      	bhi.n	8006412 <_printf_float+0x17e>
 80063d2:	464a      	mov	r2, r9
 80063d4:	3901      	subs	r1, #1
 80063d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063da:	910d      	str	r1, [sp, #52]	; 0x34
 80063dc:	f7ff ff1d 	bl	800621a <__exponent>
 80063e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063e2:	4682      	mov	sl, r0
 80063e4:	1813      	adds	r3, r2, r0
 80063e6:	2a01      	cmp	r2, #1
 80063e8:	6123      	str	r3, [r4, #16]
 80063ea:	dc02      	bgt.n	80063f2 <_printf_float+0x15e>
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	07d2      	lsls	r2, r2, #31
 80063f0:	d501      	bpl.n	80063f6 <_printf_float+0x162>
 80063f2:	3301      	adds	r3, #1
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d09b      	beq.n	8006336 <_printf_float+0xa2>
 80063fe:	232d      	movs	r3, #45	; 0x2d
 8006400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006404:	e797      	b.n	8006336 <_printf_float+0xa2>
 8006406:	2947      	cmp	r1, #71	; 0x47
 8006408:	d1bc      	bne.n	8006384 <_printf_float+0xf0>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1ba      	bne.n	8006384 <_printf_float+0xf0>
 800640e:	2301      	movs	r3, #1
 8006410:	e7b7      	b.n	8006382 <_printf_float+0xee>
 8006412:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006416:	d118      	bne.n	800644a <_printf_float+0x1b6>
 8006418:	2900      	cmp	r1, #0
 800641a:	6863      	ldr	r3, [r4, #4]
 800641c:	dd0b      	ble.n	8006436 <_printf_float+0x1a2>
 800641e:	6121      	str	r1, [r4, #16]
 8006420:	b913      	cbnz	r3, 8006428 <_printf_float+0x194>
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	07d0      	lsls	r0, r2, #31
 8006426:	d502      	bpl.n	800642e <_printf_float+0x19a>
 8006428:	3301      	adds	r3, #1
 800642a:	440b      	add	r3, r1
 800642c:	6123      	str	r3, [r4, #16]
 800642e:	f04f 0a00 	mov.w	sl, #0
 8006432:	65a1      	str	r1, [r4, #88]	; 0x58
 8006434:	e7df      	b.n	80063f6 <_printf_float+0x162>
 8006436:	b913      	cbnz	r3, 800643e <_printf_float+0x1aa>
 8006438:	6822      	ldr	r2, [r4, #0]
 800643a:	07d2      	lsls	r2, r2, #31
 800643c:	d501      	bpl.n	8006442 <_printf_float+0x1ae>
 800643e:	3302      	adds	r3, #2
 8006440:	e7f4      	b.n	800642c <_printf_float+0x198>
 8006442:	2301      	movs	r3, #1
 8006444:	e7f2      	b.n	800642c <_printf_float+0x198>
 8006446:	f04f 0967 	mov.w	r9, #103	; 0x67
 800644a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800644c:	4299      	cmp	r1, r3
 800644e:	db05      	blt.n	800645c <_printf_float+0x1c8>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	6121      	str	r1, [r4, #16]
 8006454:	07d8      	lsls	r0, r3, #31
 8006456:	d5ea      	bpl.n	800642e <_printf_float+0x19a>
 8006458:	1c4b      	adds	r3, r1, #1
 800645a:	e7e7      	b.n	800642c <_printf_float+0x198>
 800645c:	2900      	cmp	r1, #0
 800645e:	bfcc      	ite	gt
 8006460:	2201      	movgt	r2, #1
 8006462:	f1c1 0202 	rsble	r2, r1, #2
 8006466:	4413      	add	r3, r2
 8006468:	e7e0      	b.n	800642c <_printf_float+0x198>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	055a      	lsls	r2, r3, #21
 800646e:	d407      	bmi.n	8006480 <_printf_float+0x1ec>
 8006470:	6923      	ldr	r3, [r4, #16]
 8006472:	4642      	mov	r2, r8
 8006474:	4631      	mov	r1, r6
 8006476:	4628      	mov	r0, r5
 8006478:	47b8      	blx	r7
 800647a:	3001      	adds	r0, #1
 800647c:	d12b      	bne.n	80064d6 <_printf_float+0x242>
 800647e:	e764      	b.n	800634a <_printf_float+0xb6>
 8006480:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006484:	f240 80dd 	bls.w	8006642 <_printf_float+0x3ae>
 8006488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800648c:	2200      	movs	r2, #0
 800648e:	2300      	movs	r3, #0
 8006490:	f7fa fa8a 	bl	80009a8 <__aeabi_dcmpeq>
 8006494:	2800      	cmp	r0, #0
 8006496:	d033      	beq.n	8006500 <_printf_float+0x26c>
 8006498:	2301      	movs	r3, #1
 800649a:	4631      	mov	r1, r6
 800649c:	4628      	mov	r0, r5
 800649e:	4a35      	ldr	r2, [pc, #212]	; (8006574 <_printf_float+0x2e0>)
 80064a0:	47b8      	blx	r7
 80064a2:	3001      	adds	r0, #1
 80064a4:	f43f af51 	beq.w	800634a <_printf_float+0xb6>
 80064a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064ac:	429a      	cmp	r2, r3
 80064ae:	db02      	blt.n	80064b6 <_printf_float+0x222>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	07d8      	lsls	r0, r3, #31
 80064b4:	d50f      	bpl.n	80064d6 <_printf_float+0x242>
 80064b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064ba:	4631      	mov	r1, r6
 80064bc:	4628      	mov	r0, r5
 80064be:	47b8      	blx	r7
 80064c0:	3001      	adds	r0, #1
 80064c2:	f43f af42 	beq.w	800634a <_printf_float+0xb6>
 80064c6:	f04f 0800 	mov.w	r8, #0
 80064ca:	f104 091a 	add.w	r9, r4, #26
 80064ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064d0:	3b01      	subs	r3, #1
 80064d2:	4543      	cmp	r3, r8
 80064d4:	dc09      	bgt.n	80064ea <_printf_float+0x256>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	079b      	lsls	r3, r3, #30
 80064da:	f100 8104 	bmi.w	80066e6 <_printf_float+0x452>
 80064de:	68e0      	ldr	r0, [r4, #12]
 80064e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064e2:	4298      	cmp	r0, r3
 80064e4:	bfb8      	it	lt
 80064e6:	4618      	movlt	r0, r3
 80064e8:	e731      	b.n	800634e <_printf_float+0xba>
 80064ea:	2301      	movs	r3, #1
 80064ec:	464a      	mov	r2, r9
 80064ee:	4631      	mov	r1, r6
 80064f0:	4628      	mov	r0, r5
 80064f2:	47b8      	blx	r7
 80064f4:	3001      	adds	r0, #1
 80064f6:	f43f af28 	beq.w	800634a <_printf_float+0xb6>
 80064fa:	f108 0801 	add.w	r8, r8, #1
 80064fe:	e7e6      	b.n	80064ce <_printf_float+0x23a>
 8006500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006502:	2b00      	cmp	r3, #0
 8006504:	dc38      	bgt.n	8006578 <_printf_float+0x2e4>
 8006506:	2301      	movs	r3, #1
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	4a19      	ldr	r2, [pc, #100]	; (8006574 <_printf_float+0x2e0>)
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	f43f af1a 	beq.w	800634a <_printf_float+0xb6>
 8006516:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800651a:	4313      	orrs	r3, r2
 800651c:	d102      	bne.n	8006524 <_printf_float+0x290>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	07d9      	lsls	r1, r3, #31
 8006522:	d5d8      	bpl.n	80064d6 <_printf_float+0x242>
 8006524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	47b8      	blx	r7
 800652e:	3001      	adds	r0, #1
 8006530:	f43f af0b 	beq.w	800634a <_printf_float+0xb6>
 8006534:	f04f 0900 	mov.w	r9, #0
 8006538:	f104 0a1a 	add.w	sl, r4, #26
 800653c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800653e:	425b      	negs	r3, r3
 8006540:	454b      	cmp	r3, r9
 8006542:	dc01      	bgt.n	8006548 <_printf_float+0x2b4>
 8006544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006546:	e794      	b.n	8006472 <_printf_float+0x1de>
 8006548:	2301      	movs	r3, #1
 800654a:	4652      	mov	r2, sl
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f aef9 	beq.w	800634a <_printf_float+0xb6>
 8006558:	f109 0901 	add.w	r9, r9, #1
 800655c:	e7ee      	b.n	800653c <_printf_float+0x2a8>
 800655e:	bf00      	nop
 8006560:	7fefffff 	.word	0x7fefffff
 8006564:	0800a6b4 	.word	0x0800a6b4
 8006568:	0800a6b8 	.word	0x0800a6b8
 800656c:	0800a6bc 	.word	0x0800a6bc
 8006570:	0800a6c0 	.word	0x0800a6c0
 8006574:	0800a6c4 	.word	0x0800a6c4
 8006578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800657a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800657c:	429a      	cmp	r2, r3
 800657e:	bfa8      	it	ge
 8006580:	461a      	movge	r2, r3
 8006582:	2a00      	cmp	r2, #0
 8006584:	4691      	mov	r9, r2
 8006586:	dc37      	bgt.n	80065f8 <_printf_float+0x364>
 8006588:	f04f 0b00 	mov.w	fp, #0
 800658c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006590:	f104 021a 	add.w	r2, r4, #26
 8006594:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006598:	ebaa 0309 	sub.w	r3, sl, r9
 800659c:	455b      	cmp	r3, fp
 800659e:	dc33      	bgt.n	8006608 <_printf_float+0x374>
 80065a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065a4:	429a      	cmp	r2, r3
 80065a6:	db3b      	blt.n	8006620 <_printf_float+0x38c>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	07da      	lsls	r2, r3, #31
 80065ac:	d438      	bmi.n	8006620 <_printf_float+0x38c>
 80065ae:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80065b2:	eba2 0903 	sub.w	r9, r2, r3
 80065b6:	eba2 020a 	sub.w	r2, r2, sl
 80065ba:	4591      	cmp	r9, r2
 80065bc:	bfa8      	it	ge
 80065be:	4691      	movge	r9, r2
 80065c0:	f1b9 0f00 	cmp.w	r9, #0
 80065c4:	dc34      	bgt.n	8006630 <_printf_float+0x39c>
 80065c6:	f04f 0800 	mov.w	r8, #0
 80065ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ce:	f104 0a1a 	add.w	sl, r4, #26
 80065d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065d6:	1a9b      	subs	r3, r3, r2
 80065d8:	eba3 0309 	sub.w	r3, r3, r9
 80065dc:	4543      	cmp	r3, r8
 80065de:	f77f af7a 	ble.w	80064d6 <_printf_float+0x242>
 80065e2:	2301      	movs	r3, #1
 80065e4:	4652      	mov	r2, sl
 80065e6:	4631      	mov	r1, r6
 80065e8:	4628      	mov	r0, r5
 80065ea:	47b8      	blx	r7
 80065ec:	3001      	adds	r0, #1
 80065ee:	f43f aeac 	beq.w	800634a <_printf_float+0xb6>
 80065f2:	f108 0801 	add.w	r8, r8, #1
 80065f6:	e7ec      	b.n	80065d2 <_printf_float+0x33e>
 80065f8:	4613      	mov	r3, r2
 80065fa:	4631      	mov	r1, r6
 80065fc:	4642      	mov	r2, r8
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	d1c0      	bne.n	8006588 <_printf_float+0x2f4>
 8006606:	e6a0      	b.n	800634a <_printf_float+0xb6>
 8006608:	2301      	movs	r3, #1
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006610:	47b8      	blx	r7
 8006612:	3001      	adds	r0, #1
 8006614:	f43f ae99 	beq.w	800634a <_printf_float+0xb6>
 8006618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800661a:	f10b 0b01 	add.w	fp, fp, #1
 800661e:	e7b9      	b.n	8006594 <_printf_float+0x300>
 8006620:	4631      	mov	r1, r6
 8006622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	d1bf      	bne.n	80065ae <_printf_float+0x31a>
 800662e:	e68c      	b.n	800634a <_printf_float+0xb6>
 8006630:	464b      	mov	r3, r9
 8006632:	4631      	mov	r1, r6
 8006634:	4628      	mov	r0, r5
 8006636:	eb08 020a 	add.w	r2, r8, sl
 800663a:	47b8      	blx	r7
 800663c:	3001      	adds	r0, #1
 800663e:	d1c2      	bne.n	80065c6 <_printf_float+0x332>
 8006640:	e683      	b.n	800634a <_printf_float+0xb6>
 8006642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006644:	2a01      	cmp	r2, #1
 8006646:	dc01      	bgt.n	800664c <_printf_float+0x3b8>
 8006648:	07db      	lsls	r3, r3, #31
 800664a:	d539      	bpl.n	80066c0 <_printf_float+0x42c>
 800664c:	2301      	movs	r3, #1
 800664e:	4642      	mov	r2, r8
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f ae77 	beq.w	800634a <_printf_float+0xb6>
 800665c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006660:	4631      	mov	r1, r6
 8006662:	4628      	mov	r0, r5
 8006664:	47b8      	blx	r7
 8006666:	3001      	adds	r0, #1
 8006668:	f43f ae6f 	beq.w	800634a <_printf_float+0xb6>
 800666c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006670:	2200      	movs	r2, #0
 8006672:	2300      	movs	r3, #0
 8006674:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006678:	f7fa f996 	bl	80009a8 <__aeabi_dcmpeq>
 800667c:	b9d8      	cbnz	r0, 80066b6 <_printf_float+0x422>
 800667e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006682:	f108 0201 	add.w	r2, r8, #1
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	d10e      	bne.n	80066ae <_printf_float+0x41a>
 8006690:	e65b      	b.n	800634a <_printf_float+0xb6>
 8006692:	2301      	movs	r3, #1
 8006694:	464a      	mov	r2, r9
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	f43f ae54 	beq.w	800634a <_printf_float+0xb6>
 80066a2:	f108 0801 	add.w	r8, r8, #1
 80066a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066a8:	3b01      	subs	r3, #1
 80066aa:	4543      	cmp	r3, r8
 80066ac:	dcf1      	bgt.n	8006692 <_printf_float+0x3fe>
 80066ae:	4653      	mov	r3, sl
 80066b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066b4:	e6de      	b.n	8006474 <_printf_float+0x1e0>
 80066b6:	f04f 0800 	mov.w	r8, #0
 80066ba:	f104 091a 	add.w	r9, r4, #26
 80066be:	e7f2      	b.n	80066a6 <_printf_float+0x412>
 80066c0:	2301      	movs	r3, #1
 80066c2:	4642      	mov	r2, r8
 80066c4:	e7df      	b.n	8006686 <_printf_float+0x3f2>
 80066c6:	2301      	movs	r3, #1
 80066c8:	464a      	mov	r2, r9
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	f43f ae3a 	beq.w	800634a <_printf_float+0xb6>
 80066d6:	f108 0801 	add.w	r8, r8, #1
 80066da:	68e3      	ldr	r3, [r4, #12]
 80066dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066de:	1a5b      	subs	r3, r3, r1
 80066e0:	4543      	cmp	r3, r8
 80066e2:	dcf0      	bgt.n	80066c6 <_printf_float+0x432>
 80066e4:	e6fb      	b.n	80064de <_printf_float+0x24a>
 80066e6:	f04f 0800 	mov.w	r8, #0
 80066ea:	f104 0919 	add.w	r9, r4, #25
 80066ee:	e7f4      	b.n	80066da <_printf_float+0x446>

080066f0 <_printf_common>:
 80066f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f4:	4616      	mov	r6, r2
 80066f6:	4699      	mov	r9, r3
 80066f8:	688a      	ldr	r2, [r1, #8]
 80066fa:	690b      	ldr	r3, [r1, #16]
 80066fc:	4607      	mov	r7, r0
 80066fe:	4293      	cmp	r3, r2
 8006700:	bfb8      	it	lt
 8006702:	4613      	movlt	r3, r2
 8006704:	6033      	str	r3, [r6, #0]
 8006706:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800670a:	460c      	mov	r4, r1
 800670c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006710:	b10a      	cbz	r2, 8006716 <_printf_common+0x26>
 8006712:	3301      	adds	r3, #1
 8006714:	6033      	str	r3, [r6, #0]
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	0699      	lsls	r1, r3, #26
 800671a:	bf42      	ittt	mi
 800671c:	6833      	ldrmi	r3, [r6, #0]
 800671e:	3302      	addmi	r3, #2
 8006720:	6033      	strmi	r3, [r6, #0]
 8006722:	6825      	ldr	r5, [r4, #0]
 8006724:	f015 0506 	ands.w	r5, r5, #6
 8006728:	d106      	bne.n	8006738 <_printf_common+0x48>
 800672a:	f104 0a19 	add.w	sl, r4, #25
 800672e:	68e3      	ldr	r3, [r4, #12]
 8006730:	6832      	ldr	r2, [r6, #0]
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	42ab      	cmp	r3, r5
 8006736:	dc2b      	bgt.n	8006790 <_printf_common+0xa0>
 8006738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800673c:	1e13      	subs	r3, r2, #0
 800673e:	6822      	ldr	r2, [r4, #0]
 8006740:	bf18      	it	ne
 8006742:	2301      	movne	r3, #1
 8006744:	0692      	lsls	r2, r2, #26
 8006746:	d430      	bmi.n	80067aa <_printf_common+0xba>
 8006748:	4649      	mov	r1, r9
 800674a:	4638      	mov	r0, r7
 800674c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006750:	47c0      	blx	r8
 8006752:	3001      	adds	r0, #1
 8006754:	d023      	beq.n	800679e <_printf_common+0xae>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	6922      	ldr	r2, [r4, #16]
 800675a:	f003 0306 	and.w	r3, r3, #6
 800675e:	2b04      	cmp	r3, #4
 8006760:	bf14      	ite	ne
 8006762:	2500      	movne	r5, #0
 8006764:	6833      	ldreq	r3, [r6, #0]
 8006766:	f04f 0600 	mov.w	r6, #0
 800676a:	bf08      	it	eq
 800676c:	68e5      	ldreq	r5, [r4, #12]
 800676e:	f104 041a 	add.w	r4, r4, #26
 8006772:	bf08      	it	eq
 8006774:	1aed      	subeq	r5, r5, r3
 8006776:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800677a:	bf08      	it	eq
 800677c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006780:	4293      	cmp	r3, r2
 8006782:	bfc4      	itt	gt
 8006784:	1a9b      	subgt	r3, r3, r2
 8006786:	18ed      	addgt	r5, r5, r3
 8006788:	42b5      	cmp	r5, r6
 800678a:	d11a      	bne.n	80067c2 <_printf_common+0xd2>
 800678c:	2000      	movs	r0, #0
 800678e:	e008      	b.n	80067a2 <_printf_common+0xb2>
 8006790:	2301      	movs	r3, #1
 8006792:	4652      	mov	r2, sl
 8006794:	4649      	mov	r1, r9
 8006796:	4638      	mov	r0, r7
 8006798:	47c0      	blx	r8
 800679a:	3001      	adds	r0, #1
 800679c:	d103      	bne.n	80067a6 <_printf_common+0xb6>
 800679e:	f04f 30ff 	mov.w	r0, #4294967295
 80067a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a6:	3501      	adds	r5, #1
 80067a8:	e7c1      	b.n	800672e <_printf_common+0x3e>
 80067aa:	2030      	movs	r0, #48	; 0x30
 80067ac:	18e1      	adds	r1, r4, r3
 80067ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067b8:	4422      	add	r2, r4
 80067ba:	3302      	adds	r3, #2
 80067bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067c0:	e7c2      	b.n	8006748 <_printf_common+0x58>
 80067c2:	2301      	movs	r3, #1
 80067c4:	4622      	mov	r2, r4
 80067c6:	4649      	mov	r1, r9
 80067c8:	4638      	mov	r0, r7
 80067ca:	47c0      	blx	r8
 80067cc:	3001      	adds	r0, #1
 80067ce:	d0e6      	beq.n	800679e <_printf_common+0xae>
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7d9      	b.n	8006788 <_printf_common+0x98>

080067d4 <_printf_i>:
 80067d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	7e0f      	ldrb	r7, [r1, #24]
 80067da:	4691      	mov	r9, r2
 80067dc:	2f78      	cmp	r7, #120	; 0x78
 80067de:	4680      	mov	r8, r0
 80067e0:	460c      	mov	r4, r1
 80067e2:	469a      	mov	sl, r3
 80067e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067ea:	d807      	bhi.n	80067fc <_printf_i+0x28>
 80067ec:	2f62      	cmp	r7, #98	; 0x62
 80067ee:	d80a      	bhi.n	8006806 <_printf_i+0x32>
 80067f0:	2f00      	cmp	r7, #0
 80067f2:	f000 80d5 	beq.w	80069a0 <_printf_i+0x1cc>
 80067f6:	2f58      	cmp	r7, #88	; 0x58
 80067f8:	f000 80c1 	beq.w	800697e <_printf_i+0x1aa>
 80067fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006804:	e03a      	b.n	800687c <_printf_i+0xa8>
 8006806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800680a:	2b15      	cmp	r3, #21
 800680c:	d8f6      	bhi.n	80067fc <_printf_i+0x28>
 800680e:	a101      	add	r1, pc, #4	; (adr r1, 8006814 <_printf_i+0x40>)
 8006810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006814:	0800686d 	.word	0x0800686d
 8006818:	08006881 	.word	0x08006881
 800681c:	080067fd 	.word	0x080067fd
 8006820:	080067fd 	.word	0x080067fd
 8006824:	080067fd 	.word	0x080067fd
 8006828:	080067fd 	.word	0x080067fd
 800682c:	08006881 	.word	0x08006881
 8006830:	080067fd 	.word	0x080067fd
 8006834:	080067fd 	.word	0x080067fd
 8006838:	080067fd 	.word	0x080067fd
 800683c:	080067fd 	.word	0x080067fd
 8006840:	08006987 	.word	0x08006987
 8006844:	080068ad 	.word	0x080068ad
 8006848:	08006941 	.word	0x08006941
 800684c:	080067fd 	.word	0x080067fd
 8006850:	080067fd 	.word	0x080067fd
 8006854:	080069a9 	.word	0x080069a9
 8006858:	080067fd 	.word	0x080067fd
 800685c:	080068ad 	.word	0x080068ad
 8006860:	080067fd 	.word	0x080067fd
 8006864:	080067fd 	.word	0x080067fd
 8006868:	08006949 	.word	0x08006949
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	1d1a      	adds	r2, r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	602a      	str	r2, [r5, #0]
 8006874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800687c:	2301      	movs	r3, #1
 800687e:	e0a0      	b.n	80069c2 <_printf_i+0x1ee>
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	682b      	ldr	r3, [r5, #0]
 8006884:	0607      	lsls	r7, r0, #24
 8006886:	f103 0104 	add.w	r1, r3, #4
 800688a:	6029      	str	r1, [r5, #0]
 800688c:	d501      	bpl.n	8006892 <_printf_i+0xbe>
 800688e:	681e      	ldr	r6, [r3, #0]
 8006890:	e003      	b.n	800689a <_printf_i+0xc6>
 8006892:	0646      	lsls	r6, r0, #25
 8006894:	d5fb      	bpl.n	800688e <_printf_i+0xba>
 8006896:	f9b3 6000 	ldrsh.w	r6, [r3]
 800689a:	2e00      	cmp	r6, #0
 800689c:	da03      	bge.n	80068a6 <_printf_i+0xd2>
 800689e:	232d      	movs	r3, #45	; 0x2d
 80068a0:	4276      	negs	r6, r6
 80068a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a6:	230a      	movs	r3, #10
 80068a8:	4859      	ldr	r0, [pc, #356]	; (8006a10 <_printf_i+0x23c>)
 80068aa:	e012      	b.n	80068d2 <_printf_i+0xfe>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	6820      	ldr	r0, [r4, #0]
 80068b0:	1d19      	adds	r1, r3, #4
 80068b2:	6029      	str	r1, [r5, #0]
 80068b4:	0605      	lsls	r5, r0, #24
 80068b6:	d501      	bpl.n	80068bc <_printf_i+0xe8>
 80068b8:	681e      	ldr	r6, [r3, #0]
 80068ba:	e002      	b.n	80068c2 <_printf_i+0xee>
 80068bc:	0641      	lsls	r1, r0, #25
 80068be:	d5fb      	bpl.n	80068b8 <_printf_i+0xe4>
 80068c0:	881e      	ldrh	r6, [r3, #0]
 80068c2:	2f6f      	cmp	r7, #111	; 0x6f
 80068c4:	bf0c      	ite	eq
 80068c6:	2308      	moveq	r3, #8
 80068c8:	230a      	movne	r3, #10
 80068ca:	4851      	ldr	r0, [pc, #324]	; (8006a10 <_printf_i+0x23c>)
 80068cc:	2100      	movs	r1, #0
 80068ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068d2:	6865      	ldr	r5, [r4, #4]
 80068d4:	2d00      	cmp	r5, #0
 80068d6:	bfa8      	it	ge
 80068d8:	6821      	ldrge	r1, [r4, #0]
 80068da:	60a5      	str	r5, [r4, #8]
 80068dc:	bfa4      	itt	ge
 80068de:	f021 0104 	bicge.w	r1, r1, #4
 80068e2:	6021      	strge	r1, [r4, #0]
 80068e4:	b90e      	cbnz	r6, 80068ea <_printf_i+0x116>
 80068e6:	2d00      	cmp	r5, #0
 80068e8:	d04b      	beq.n	8006982 <_printf_i+0x1ae>
 80068ea:	4615      	mov	r5, r2
 80068ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80068f0:	fb03 6711 	mls	r7, r3, r1, r6
 80068f4:	5dc7      	ldrb	r7, [r0, r7]
 80068f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068fa:	4637      	mov	r7, r6
 80068fc:	42bb      	cmp	r3, r7
 80068fe:	460e      	mov	r6, r1
 8006900:	d9f4      	bls.n	80068ec <_printf_i+0x118>
 8006902:	2b08      	cmp	r3, #8
 8006904:	d10b      	bne.n	800691e <_printf_i+0x14a>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	07de      	lsls	r6, r3, #31
 800690a:	d508      	bpl.n	800691e <_printf_i+0x14a>
 800690c:	6923      	ldr	r3, [r4, #16]
 800690e:	6861      	ldr	r1, [r4, #4]
 8006910:	4299      	cmp	r1, r3
 8006912:	bfde      	ittt	le
 8006914:	2330      	movle	r3, #48	; 0x30
 8006916:	f805 3c01 	strble.w	r3, [r5, #-1]
 800691a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800691e:	1b52      	subs	r2, r2, r5
 8006920:	6122      	str	r2, [r4, #16]
 8006922:	464b      	mov	r3, r9
 8006924:	4621      	mov	r1, r4
 8006926:	4640      	mov	r0, r8
 8006928:	f8cd a000 	str.w	sl, [sp]
 800692c:	aa03      	add	r2, sp, #12
 800692e:	f7ff fedf 	bl	80066f0 <_printf_common>
 8006932:	3001      	adds	r0, #1
 8006934:	d14a      	bne.n	80069cc <_printf_i+0x1f8>
 8006936:	f04f 30ff 	mov.w	r0, #4294967295
 800693a:	b004      	add	sp, #16
 800693c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	f043 0320 	orr.w	r3, r3, #32
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	2778      	movs	r7, #120	; 0x78
 800694a:	4832      	ldr	r0, [pc, #200]	; (8006a14 <_printf_i+0x240>)
 800694c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	6829      	ldr	r1, [r5, #0]
 8006954:	061f      	lsls	r7, r3, #24
 8006956:	f851 6b04 	ldr.w	r6, [r1], #4
 800695a:	d402      	bmi.n	8006962 <_printf_i+0x18e>
 800695c:	065f      	lsls	r7, r3, #25
 800695e:	bf48      	it	mi
 8006960:	b2b6      	uxthmi	r6, r6
 8006962:	07df      	lsls	r7, r3, #31
 8006964:	bf48      	it	mi
 8006966:	f043 0320 	orrmi.w	r3, r3, #32
 800696a:	6029      	str	r1, [r5, #0]
 800696c:	bf48      	it	mi
 800696e:	6023      	strmi	r3, [r4, #0]
 8006970:	b91e      	cbnz	r6, 800697a <_printf_i+0x1a6>
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	f023 0320 	bic.w	r3, r3, #32
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	2310      	movs	r3, #16
 800697c:	e7a6      	b.n	80068cc <_printf_i+0xf8>
 800697e:	4824      	ldr	r0, [pc, #144]	; (8006a10 <_printf_i+0x23c>)
 8006980:	e7e4      	b.n	800694c <_printf_i+0x178>
 8006982:	4615      	mov	r5, r2
 8006984:	e7bd      	b.n	8006902 <_printf_i+0x12e>
 8006986:	682b      	ldr	r3, [r5, #0]
 8006988:	6826      	ldr	r6, [r4, #0]
 800698a:	1d18      	adds	r0, r3, #4
 800698c:	6961      	ldr	r1, [r4, #20]
 800698e:	6028      	str	r0, [r5, #0]
 8006990:	0635      	lsls	r5, r6, #24
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	d501      	bpl.n	800699a <_printf_i+0x1c6>
 8006996:	6019      	str	r1, [r3, #0]
 8006998:	e002      	b.n	80069a0 <_printf_i+0x1cc>
 800699a:	0670      	lsls	r0, r6, #25
 800699c:	d5fb      	bpl.n	8006996 <_printf_i+0x1c2>
 800699e:	8019      	strh	r1, [r3, #0]
 80069a0:	2300      	movs	r3, #0
 80069a2:	4615      	mov	r5, r2
 80069a4:	6123      	str	r3, [r4, #16]
 80069a6:	e7bc      	b.n	8006922 <_printf_i+0x14e>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	2100      	movs	r1, #0
 80069ac:	1d1a      	adds	r2, r3, #4
 80069ae:	602a      	str	r2, [r5, #0]
 80069b0:	681d      	ldr	r5, [r3, #0]
 80069b2:	6862      	ldr	r2, [r4, #4]
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 fad7 	bl	8006f68 <memchr>
 80069ba:	b108      	cbz	r0, 80069c0 <_printf_i+0x1ec>
 80069bc:	1b40      	subs	r0, r0, r5
 80069be:	6060      	str	r0, [r4, #4]
 80069c0:	6863      	ldr	r3, [r4, #4]
 80069c2:	6123      	str	r3, [r4, #16]
 80069c4:	2300      	movs	r3, #0
 80069c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ca:	e7aa      	b.n	8006922 <_printf_i+0x14e>
 80069cc:	462a      	mov	r2, r5
 80069ce:	4649      	mov	r1, r9
 80069d0:	4640      	mov	r0, r8
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	47d0      	blx	sl
 80069d6:	3001      	adds	r0, #1
 80069d8:	d0ad      	beq.n	8006936 <_printf_i+0x162>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	079b      	lsls	r3, r3, #30
 80069de:	d413      	bmi.n	8006a08 <_printf_i+0x234>
 80069e0:	68e0      	ldr	r0, [r4, #12]
 80069e2:	9b03      	ldr	r3, [sp, #12]
 80069e4:	4298      	cmp	r0, r3
 80069e6:	bfb8      	it	lt
 80069e8:	4618      	movlt	r0, r3
 80069ea:	e7a6      	b.n	800693a <_printf_i+0x166>
 80069ec:	2301      	movs	r3, #1
 80069ee:	4632      	mov	r2, r6
 80069f0:	4649      	mov	r1, r9
 80069f2:	4640      	mov	r0, r8
 80069f4:	47d0      	blx	sl
 80069f6:	3001      	adds	r0, #1
 80069f8:	d09d      	beq.n	8006936 <_printf_i+0x162>
 80069fa:	3501      	adds	r5, #1
 80069fc:	68e3      	ldr	r3, [r4, #12]
 80069fe:	9903      	ldr	r1, [sp, #12]
 8006a00:	1a5b      	subs	r3, r3, r1
 8006a02:	42ab      	cmp	r3, r5
 8006a04:	dcf2      	bgt.n	80069ec <_printf_i+0x218>
 8006a06:	e7eb      	b.n	80069e0 <_printf_i+0x20c>
 8006a08:	2500      	movs	r5, #0
 8006a0a:	f104 0619 	add.w	r6, r4, #25
 8006a0e:	e7f5      	b.n	80069fc <_printf_i+0x228>
 8006a10:	0800a6c6 	.word	0x0800a6c6
 8006a14:	0800a6d7 	.word	0x0800a6d7

08006a18 <std>:
 8006a18:	2300      	movs	r3, #0
 8006a1a:	b510      	push	{r4, lr}
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a26:	6083      	str	r3, [r0, #8]
 8006a28:	8181      	strh	r1, [r0, #12]
 8006a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8006a2c:	81c2      	strh	r2, [r0, #14]
 8006a2e:	6183      	str	r3, [r0, #24]
 8006a30:	4619      	mov	r1, r3
 8006a32:	2208      	movs	r2, #8
 8006a34:	305c      	adds	r0, #92	; 0x5c
 8006a36:	f000 fa19 	bl	8006e6c <memset>
 8006a3a:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <std+0x38>)
 8006a3c:	6224      	str	r4, [r4, #32]
 8006a3e:	6263      	str	r3, [r4, #36]	; 0x24
 8006a40:	4b04      	ldr	r3, [pc, #16]	; (8006a54 <std+0x3c>)
 8006a42:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a44:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <std+0x40>)
 8006a46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a48:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <std+0x44>)
 8006a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8006a4c:	bd10      	pop	{r4, pc}
 8006a4e:	bf00      	nop
 8006a50:	08006cbd 	.word	0x08006cbd
 8006a54:	08006cdf 	.word	0x08006cdf
 8006a58:	08006d17 	.word	0x08006d17
 8006a5c:	08006d3b 	.word	0x08006d3b

08006a60 <stdio_exit_handler>:
 8006a60:	4a02      	ldr	r2, [pc, #8]	; (8006a6c <stdio_exit_handler+0xc>)
 8006a62:	4903      	ldr	r1, [pc, #12]	; (8006a70 <stdio_exit_handler+0x10>)
 8006a64:	4803      	ldr	r0, [pc, #12]	; (8006a74 <stdio_exit_handler+0x14>)
 8006a66:	f000 b869 	b.w	8006b3c <_fwalk_sglue>
 8006a6a:	bf00      	nop
 8006a6c:	2000001c 	.word	0x2000001c
 8006a70:	08008ba1 	.word	0x08008ba1
 8006a74:	20000028 	.word	0x20000028

08006a78 <cleanup_stdio>:
 8006a78:	6841      	ldr	r1, [r0, #4]
 8006a7a:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <cleanup_stdio+0x34>)
 8006a7c:	b510      	push	{r4, lr}
 8006a7e:	4299      	cmp	r1, r3
 8006a80:	4604      	mov	r4, r0
 8006a82:	d001      	beq.n	8006a88 <cleanup_stdio+0x10>
 8006a84:	f002 f88c 	bl	8008ba0 <_fflush_r>
 8006a88:	68a1      	ldr	r1, [r4, #8]
 8006a8a:	4b09      	ldr	r3, [pc, #36]	; (8006ab0 <cleanup_stdio+0x38>)
 8006a8c:	4299      	cmp	r1, r3
 8006a8e:	d002      	beq.n	8006a96 <cleanup_stdio+0x1e>
 8006a90:	4620      	mov	r0, r4
 8006a92:	f002 f885 	bl	8008ba0 <_fflush_r>
 8006a96:	68e1      	ldr	r1, [r4, #12]
 8006a98:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <cleanup_stdio+0x3c>)
 8006a9a:	4299      	cmp	r1, r3
 8006a9c:	d004      	beq.n	8006aa8 <cleanup_stdio+0x30>
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa4:	f002 b87c 	b.w	8008ba0 <_fflush_r>
 8006aa8:	bd10      	pop	{r4, pc}
 8006aaa:	bf00      	nop
 8006aac:	200007b0 	.word	0x200007b0
 8006ab0:	20000818 	.word	0x20000818
 8006ab4:	20000880 	.word	0x20000880

08006ab8 <global_stdio_init.part.0>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <global_stdio_init.part.0+0x30>)
 8006abc:	4c0b      	ldr	r4, [pc, #44]	; (8006aec <global_stdio_init.part.0+0x34>)
 8006abe:	4a0c      	ldr	r2, [pc, #48]	; (8006af0 <global_stdio_init.part.0+0x38>)
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	2104      	movs	r1, #4
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f7ff ffa6 	bl	8006a18 <std>
 8006acc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	2109      	movs	r1, #9
 8006ad4:	f7ff ffa0 	bl	8006a18 <std>
 8006ad8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006adc:	2202      	movs	r2, #2
 8006ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae2:	2112      	movs	r1, #18
 8006ae4:	f7ff bf98 	b.w	8006a18 <std>
 8006ae8:	200008e8 	.word	0x200008e8
 8006aec:	200007b0 	.word	0x200007b0
 8006af0:	08006a61 	.word	0x08006a61

08006af4 <__sfp_lock_acquire>:
 8006af4:	4801      	ldr	r0, [pc, #4]	; (8006afc <__sfp_lock_acquire+0x8>)
 8006af6:	f000 ba35 	b.w	8006f64 <__retarget_lock_acquire_recursive>
 8006afa:	bf00      	nop
 8006afc:	200008f1 	.word	0x200008f1

08006b00 <__sfp_lock_release>:
 8006b00:	4801      	ldr	r0, [pc, #4]	; (8006b08 <__sfp_lock_release+0x8>)
 8006b02:	f000 ba30 	b.w	8006f66 <__retarget_lock_release_recursive>
 8006b06:	bf00      	nop
 8006b08:	200008f1 	.word	0x200008f1

08006b0c <__sinit>:
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	4604      	mov	r4, r0
 8006b10:	f7ff fff0 	bl	8006af4 <__sfp_lock_acquire>
 8006b14:	6a23      	ldr	r3, [r4, #32]
 8006b16:	b11b      	cbz	r3, 8006b20 <__sinit+0x14>
 8006b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b1c:	f7ff bff0 	b.w	8006b00 <__sfp_lock_release>
 8006b20:	4b04      	ldr	r3, [pc, #16]	; (8006b34 <__sinit+0x28>)
 8006b22:	6223      	str	r3, [r4, #32]
 8006b24:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <__sinit+0x2c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f5      	bne.n	8006b18 <__sinit+0xc>
 8006b2c:	f7ff ffc4 	bl	8006ab8 <global_stdio_init.part.0>
 8006b30:	e7f2      	b.n	8006b18 <__sinit+0xc>
 8006b32:	bf00      	nop
 8006b34:	08006a79 	.word	0x08006a79
 8006b38:	200008e8 	.word	0x200008e8

08006b3c <_fwalk_sglue>:
 8006b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b40:	4607      	mov	r7, r0
 8006b42:	4688      	mov	r8, r1
 8006b44:	4614      	mov	r4, r2
 8006b46:	2600      	movs	r6, #0
 8006b48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b4c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b50:	d505      	bpl.n	8006b5e <_fwalk_sglue+0x22>
 8006b52:	6824      	ldr	r4, [r4, #0]
 8006b54:	2c00      	cmp	r4, #0
 8006b56:	d1f7      	bne.n	8006b48 <_fwalk_sglue+0xc>
 8006b58:	4630      	mov	r0, r6
 8006b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b5e:	89ab      	ldrh	r3, [r5, #12]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d907      	bls.n	8006b74 <_fwalk_sglue+0x38>
 8006b64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	d003      	beq.n	8006b74 <_fwalk_sglue+0x38>
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	4638      	mov	r0, r7
 8006b70:	47c0      	blx	r8
 8006b72:	4306      	orrs	r6, r0
 8006b74:	3568      	adds	r5, #104	; 0x68
 8006b76:	e7e9      	b.n	8006b4c <_fwalk_sglue+0x10>

08006b78 <iprintf>:
 8006b78:	b40f      	push	{r0, r1, r2, r3}
 8006b7a:	b507      	push	{r0, r1, r2, lr}
 8006b7c:	4906      	ldr	r1, [pc, #24]	; (8006b98 <iprintf+0x20>)
 8006b7e:	ab04      	add	r3, sp, #16
 8006b80:	6808      	ldr	r0, [r1, #0]
 8006b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b86:	6881      	ldr	r1, [r0, #8]
 8006b88:	9301      	str	r3, [sp, #4]
 8006b8a:	f001 fe6d 	bl	8008868 <_vfiprintf_r>
 8006b8e:	b003      	add	sp, #12
 8006b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b94:	b004      	add	sp, #16
 8006b96:	4770      	bx	lr
 8006b98:	20000074 	.word	0x20000074

08006b9c <_puts_r>:
 8006b9c:	6a03      	ldr	r3, [r0, #32]
 8006b9e:	b570      	push	{r4, r5, r6, lr}
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	460e      	mov	r6, r1
 8006ba4:	6884      	ldr	r4, [r0, #8]
 8006ba6:	b90b      	cbnz	r3, 8006bac <_puts_r+0x10>
 8006ba8:	f7ff ffb0 	bl	8006b0c <__sinit>
 8006bac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bae:	07db      	lsls	r3, r3, #31
 8006bb0:	d405      	bmi.n	8006bbe <_puts_r+0x22>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	0598      	lsls	r0, r3, #22
 8006bb6:	d402      	bmi.n	8006bbe <_puts_r+0x22>
 8006bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bba:	f000 f9d3 	bl	8006f64 <__retarget_lock_acquire_recursive>
 8006bbe:	89a3      	ldrh	r3, [r4, #12]
 8006bc0:	0719      	lsls	r1, r3, #28
 8006bc2:	d513      	bpl.n	8006bec <_puts_r+0x50>
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	b18b      	cbz	r3, 8006bec <_puts_r+0x50>
 8006bc8:	3e01      	subs	r6, #1
 8006bca:	68a3      	ldr	r3, [r4, #8]
 8006bcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	60a3      	str	r3, [r4, #8]
 8006bd4:	b9e9      	cbnz	r1, 8006c12 <_puts_r+0x76>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	da2e      	bge.n	8006c38 <_puts_r+0x9c>
 8006bda:	4622      	mov	r2, r4
 8006bdc:	210a      	movs	r1, #10
 8006bde:	4628      	mov	r0, r5
 8006be0:	f000 f8af 	bl	8006d42 <__swbuf_r>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d007      	beq.n	8006bf8 <_puts_r+0x5c>
 8006be8:	250a      	movs	r5, #10
 8006bea:	e007      	b.n	8006bfc <_puts_r+0x60>
 8006bec:	4621      	mov	r1, r4
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 f8e4 	bl	8006dbc <__swsetup_r>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d0e7      	beq.n	8006bc8 <_puts_r+0x2c>
 8006bf8:	f04f 35ff 	mov.w	r5, #4294967295
 8006bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bfe:	07da      	lsls	r2, r3, #31
 8006c00:	d405      	bmi.n	8006c0e <_puts_r+0x72>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	059b      	lsls	r3, r3, #22
 8006c06:	d402      	bmi.n	8006c0e <_puts_r+0x72>
 8006c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c0a:	f000 f9ac 	bl	8006f66 <__retarget_lock_release_recursive>
 8006c0e:	4628      	mov	r0, r5
 8006c10:	bd70      	pop	{r4, r5, r6, pc}
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da04      	bge.n	8006c20 <_puts_r+0x84>
 8006c16:	69a2      	ldr	r2, [r4, #24]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	dc06      	bgt.n	8006c2a <_puts_r+0x8e>
 8006c1c:	290a      	cmp	r1, #10
 8006c1e:	d004      	beq.n	8006c2a <_puts_r+0x8e>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	6022      	str	r2, [r4, #0]
 8006c26:	7019      	strb	r1, [r3, #0]
 8006c28:	e7cf      	b.n	8006bca <_puts_r+0x2e>
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f000 f888 	bl	8006d42 <__swbuf_r>
 8006c32:	3001      	adds	r0, #1
 8006c34:	d1c9      	bne.n	8006bca <_puts_r+0x2e>
 8006c36:	e7df      	b.n	8006bf8 <_puts_r+0x5c>
 8006c38:	250a      	movs	r5, #10
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	6022      	str	r2, [r4, #0]
 8006c40:	701d      	strb	r5, [r3, #0]
 8006c42:	e7db      	b.n	8006bfc <_puts_r+0x60>

08006c44 <puts>:
 8006c44:	4b02      	ldr	r3, [pc, #8]	; (8006c50 <puts+0xc>)
 8006c46:	4601      	mov	r1, r0
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	f7ff bfa7 	b.w	8006b9c <_puts_r>
 8006c4e:	bf00      	nop
 8006c50:	20000074 	.word	0x20000074

08006c54 <sniprintf>:
 8006c54:	b40c      	push	{r2, r3}
 8006c56:	b530      	push	{r4, r5, lr}
 8006c58:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <sniprintf+0x64>)
 8006c5a:	1e0c      	subs	r4, r1, #0
 8006c5c:	681d      	ldr	r5, [r3, #0]
 8006c5e:	b09d      	sub	sp, #116	; 0x74
 8006c60:	da08      	bge.n	8006c74 <sniprintf+0x20>
 8006c62:	238b      	movs	r3, #139	; 0x8b
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	b01d      	add	sp, #116	; 0x74
 8006c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c70:	b002      	add	sp, #8
 8006c72:	4770      	bx	lr
 8006c74:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006c78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c7c:	bf0c      	ite	eq
 8006c7e:	4623      	moveq	r3, r4
 8006c80:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	9307      	str	r3, [sp, #28]
 8006c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c8c:	9002      	str	r0, [sp, #8]
 8006c8e:	9006      	str	r0, [sp, #24]
 8006c90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c94:	4628      	mov	r0, r5
 8006c96:	ab21      	add	r3, sp, #132	; 0x84
 8006c98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c9a:	a902      	add	r1, sp, #8
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	f001 fcbd 	bl	800861c <_svfiprintf_r>
 8006ca2:	1c43      	adds	r3, r0, #1
 8006ca4:	bfbc      	itt	lt
 8006ca6:	238b      	movlt	r3, #139	; 0x8b
 8006ca8:	602b      	strlt	r3, [r5, #0]
 8006caa:	2c00      	cmp	r4, #0
 8006cac:	d0dd      	beq.n	8006c6a <sniprintf+0x16>
 8006cae:	2200      	movs	r2, #0
 8006cb0:	9b02      	ldr	r3, [sp, #8]
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	e7d9      	b.n	8006c6a <sniprintf+0x16>
 8006cb6:	bf00      	nop
 8006cb8:	20000074 	.word	0x20000074

08006cbc <__sread>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc4:	f000 f900 	bl	8006ec8 <_read_r>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	bfab      	itete	ge
 8006ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cce:	89a3      	ldrhlt	r3, [r4, #12]
 8006cd0:	181b      	addge	r3, r3, r0
 8006cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cd6:	bfac      	ite	ge
 8006cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cda:	81a3      	strhlt	r3, [r4, #12]
 8006cdc:	bd10      	pop	{r4, pc}

08006cde <__swrite>:
 8006cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce2:	461f      	mov	r7, r3
 8006ce4:	898b      	ldrh	r3, [r1, #12]
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	05db      	lsls	r3, r3, #23
 8006cea:	460c      	mov	r4, r1
 8006cec:	4616      	mov	r6, r2
 8006cee:	d505      	bpl.n	8006cfc <__swrite+0x1e>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf8:	f000 f8d4 	bl	8006ea4 <_lseek_r>
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	4632      	mov	r2, r6
 8006d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	4628      	mov	r0, r5
 8006d08:	463b      	mov	r3, r7
 8006d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d12:	f000 b8eb 	b.w	8006eec <_write_r>

08006d16 <__sseek>:
 8006d16:	b510      	push	{r4, lr}
 8006d18:	460c      	mov	r4, r1
 8006d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1e:	f000 f8c1 	bl	8006ea4 <_lseek_r>
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	bf15      	itete	ne
 8006d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d32:	81a3      	strheq	r3, [r4, #12]
 8006d34:	bf18      	it	ne
 8006d36:	81a3      	strhne	r3, [r4, #12]
 8006d38:	bd10      	pop	{r4, pc}

08006d3a <__sclose>:
 8006d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3e:	f000 b8a1 	b.w	8006e84 <_close_r>

08006d42 <__swbuf_r>:
 8006d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d44:	460e      	mov	r6, r1
 8006d46:	4614      	mov	r4, r2
 8006d48:	4605      	mov	r5, r0
 8006d4a:	b118      	cbz	r0, 8006d54 <__swbuf_r+0x12>
 8006d4c:	6a03      	ldr	r3, [r0, #32]
 8006d4e:	b90b      	cbnz	r3, 8006d54 <__swbuf_r+0x12>
 8006d50:	f7ff fedc 	bl	8006b0c <__sinit>
 8006d54:	69a3      	ldr	r3, [r4, #24]
 8006d56:	60a3      	str	r3, [r4, #8]
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	071a      	lsls	r2, r3, #28
 8006d5c:	d525      	bpl.n	8006daa <__swbuf_r+0x68>
 8006d5e:	6923      	ldr	r3, [r4, #16]
 8006d60:	b31b      	cbz	r3, 8006daa <__swbuf_r+0x68>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	6922      	ldr	r2, [r4, #16]
 8006d66:	b2f6      	uxtb	r6, r6
 8006d68:	1a98      	subs	r0, r3, r2
 8006d6a:	6963      	ldr	r3, [r4, #20]
 8006d6c:	4637      	mov	r7, r6
 8006d6e:	4283      	cmp	r3, r0
 8006d70:	dc04      	bgt.n	8006d7c <__swbuf_r+0x3a>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4628      	mov	r0, r5
 8006d76:	f001 ff13 	bl	8008ba0 <_fflush_r>
 8006d7a:	b9e0      	cbnz	r0, 8006db6 <__swbuf_r+0x74>
 8006d7c:	68a3      	ldr	r3, [r4, #8]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	6022      	str	r2, [r4, #0]
 8006d88:	701e      	strb	r6, [r3, #0]
 8006d8a:	6962      	ldr	r2, [r4, #20]
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d004      	beq.n	8006d9c <__swbuf_r+0x5a>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	07db      	lsls	r3, r3, #31
 8006d96:	d506      	bpl.n	8006da6 <__swbuf_r+0x64>
 8006d98:	2e0a      	cmp	r6, #10
 8006d9a:	d104      	bne.n	8006da6 <__swbuf_r+0x64>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f001 fefe 	bl	8008ba0 <_fflush_r>
 8006da4:	b938      	cbnz	r0, 8006db6 <__swbuf_r+0x74>
 8006da6:	4638      	mov	r0, r7
 8006da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006daa:	4621      	mov	r1, r4
 8006dac:	4628      	mov	r0, r5
 8006dae:	f000 f805 	bl	8006dbc <__swsetup_r>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d0d5      	beq.n	8006d62 <__swbuf_r+0x20>
 8006db6:	f04f 37ff 	mov.w	r7, #4294967295
 8006dba:	e7f4      	b.n	8006da6 <__swbuf_r+0x64>

08006dbc <__swsetup_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4b2a      	ldr	r3, [pc, #168]	; (8006e68 <__swsetup_r+0xac>)
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	b118      	cbz	r0, 8006dd0 <__swsetup_r+0x14>
 8006dc8:	6a03      	ldr	r3, [r0, #32]
 8006dca:	b90b      	cbnz	r3, 8006dd0 <__swsetup_r+0x14>
 8006dcc:	f7ff fe9e 	bl	8006b0c <__sinit>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dd6:	0718      	lsls	r0, r3, #28
 8006dd8:	d422      	bmi.n	8006e20 <__swsetup_r+0x64>
 8006dda:	06d9      	lsls	r1, r3, #27
 8006ddc:	d407      	bmi.n	8006dee <__swsetup_r+0x32>
 8006dde:	2309      	movs	r3, #9
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006de6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dea:	81a3      	strh	r3, [r4, #12]
 8006dec:	e034      	b.n	8006e58 <__swsetup_r+0x9c>
 8006dee:	0758      	lsls	r0, r3, #29
 8006df0:	d512      	bpl.n	8006e18 <__swsetup_r+0x5c>
 8006df2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006df4:	b141      	cbz	r1, 8006e08 <__swsetup_r+0x4c>
 8006df6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dfa:	4299      	cmp	r1, r3
 8006dfc:	d002      	beq.n	8006e04 <__swsetup_r+0x48>
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 ff3e 	bl	8007c80 <_free_r>
 8006e04:	2300      	movs	r3, #0
 8006e06:	6363      	str	r3, [r4, #52]	; 0x34
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	2300      	movs	r3, #0
 8006e12:	6063      	str	r3, [r4, #4]
 8006e14:	6923      	ldr	r3, [r4, #16]
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	f043 0308 	orr.w	r3, r3, #8
 8006e1e:	81a3      	strh	r3, [r4, #12]
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	b94b      	cbnz	r3, 8006e38 <__swsetup_r+0x7c>
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e2e:	d003      	beq.n	8006e38 <__swsetup_r+0x7c>
 8006e30:	4621      	mov	r1, r4
 8006e32:	4628      	mov	r0, r5
 8006e34:	f001 ff01 	bl	8008c3a <__smakebuf_r>
 8006e38:	89a0      	ldrh	r0, [r4, #12]
 8006e3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e3e:	f010 0301 	ands.w	r3, r0, #1
 8006e42:	d00a      	beq.n	8006e5a <__swsetup_r+0x9e>
 8006e44:	2300      	movs	r3, #0
 8006e46:	60a3      	str	r3, [r4, #8]
 8006e48:	6963      	ldr	r3, [r4, #20]
 8006e4a:	425b      	negs	r3, r3
 8006e4c:	61a3      	str	r3, [r4, #24]
 8006e4e:	6923      	ldr	r3, [r4, #16]
 8006e50:	b943      	cbnz	r3, 8006e64 <__swsetup_r+0xa8>
 8006e52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e56:	d1c4      	bne.n	8006de2 <__swsetup_r+0x26>
 8006e58:	bd38      	pop	{r3, r4, r5, pc}
 8006e5a:	0781      	lsls	r1, r0, #30
 8006e5c:	bf58      	it	pl
 8006e5e:	6963      	ldrpl	r3, [r4, #20]
 8006e60:	60a3      	str	r3, [r4, #8]
 8006e62:	e7f4      	b.n	8006e4e <__swsetup_r+0x92>
 8006e64:	2000      	movs	r0, #0
 8006e66:	e7f7      	b.n	8006e58 <__swsetup_r+0x9c>
 8006e68:	20000074 	.word	0x20000074

08006e6c <memset>:
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	4402      	add	r2, r0
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d100      	bne.n	8006e76 <memset+0xa>
 8006e74:	4770      	bx	lr
 8006e76:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7a:	e7f9      	b.n	8006e70 <memset+0x4>

08006e7c <_localeconv_r>:
 8006e7c:	4800      	ldr	r0, [pc, #0]	; (8006e80 <_localeconv_r+0x4>)
 8006e7e:	4770      	bx	lr
 8006e80:	20000168 	.word	0x20000168

08006e84 <_close_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	2300      	movs	r3, #0
 8006e88:	4d05      	ldr	r5, [pc, #20]	; (8006ea0 <_close_r+0x1c>)
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	602b      	str	r3, [r5, #0]
 8006e90:	f7fc f991 	bl	80031b6 <_close>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d102      	bne.n	8006e9e <_close_r+0x1a>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	b103      	cbz	r3, 8006e9e <_close_r+0x1a>
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	200008ec 	.word	0x200008ec

08006ea4 <_lseek_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	4608      	mov	r0, r1
 8006eaa:	4611      	mov	r1, r2
 8006eac:	2200      	movs	r2, #0
 8006eae:	4d05      	ldr	r5, [pc, #20]	; (8006ec4 <_lseek_r+0x20>)
 8006eb0:	602a      	str	r2, [r5, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f7fc f9a3 	bl	80031fe <_lseek>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d102      	bne.n	8006ec2 <_lseek_r+0x1e>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	b103      	cbz	r3, 8006ec2 <_lseek_r+0x1e>
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	200008ec 	.word	0x200008ec

08006ec8 <_read_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4604      	mov	r4, r0
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4d05      	ldr	r5, [pc, #20]	; (8006ee8 <_read_r+0x20>)
 8006ed4:	602a      	str	r2, [r5, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f7fc f950 	bl	800317c <_read>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d102      	bne.n	8006ee6 <_read_r+0x1e>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	b103      	cbz	r3, 8006ee6 <_read_r+0x1e>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	200008ec 	.word	0x200008ec

08006eec <_write_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4604      	mov	r4, r0
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4d05      	ldr	r5, [pc, #20]	; (8006f0c <_write_r+0x20>)
 8006ef8:	602a      	str	r2, [r5, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f7fc fa3e 	bl	800337c <_write>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d102      	bne.n	8006f0a <_write_r+0x1e>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	b103      	cbz	r3, 8006f0a <_write_r+0x1e>
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	200008ec 	.word	0x200008ec

08006f10 <__errno>:
 8006f10:	4b01      	ldr	r3, [pc, #4]	; (8006f18 <__errno+0x8>)
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000074 	.word	0x20000074

08006f1c <__libc_init_array>:
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	2600      	movs	r6, #0
 8006f20:	4d0c      	ldr	r5, [pc, #48]	; (8006f54 <__libc_init_array+0x38>)
 8006f22:	4c0d      	ldr	r4, [pc, #52]	; (8006f58 <__libc_init_array+0x3c>)
 8006f24:	1b64      	subs	r4, r4, r5
 8006f26:	10a4      	asrs	r4, r4, #2
 8006f28:	42a6      	cmp	r6, r4
 8006f2a:	d109      	bne.n	8006f40 <__libc_init_array+0x24>
 8006f2c:	f001 fff4 	bl	8008f18 <_init>
 8006f30:	2600      	movs	r6, #0
 8006f32:	4d0a      	ldr	r5, [pc, #40]	; (8006f5c <__libc_init_array+0x40>)
 8006f34:	4c0a      	ldr	r4, [pc, #40]	; (8006f60 <__libc_init_array+0x44>)
 8006f36:	1b64      	subs	r4, r4, r5
 8006f38:	10a4      	asrs	r4, r4, #2
 8006f3a:	42a6      	cmp	r6, r4
 8006f3c:	d105      	bne.n	8006f4a <__libc_init_array+0x2e>
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f44:	4798      	blx	r3
 8006f46:	3601      	adds	r6, #1
 8006f48:	e7ee      	b.n	8006f28 <__libc_init_array+0xc>
 8006f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4e:	4798      	blx	r3
 8006f50:	3601      	adds	r6, #1
 8006f52:	e7f2      	b.n	8006f3a <__libc_init_array+0x1e>
 8006f54:	0800aa24 	.word	0x0800aa24
 8006f58:	0800aa24 	.word	0x0800aa24
 8006f5c:	0800aa24 	.word	0x0800aa24
 8006f60:	0800aa28 	.word	0x0800aa28

08006f64 <__retarget_lock_acquire_recursive>:
 8006f64:	4770      	bx	lr

08006f66 <__retarget_lock_release_recursive>:
 8006f66:	4770      	bx	lr

08006f68 <memchr>:
 8006f68:	4603      	mov	r3, r0
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	b2c9      	uxtb	r1, r1
 8006f6e:	4402      	add	r2, r0
 8006f70:	4293      	cmp	r3, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	d101      	bne.n	8006f7a <memchr+0x12>
 8006f76:	2000      	movs	r0, #0
 8006f78:	e003      	b.n	8006f82 <memchr+0x1a>
 8006f7a:	7804      	ldrb	r4, [r0, #0]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	428c      	cmp	r4, r1
 8006f80:	d1f6      	bne.n	8006f70 <memchr+0x8>
 8006f82:	bd10      	pop	{r4, pc}

08006f84 <memcpy>:
 8006f84:	440a      	add	r2, r1
 8006f86:	4291      	cmp	r1, r2
 8006f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f8c:	d100      	bne.n	8006f90 <memcpy+0xc>
 8006f8e:	4770      	bx	lr
 8006f90:	b510      	push	{r4, lr}
 8006f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f96:	4291      	cmp	r1, r2
 8006f98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f9c:	d1f9      	bne.n	8006f92 <memcpy+0xe>
 8006f9e:	bd10      	pop	{r4, pc}

08006fa0 <quorem>:
 8006fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	6903      	ldr	r3, [r0, #16]
 8006fa6:	690c      	ldr	r4, [r1, #16]
 8006fa8:	4607      	mov	r7, r0
 8006faa:	42a3      	cmp	r3, r4
 8006fac:	db7f      	blt.n	80070ae <quorem+0x10e>
 8006fae:	3c01      	subs	r4, #1
 8006fb0:	f100 0514 	add.w	r5, r0, #20
 8006fb4:	f101 0814 	add.w	r8, r1, #20
 8006fb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006fd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fd6:	d331      	bcc.n	800703c <quorem+0x9c>
 8006fd8:	f04f 0e00 	mov.w	lr, #0
 8006fdc:	4640      	mov	r0, r8
 8006fde:	46ac      	mov	ip, r5
 8006fe0:	46f2      	mov	sl, lr
 8006fe2:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fe6:	b293      	uxth	r3, r2
 8006fe8:	fb06 e303 	mla	r3, r6, r3, lr
 8006fec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ff0:	0c1a      	lsrs	r2, r3, #16
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	fb06 220e 	mla	r2, r6, lr, r2
 8006ff8:	ebaa 0303 	sub.w	r3, sl, r3
 8006ffc:	f8dc a000 	ldr.w	sl, [ip]
 8007000:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007004:	fa1f fa8a 	uxth.w	sl, sl
 8007008:	4453      	add	r3, sl
 800700a:	f8dc a000 	ldr.w	sl, [ip]
 800700e:	b292      	uxth	r2, r2
 8007010:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007018:	b29b      	uxth	r3, r3
 800701a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800701e:	4581      	cmp	r9, r0
 8007020:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007024:	f84c 3b04 	str.w	r3, [ip], #4
 8007028:	d2db      	bcs.n	8006fe2 <quorem+0x42>
 800702a:	f855 300b 	ldr.w	r3, [r5, fp]
 800702e:	b92b      	cbnz	r3, 800703c <quorem+0x9c>
 8007030:	9b01      	ldr	r3, [sp, #4]
 8007032:	3b04      	subs	r3, #4
 8007034:	429d      	cmp	r5, r3
 8007036:	461a      	mov	r2, r3
 8007038:	d32d      	bcc.n	8007096 <quorem+0xf6>
 800703a:	613c      	str	r4, [r7, #16]
 800703c:	4638      	mov	r0, r7
 800703e:	f001 f995 	bl	800836c <__mcmp>
 8007042:	2800      	cmp	r0, #0
 8007044:	db23      	blt.n	800708e <quorem+0xee>
 8007046:	4629      	mov	r1, r5
 8007048:	2000      	movs	r0, #0
 800704a:	3601      	adds	r6, #1
 800704c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007050:	f8d1 c000 	ldr.w	ip, [r1]
 8007054:	b293      	uxth	r3, r2
 8007056:	1ac3      	subs	r3, r0, r3
 8007058:	0c12      	lsrs	r2, r2, #16
 800705a:	fa1f f08c 	uxth.w	r0, ip
 800705e:	4403      	add	r3, r0
 8007060:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007068:	b29b      	uxth	r3, r3
 800706a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800706e:	45c1      	cmp	r9, r8
 8007070:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007074:	f841 3b04 	str.w	r3, [r1], #4
 8007078:	d2e8      	bcs.n	800704c <quorem+0xac>
 800707a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800707e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007082:	b922      	cbnz	r2, 800708e <quorem+0xee>
 8007084:	3b04      	subs	r3, #4
 8007086:	429d      	cmp	r5, r3
 8007088:	461a      	mov	r2, r3
 800708a:	d30a      	bcc.n	80070a2 <quorem+0x102>
 800708c:	613c      	str	r4, [r7, #16]
 800708e:	4630      	mov	r0, r6
 8007090:	b003      	add	sp, #12
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007096:	6812      	ldr	r2, [r2, #0]
 8007098:	3b04      	subs	r3, #4
 800709a:	2a00      	cmp	r2, #0
 800709c:	d1cd      	bne.n	800703a <quorem+0x9a>
 800709e:	3c01      	subs	r4, #1
 80070a0:	e7c8      	b.n	8007034 <quorem+0x94>
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	3b04      	subs	r3, #4
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	d1f0      	bne.n	800708c <quorem+0xec>
 80070aa:	3c01      	subs	r4, #1
 80070ac:	e7eb      	b.n	8007086 <quorem+0xe6>
 80070ae:	2000      	movs	r0, #0
 80070b0:	e7ee      	b.n	8007090 <quorem+0xf0>
 80070b2:	0000      	movs	r0, r0
 80070b4:	0000      	movs	r0, r0
	...

080070b8 <_dtoa_r>:
 80070b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070bc:	4616      	mov	r6, r2
 80070be:	461f      	mov	r7, r3
 80070c0:	69c4      	ldr	r4, [r0, #28]
 80070c2:	b099      	sub	sp, #100	; 0x64
 80070c4:	4605      	mov	r5, r0
 80070c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80070ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80070ce:	b974      	cbnz	r4, 80070ee <_dtoa_r+0x36>
 80070d0:	2010      	movs	r0, #16
 80070d2:	f000 fe1d 	bl	8007d10 <malloc>
 80070d6:	4602      	mov	r2, r0
 80070d8:	61e8      	str	r0, [r5, #28]
 80070da:	b920      	cbnz	r0, 80070e6 <_dtoa_r+0x2e>
 80070dc:	21ef      	movs	r1, #239	; 0xef
 80070de:	4bac      	ldr	r3, [pc, #688]	; (8007390 <_dtoa_r+0x2d8>)
 80070e0:	48ac      	ldr	r0, [pc, #688]	; (8007394 <_dtoa_r+0x2dc>)
 80070e2:	f001 fe33 	bl	8008d4c <__assert_func>
 80070e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070ea:	6004      	str	r4, [r0, #0]
 80070ec:	60c4      	str	r4, [r0, #12]
 80070ee:	69eb      	ldr	r3, [r5, #28]
 80070f0:	6819      	ldr	r1, [r3, #0]
 80070f2:	b151      	cbz	r1, 800710a <_dtoa_r+0x52>
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	2301      	movs	r3, #1
 80070f8:	4093      	lsls	r3, r2
 80070fa:	604a      	str	r2, [r1, #4]
 80070fc:	608b      	str	r3, [r1, #8]
 80070fe:	4628      	mov	r0, r5
 8007100:	f000 fefa 	bl	8007ef8 <_Bfree>
 8007104:	2200      	movs	r2, #0
 8007106:	69eb      	ldr	r3, [r5, #28]
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	1e3b      	subs	r3, r7, #0
 800710c:	bfaf      	iteee	ge
 800710e:	2300      	movge	r3, #0
 8007110:	2201      	movlt	r2, #1
 8007112:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007116:	9305      	strlt	r3, [sp, #20]
 8007118:	bfa8      	it	ge
 800711a:	f8c8 3000 	strge.w	r3, [r8]
 800711e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007122:	4b9d      	ldr	r3, [pc, #628]	; (8007398 <_dtoa_r+0x2e0>)
 8007124:	bfb8      	it	lt
 8007126:	f8c8 2000 	strlt.w	r2, [r8]
 800712a:	ea33 0309 	bics.w	r3, r3, r9
 800712e:	d119      	bne.n	8007164 <_dtoa_r+0xac>
 8007130:	f242 730f 	movw	r3, #9999	; 0x270f
 8007134:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800713c:	4333      	orrs	r3, r6
 800713e:	f000 8589 	beq.w	8007c54 <_dtoa_r+0xb9c>
 8007142:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007144:	b953      	cbnz	r3, 800715c <_dtoa_r+0xa4>
 8007146:	4b95      	ldr	r3, [pc, #596]	; (800739c <_dtoa_r+0x2e4>)
 8007148:	e023      	b.n	8007192 <_dtoa_r+0xda>
 800714a:	4b95      	ldr	r3, [pc, #596]	; (80073a0 <_dtoa_r+0x2e8>)
 800714c:	9303      	str	r3, [sp, #12]
 800714e:	3308      	adds	r3, #8
 8007150:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	9803      	ldr	r0, [sp, #12]
 8007156:	b019      	add	sp, #100	; 0x64
 8007158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715c:	4b8f      	ldr	r3, [pc, #572]	; (800739c <_dtoa_r+0x2e4>)
 800715e:	9303      	str	r3, [sp, #12]
 8007160:	3303      	adds	r3, #3
 8007162:	e7f5      	b.n	8007150 <_dtoa_r+0x98>
 8007164:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007168:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800716c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007170:	2200      	movs	r2, #0
 8007172:	2300      	movs	r3, #0
 8007174:	f7f9 fc18 	bl	80009a8 <__aeabi_dcmpeq>
 8007178:	4680      	mov	r8, r0
 800717a:	b160      	cbz	r0, 8007196 <_dtoa_r+0xde>
 800717c:	2301      	movs	r3, #1
 800717e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8562 	beq.w	8007c4e <_dtoa_r+0xb96>
 800718a:	4b86      	ldr	r3, [pc, #536]	; (80073a4 <_dtoa_r+0x2ec>)
 800718c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	3b01      	subs	r3, #1
 8007192:	9303      	str	r3, [sp, #12]
 8007194:	e7de      	b.n	8007154 <_dtoa_r+0x9c>
 8007196:	ab16      	add	r3, sp, #88	; 0x58
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	ab17      	add	r3, sp, #92	; 0x5c
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	4628      	mov	r0, r5
 80071a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80071a4:	f001 f98a 	bl	80084bc <__d2b>
 80071a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80071ac:	4682      	mov	sl, r0
 80071ae:	2c00      	cmp	r4, #0
 80071b0:	d07e      	beq.n	80072b0 <_dtoa_r+0x1f8>
 80071b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80071bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071c0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80071c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80071c8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80071cc:	4619      	mov	r1, r3
 80071ce:	2200      	movs	r2, #0
 80071d0:	4b75      	ldr	r3, [pc, #468]	; (80073a8 <_dtoa_r+0x2f0>)
 80071d2:	f7f8 ffc9 	bl	8000168 <__aeabi_dsub>
 80071d6:	a368      	add	r3, pc, #416	; (adr r3, 8007378 <_dtoa_r+0x2c0>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f7f9 f97c 	bl	80004d8 <__aeabi_dmul>
 80071e0:	a367      	add	r3, pc, #412	; (adr r3, 8007380 <_dtoa_r+0x2c8>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	f7f8 ffc1 	bl	800016c <__adddf3>
 80071ea:	4606      	mov	r6, r0
 80071ec:	4620      	mov	r0, r4
 80071ee:	460f      	mov	r7, r1
 80071f0:	f7f9 f908 	bl	8000404 <__aeabi_i2d>
 80071f4:	a364      	add	r3, pc, #400	; (adr r3, 8007388 <_dtoa_r+0x2d0>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	f7f9 f96d 	bl	80004d8 <__aeabi_dmul>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	4630      	mov	r0, r6
 8007204:	4639      	mov	r1, r7
 8007206:	f7f8 ffb1 	bl	800016c <__adddf3>
 800720a:	4606      	mov	r6, r0
 800720c:	460f      	mov	r7, r1
 800720e:	f7f9 fc13 	bl	8000a38 <__aeabi_d2iz>
 8007212:	2200      	movs	r2, #0
 8007214:	4683      	mov	fp, r0
 8007216:	2300      	movs	r3, #0
 8007218:	4630      	mov	r0, r6
 800721a:	4639      	mov	r1, r7
 800721c:	f7f9 fbce 	bl	80009bc <__aeabi_dcmplt>
 8007220:	b148      	cbz	r0, 8007236 <_dtoa_r+0x17e>
 8007222:	4658      	mov	r0, fp
 8007224:	f7f9 f8ee 	bl	8000404 <__aeabi_i2d>
 8007228:	4632      	mov	r2, r6
 800722a:	463b      	mov	r3, r7
 800722c:	f7f9 fbbc 	bl	80009a8 <__aeabi_dcmpeq>
 8007230:	b908      	cbnz	r0, 8007236 <_dtoa_r+0x17e>
 8007232:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007236:	f1bb 0f16 	cmp.w	fp, #22
 800723a:	d857      	bhi.n	80072ec <_dtoa_r+0x234>
 800723c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007240:	4b5a      	ldr	r3, [pc, #360]	; (80073ac <_dtoa_r+0x2f4>)
 8007242:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724a:	f7f9 fbb7 	bl	80009bc <__aeabi_dcmplt>
 800724e:	2800      	cmp	r0, #0
 8007250:	d04e      	beq.n	80072f0 <_dtoa_r+0x238>
 8007252:	2300      	movs	r3, #0
 8007254:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007258:	930f      	str	r3, [sp, #60]	; 0x3c
 800725a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800725c:	1b1b      	subs	r3, r3, r4
 800725e:	1e5a      	subs	r2, r3, #1
 8007260:	bf46      	itte	mi
 8007262:	f1c3 0901 	rsbmi	r9, r3, #1
 8007266:	2300      	movmi	r3, #0
 8007268:	f04f 0900 	movpl.w	r9, #0
 800726c:	9209      	str	r2, [sp, #36]	; 0x24
 800726e:	bf48      	it	mi
 8007270:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007272:	f1bb 0f00 	cmp.w	fp, #0
 8007276:	db3d      	blt.n	80072f4 <_dtoa_r+0x23c>
 8007278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800727a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800727e:	445b      	add	r3, fp
 8007280:	9309      	str	r3, [sp, #36]	; 0x24
 8007282:	2300      	movs	r3, #0
 8007284:	930a      	str	r3, [sp, #40]	; 0x28
 8007286:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007288:	2b09      	cmp	r3, #9
 800728a:	d867      	bhi.n	800735c <_dtoa_r+0x2a4>
 800728c:	2b05      	cmp	r3, #5
 800728e:	bfc4      	itt	gt
 8007290:	3b04      	subgt	r3, #4
 8007292:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007294:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007296:	bfc8      	it	gt
 8007298:	2400      	movgt	r4, #0
 800729a:	f1a3 0302 	sub.w	r3, r3, #2
 800729e:	bfd8      	it	le
 80072a0:	2401      	movle	r4, #1
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	f200 8086 	bhi.w	80073b4 <_dtoa_r+0x2fc>
 80072a8:	e8df f003 	tbb	[pc, r3]
 80072ac:	5637392c 	.word	0x5637392c
 80072b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80072b4:	441c      	add	r4, r3
 80072b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	bfc1      	itttt	gt
 80072be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072c2:	fa09 f903 	lslgt.w	r9, r9, r3
 80072c6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80072ca:	fa26 f303 	lsrgt.w	r3, r6, r3
 80072ce:	bfd6      	itet	le
 80072d0:	f1c3 0320 	rsble	r3, r3, #32
 80072d4:	ea49 0003 	orrgt.w	r0, r9, r3
 80072d8:	fa06 f003 	lslle.w	r0, r6, r3
 80072dc:	f7f9 f882 	bl	80003e4 <__aeabi_ui2d>
 80072e0:	2201      	movs	r2, #1
 80072e2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80072e6:	3c01      	subs	r4, #1
 80072e8:	9213      	str	r2, [sp, #76]	; 0x4c
 80072ea:	e76f      	b.n	80071cc <_dtoa_r+0x114>
 80072ec:	2301      	movs	r3, #1
 80072ee:	e7b3      	b.n	8007258 <_dtoa_r+0x1a0>
 80072f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80072f2:	e7b2      	b.n	800725a <_dtoa_r+0x1a2>
 80072f4:	f1cb 0300 	rsb	r3, fp, #0
 80072f8:	930a      	str	r3, [sp, #40]	; 0x28
 80072fa:	2300      	movs	r3, #0
 80072fc:	eba9 090b 	sub.w	r9, r9, fp
 8007300:	930e      	str	r3, [sp, #56]	; 0x38
 8007302:	e7c0      	b.n	8007286 <_dtoa_r+0x1ce>
 8007304:	2300      	movs	r3, #0
 8007306:	930b      	str	r3, [sp, #44]	; 0x2c
 8007308:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800730a:	2b00      	cmp	r3, #0
 800730c:	dc55      	bgt.n	80073ba <_dtoa_r+0x302>
 800730e:	2301      	movs	r3, #1
 8007310:	461a      	mov	r2, r3
 8007312:	9306      	str	r3, [sp, #24]
 8007314:	9308      	str	r3, [sp, #32]
 8007316:	9223      	str	r2, [sp, #140]	; 0x8c
 8007318:	e00b      	b.n	8007332 <_dtoa_r+0x27a>
 800731a:	2301      	movs	r3, #1
 800731c:	e7f3      	b.n	8007306 <_dtoa_r+0x24e>
 800731e:	2300      	movs	r3, #0
 8007320:	930b      	str	r3, [sp, #44]	; 0x2c
 8007322:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007324:	445b      	add	r3, fp
 8007326:	9306      	str	r3, [sp, #24]
 8007328:	3301      	adds	r3, #1
 800732a:	2b01      	cmp	r3, #1
 800732c:	9308      	str	r3, [sp, #32]
 800732e:	bfb8      	it	lt
 8007330:	2301      	movlt	r3, #1
 8007332:	2100      	movs	r1, #0
 8007334:	2204      	movs	r2, #4
 8007336:	69e8      	ldr	r0, [r5, #28]
 8007338:	f102 0614 	add.w	r6, r2, #20
 800733c:	429e      	cmp	r6, r3
 800733e:	d940      	bls.n	80073c2 <_dtoa_r+0x30a>
 8007340:	6041      	str	r1, [r0, #4]
 8007342:	4628      	mov	r0, r5
 8007344:	f000 fd98 	bl	8007e78 <_Balloc>
 8007348:	9003      	str	r0, [sp, #12]
 800734a:	2800      	cmp	r0, #0
 800734c:	d13c      	bne.n	80073c8 <_dtoa_r+0x310>
 800734e:	4602      	mov	r2, r0
 8007350:	f240 11af 	movw	r1, #431	; 0x1af
 8007354:	4b16      	ldr	r3, [pc, #88]	; (80073b0 <_dtoa_r+0x2f8>)
 8007356:	e6c3      	b.n	80070e0 <_dtoa_r+0x28>
 8007358:	2301      	movs	r3, #1
 800735a:	e7e1      	b.n	8007320 <_dtoa_r+0x268>
 800735c:	2401      	movs	r4, #1
 800735e:	2300      	movs	r3, #0
 8007360:	940b      	str	r4, [sp, #44]	; 0x2c
 8007362:	9322      	str	r3, [sp, #136]	; 0x88
 8007364:	f04f 33ff 	mov.w	r3, #4294967295
 8007368:	2200      	movs	r2, #0
 800736a:	9306      	str	r3, [sp, #24]
 800736c:	9308      	str	r3, [sp, #32]
 800736e:	2312      	movs	r3, #18
 8007370:	e7d1      	b.n	8007316 <_dtoa_r+0x25e>
 8007372:	bf00      	nop
 8007374:	f3af 8000 	nop.w
 8007378:	636f4361 	.word	0x636f4361
 800737c:	3fd287a7 	.word	0x3fd287a7
 8007380:	8b60c8b3 	.word	0x8b60c8b3
 8007384:	3fc68a28 	.word	0x3fc68a28
 8007388:	509f79fb 	.word	0x509f79fb
 800738c:	3fd34413 	.word	0x3fd34413
 8007390:	0800a6f5 	.word	0x0800a6f5
 8007394:	0800a70c 	.word	0x0800a70c
 8007398:	7ff00000 	.word	0x7ff00000
 800739c:	0800a6f1 	.word	0x0800a6f1
 80073a0:	0800a6e8 	.word	0x0800a6e8
 80073a4:	0800a6c5 	.word	0x0800a6c5
 80073a8:	3ff80000 	.word	0x3ff80000
 80073ac:	0800a7f8 	.word	0x0800a7f8
 80073b0:	0800a764 	.word	0x0800a764
 80073b4:	2301      	movs	r3, #1
 80073b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073b8:	e7d4      	b.n	8007364 <_dtoa_r+0x2ac>
 80073ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073bc:	9306      	str	r3, [sp, #24]
 80073be:	9308      	str	r3, [sp, #32]
 80073c0:	e7b7      	b.n	8007332 <_dtoa_r+0x27a>
 80073c2:	3101      	adds	r1, #1
 80073c4:	0052      	lsls	r2, r2, #1
 80073c6:	e7b7      	b.n	8007338 <_dtoa_r+0x280>
 80073c8:	69eb      	ldr	r3, [r5, #28]
 80073ca:	9a03      	ldr	r2, [sp, #12]
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	9b08      	ldr	r3, [sp, #32]
 80073d0:	2b0e      	cmp	r3, #14
 80073d2:	f200 80a8 	bhi.w	8007526 <_dtoa_r+0x46e>
 80073d6:	2c00      	cmp	r4, #0
 80073d8:	f000 80a5 	beq.w	8007526 <_dtoa_r+0x46e>
 80073dc:	f1bb 0f00 	cmp.w	fp, #0
 80073e0:	dd34      	ble.n	800744c <_dtoa_r+0x394>
 80073e2:	4b9a      	ldr	r3, [pc, #616]	; (800764c <_dtoa_r+0x594>)
 80073e4:	f00b 020f 	and.w	r2, fp, #15
 80073e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80073f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80073f8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80073fc:	d016      	beq.n	800742c <_dtoa_r+0x374>
 80073fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007402:	4b93      	ldr	r3, [pc, #588]	; (8007650 <_dtoa_r+0x598>)
 8007404:	2703      	movs	r7, #3
 8007406:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800740a:	f7f9 f98f 	bl	800072c <__aeabi_ddiv>
 800740e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007412:	f004 040f 	and.w	r4, r4, #15
 8007416:	4e8e      	ldr	r6, [pc, #568]	; (8007650 <_dtoa_r+0x598>)
 8007418:	b954      	cbnz	r4, 8007430 <_dtoa_r+0x378>
 800741a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800741e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007422:	f7f9 f983 	bl	800072c <__aeabi_ddiv>
 8007426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800742a:	e029      	b.n	8007480 <_dtoa_r+0x3c8>
 800742c:	2702      	movs	r7, #2
 800742e:	e7f2      	b.n	8007416 <_dtoa_r+0x35e>
 8007430:	07e1      	lsls	r1, r4, #31
 8007432:	d508      	bpl.n	8007446 <_dtoa_r+0x38e>
 8007434:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007438:	e9d6 2300 	ldrd	r2, r3, [r6]
 800743c:	f7f9 f84c 	bl	80004d8 <__aeabi_dmul>
 8007440:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007444:	3701      	adds	r7, #1
 8007446:	1064      	asrs	r4, r4, #1
 8007448:	3608      	adds	r6, #8
 800744a:	e7e5      	b.n	8007418 <_dtoa_r+0x360>
 800744c:	f000 80a5 	beq.w	800759a <_dtoa_r+0x4e2>
 8007450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007454:	f1cb 0400 	rsb	r4, fp, #0
 8007458:	4b7c      	ldr	r3, [pc, #496]	; (800764c <_dtoa_r+0x594>)
 800745a:	f004 020f 	and.w	r2, r4, #15
 800745e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f7f9 f837 	bl	80004d8 <__aeabi_dmul>
 800746a:	2702      	movs	r7, #2
 800746c:	2300      	movs	r3, #0
 800746e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007472:	4e77      	ldr	r6, [pc, #476]	; (8007650 <_dtoa_r+0x598>)
 8007474:	1124      	asrs	r4, r4, #4
 8007476:	2c00      	cmp	r4, #0
 8007478:	f040 8084 	bne.w	8007584 <_dtoa_r+0x4cc>
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1d2      	bne.n	8007426 <_dtoa_r+0x36e>
 8007480:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007484:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 8087 	beq.w	800759e <_dtoa_r+0x4e6>
 8007490:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007494:	2200      	movs	r2, #0
 8007496:	4b6f      	ldr	r3, [pc, #444]	; (8007654 <_dtoa_r+0x59c>)
 8007498:	f7f9 fa90 	bl	80009bc <__aeabi_dcmplt>
 800749c:	2800      	cmp	r0, #0
 800749e:	d07e      	beq.n	800759e <_dtoa_r+0x4e6>
 80074a0:	9b08      	ldr	r3, [sp, #32]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d07b      	beq.n	800759e <_dtoa_r+0x4e6>
 80074a6:	9b06      	ldr	r3, [sp, #24]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	dd38      	ble.n	800751e <_dtoa_r+0x466>
 80074ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074b0:	2200      	movs	r2, #0
 80074b2:	4b69      	ldr	r3, [pc, #420]	; (8007658 <_dtoa_r+0x5a0>)
 80074b4:	f7f9 f810 	bl	80004d8 <__aeabi_dmul>
 80074b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074bc:	9c06      	ldr	r4, [sp, #24]
 80074be:	f10b 38ff 	add.w	r8, fp, #4294967295
 80074c2:	3701      	adds	r7, #1
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7f8 ff9d 	bl	8000404 <__aeabi_i2d>
 80074ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074ce:	f7f9 f803 	bl	80004d8 <__aeabi_dmul>
 80074d2:	2200      	movs	r2, #0
 80074d4:	4b61      	ldr	r3, [pc, #388]	; (800765c <_dtoa_r+0x5a4>)
 80074d6:	f7f8 fe49 	bl	800016c <__adddf3>
 80074da:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80074de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80074e2:	9611      	str	r6, [sp, #68]	; 0x44
 80074e4:	2c00      	cmp	r4, #0
 80074e6:	d15d      	bne.n	80075a4 <_dtoa_r+0x4ec>
 80074e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ec:	2200      	movs	r2, #0
 80074ee:	4b5c      	ldr	r3, [pc, #368]	; (8007660 <_dtoa_r+0x5a8>)
 80074f0:	f7f8 fe3a 	bl	8000168 <__aeabi_dsub>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074fc:	4633      	mov	r3, r6
 80074fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007500:	f7f9 fa7a 	bl	80009f8 <__aeabi_dcmpgt>
 8007504:	2800      	cmp	r0, #0
 8007506:	f040 8295 	bne.w	8007a34 <_dtoa_r+0x97c>
 800750a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800750e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007510:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007514:	f7f9 fa52 	bl	80009bc <__aeabi_dcmplt>
 8007518:	2800      	cmp	r0, #0
 800751a:	f040 8289 	bne.w	8007a30 <_dtoa_r+0x978>
 800751e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007522:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007528:	2b00      	cmp	r3, #0
 800752a:	f2c0 8151 	blt.w	80077d0 <_dtoa_r+0x718>
 800752e:	f1bb 0f0e 	cmp.w	fp, #14
 8007532:	f300 814d 	bgt.w	80077d0 <_dtoa_r+0x718>
 8007536:	4b45      	ldr	r3, [pc, #276]	; (800764c <_dtoa_r+0x594>)
 8007538:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800753c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007540:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007544:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007546:	2b00      	cmp	r3, #0
 8007548:	f280 80da 	bge.w	8007700 <_dtoa_r+0x648>
 800754c:	9b08      	ldr	r3, [sp, #32]
 800754e:	2b00      	cmp	r3, #0
 8007550:	f300 80d6 	bgt.w	8007700 <_dtoa_r+0x648>
 8007554:	f040 826b 	bne.w	8007a2e <_dtoa_r+0x976>
 8007558:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800755c:	2200      	movs	r2, #0
 800755e:	4b40      	ldr	r3, [pc, #256]	; (8007660 <_dtoa_r+0x5a8>)
 8007560:	f7f8 ffba 	bl	80004d8 <__aeabi_dmul>
 8007564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007568:	f7f9 fa3c 	bl	80009e4 <__aeabi_dcmpge>
 800756c:	9c08      	ldr	r4, [sp, #32]
 800756e:	4626      	mov	r6, r4
 8007570:	2800      	cmp	r0, #0
 8007572:	f040 8241 	bne.w	80079f8 <_dtoa_r+0x940>
 8007576:	2331      	movs	r3, #49	; 0x31
 8007578:	9f03      	ldr	r7, [sp, #12]
 800757a:	f10b 0b01 	add.w	fp, fp, #1
 800757e:	f807 3b01 	strb.w	r3, [r7], #1
 8007582:	e23d      	b.n	8007a00 <_dtoa_r+0x948>
 8007584:	07e2      	lsls	r2, r4, #31
 8007586:	d505      	bpl.n	8007594 <_dtoa_r+0x4dc>
 8007588:	e9d6 2300 	ldrd	r2, r3, [r6]
 800758c:	f7f8 ffa4 	bl	80004d8 <__aeabi_dmul>
 8007590:	2301      	movs	r3, #1
 8007592:	3701      	adds	r7, #1
 8007594:	1064      	asrs	r4, r4, #1
 8007596:	3608      	adds	r6, #8
 8007598:	e76d      	b.n	8007476 <_dtoa_r+0x3be>
 800759a:	2702      	movs	r7, #2
 800759c:	e770      	b.n	8007480 <_dtoa_r+0x3c8>
 800759e:	46d8      	mov	r8, fp
 80075a0:	9c08      	ldr	r4, [sp, #32]
 80075a2:	e78f      	b.n	80074c4 <_dtoa_r+0x40c>
 80075a4:	9903      	ldr	r1, [sp, #12]
 80075a6:	4b29      	ldr	r3, [pc, #164]	; (800764c <_dtoa_r+0x594>)
 80075a8:	4421      	add	r1, r4
 80075aa:	9112      	str	r1, [sp, #72]	; 0x48
 80075ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075b2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80075b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075ba:	2900      	cmp	r1, #0
 80075bc:	d054      	beq.n	8007668 <_dtoa_r+0x5b0>
 80075be:	2000      	movs	r0, #0
 80075c0:	4928      	ldr	r1, [pc, #160]	; (8007664 <_dtoa_r+0x5ac>)
 80075c2:	f7f9 f8b3 	bl	800072c <__aeabi_ddiv>
 80075c6:	463b      	mov	r3, r7
 80075c8:	4632      	mov	r2, r6
 80075ca:	f7f8 fdcd 	bl	8000168 <__aeabi_dsub>
 80075ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075d2:	9f03      	ldr	r7, [sp, #12]
 80075d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075d8:	f7f9 fa2e 	bl	8000a38 <__aeabi_d2iz>
 80075dc:	4604      	mov	r4, r0
 80075de:	f7f8 ff11 	bl	8000404 <__aeabi_i2d>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ea:	f7f8 fdbd 	bl	8000168 <__aeabi_dsub>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	3430      	adds	r4, #48	; 0x30
 80075f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075fc:	f807 4b01 	strb.w	r4, [r7], #1
 8007600:	f7f9 f9dc 	bl	80009bc <__aeabi_dcmplt>
 8007604:	2800      	cmp	r0, #0
 8007606:	d173      	bne.n	80076f0 <_dtoa_r+0x638>
 8007608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800760c:	2000      	movs	r0, #0
 800760e:	4911      	ldr	r1, [pc, #68]	; (8007654 <_dtoa_r+0x59c>)
 8007610:	f7f8 fdaa 	bl	8000168 <__aeabi_dsub>
 8007614:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007618:	f7f9 f9d0 	bl	80009bc <__aeabi_dcmplt>
 800761c:	2800      	cmp	r0, #0
 800761e:	f040 80b6 	bne.w	800778e <_dtoa_r+0x6d6>
 8007622:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007624:	429f      	cmp	r7, r3
 8007626:	f43f af7a 	beq.w	800751e <_dtoa_r+0x466>
 800762a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800762e:	2200      	movs	r2, #0
 8007630:	4b09      	ldr	r3, [pc, #36]	; (8007658 <_dtoa_r+0x5a0>)
 8007632:	f7f8 ff51 	bl	80004d8 <__aeabi_dmul>
 8007636:	2200      	movs	r2, #0
 8007638:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800763c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007640:	4b05      	ldr	r3, [pc, #20]	; (8007658 <_dtoa_r+0x5a0>)
 8007642:	f7f8 ff49 	bl	80004d8 <__aeabi_dmul>
 8007646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800764a:	e7c3      	b.n	80075d4 <_dtoa_r+0x51c>
 800764c:	0800a7f8 	.word	0x0800a7f8
 8007650:	0800a7d0 	.word	0x0800a7d0
 8007654:	3ff00000 	.word	0x3ff00000
 8007658:	40240000 	.word	0x40240000
 800765c:	401c0000 	.word	0x401c0000
 8007660:	40140000 	.word	0x40140000
 8007664:	3fe00000 	.word	0x3fe00000
 8007668:	4630      	mov	r0, r6
 800766a:	4639      	mov	r1, r7
 800766c:	f7f8 ff34 	bl	80004d8 <__aeabi_dmul>
 8007670:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007672:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007676:	9c03      	ldr	r4, [sp, #12]
 8007678:	9314      	str	r3, [sp, #80]	; 0x50
 800767a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800767e:	f7f9 f9db 	bl	8000a38 <__aeabi_d2iz>
 8007682:	9015      	str	r0, [sp, #84]	; 0x54
 8007684:	f7f8 febe 	bl	8000404 <__aeabi_i2d>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007690:	f7f8 fd6a 	bl	8000168 <__aeabi_dsub>
 8007694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007696:	4606      	mov	r6, r0
 8007698:	3330      	adds	r3, #48	; 0x30
 800769a:	f804 3b01 	strb.w	r3, [r4], #1
 800769e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076a0:	460f      	mov	r7, r1
 80076a2:	429c      	cmp	r4, r3
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	d124      	bne.n	80076f4 <_dtoa_r+0x63c>
 80076aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076ae:	4baf      	ldr	r3, [pc, #700]	; (800796c <_dtoa_r+0x8b4>)
 80076b0:	f7f8 fd5c 	bl	800016c <__adddf3>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	4630      	mov	r0, r6
 80076ba:	4639      	mov	r1, r7
 80076bc:	f7f9 f99c 	bl	80009f8 <__aeabi_dcmpgt>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d163      	bne.n	800778c <_dtoa_r+0x6d4>
 80076c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076c8:	2000      	movs	r0, #0
 80076ca:	49a8      	ldr	r1, [pc, #672]	; (800796c <_dtoa_r+0x8b4>)
 80076cc:	f7f8 fd4c 	bl	8000168 <__aeabi_dsub>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4630      	mov	r0, r6
 80076d6:	4639      	mov	r1, r7
 80076d8:	f7f9 f970 	bl	80009bc <__aeabi_dcmplt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	f43f af1e 	beq.w	800751e <_dtoa_r+0x466>
 80076e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80076e4:	1e7b      	subs	r3, r7, #1
 80076e6:	9314      	str	r3, [sp, #80]	; 0x50
 80076e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80076ec:	2b30      	cmp	r3, #48	; 0x30
 80076ee:	d0f8      	beq.n	80076e2 <_dtoa_r+0x62a>
 80076f0:	46c3      	mov	fp, r8
 80076f2:	e03b      	b.n	800776c <_dtoa_r+0x6b4>
 80076f4:	4b9e      	ldr	r3, [pc, #632]	; (8007970 <_dtoa_r+0x8b8>)
 80076f6:	f7f8 feef 	bl	80004d8 <__aeabi_dmul>
 80076fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076fe:	e7bc      	b.n	800767a <_dtoa_r+0x5c2>
 8007700:	9f03      	ldr	r7, [sp, #12]
 8007702:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800770a:	4640      	mov	r0, r8
 800770c:	4649      	mov	r1, r9
 800770e:	f7f9 f80d 	bl	800072c <__aeabi_ddiv>
 8007712:	f7f9 f991 	bl	8000a38 <__aeabi_d2iz>
 8007716:	4604      	mov	r4, r0
 8007718:	f7f8 fe74 	bl	8000404 <__aeabi_i2d>
 800771c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007720:	f7f8 feda 	bl	80004d8 <__aeabi_dmul>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4640      	mov	r0, r8
 800772a:	4649      	mov	r1, r9
 800772c:	f7f8 fd1c 	bl	8000168 <__aeabi_dsub>
 8007730:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007734:	f807 6b01 	strb.w	r6, [r7], #1
 8007738:	9e03      	ldr	r6, [sp, #12]
 800773a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800773e:	1bbe      	subs	r6, r7, r6
 8007740:	45b4      	cmp	ip, r6
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	d136      	bne.n	80077b6 <_dtoa_r+0x6fe>
 8007748:	f7f8 fd10 	bl	800016c <__adddf3>
 800774c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007750:	4680      	mov	r8, r0
 8007752:	4689      	mov	r9, r1
 8007754:	f7f9 f950 	bl	80009f8 <__aeabi_dcmpgt>
 8007758:	bb58      	cbnz	r0, 80077b2 <_dtoa_r+0x6fa>
 800775a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800775e:	4640      	mov	r0, r8
 8007760:	4649      	mov	r1, r9
 8007762:	f7f9 f921 	bl	80009a8 <__aeabi_dcmpeq>
 8007766:	b108      	cbz	r0, 800776c <_dtoa_r+0x6b4>
 8007768:	07e3      	lsls	r3, r4, #31
 800776a:	d422      	bmi.n	80077b2 <_dtoa_r+0x6fa>
 800776c:	4651      	mov	r1, sl
 800776e:	4628      	mov	r0, r5
 8007770:	f000 fbc2 	bl	8007ef8 <_Bfree>
 8007774:	2300      	movs	r3, #0
 8007776:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007778:	703b      	strb	r3, [r7, #0]
 800777a:	f10b 0301 	add.w	r3, fp, #1
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007782:	2b00      	cmp	r3, #0
 8007784:	f43f ace6 	beq.w	8007154 <_dtoa_r+0x9c>
 8007788:	601f      	str	r7, [r3, #0]
 800778a:	e4e3      	b.n	8007154 <_dtoa_r+0x9c>
 800778c:	4627      	mov	r7, r4
 800778e:	463b      	mov	r3, r7
 8007790:	461f      	mov	r7, r3
 8007792:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007796:	2a39      	cmp	r2, #57	; 0x39
 8007798:	d107      	bne.n	80077aa <_dtoa_r+0x6f2>
 800779a:	9a03      	ldr	r2, [sp, #12]
 800779c:	429a      	cmp	r2, r3
 800779e:	d1f7      	bne.n	8007790 <_dtoa_r+0x6d8>
 80077a0:	2230      	movs	r2, #48	; 0x30
 80077a2:	9903      	ldr	r1, [sp, #12]
 80077a4:	f108 0801 	add.w	r8, r8, #1
 80077a8:	700a      	strb	r2, [r1, #0]
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	3201      	adds	r2, #1
 80077ae:	701a      	strb	r2, [r3, #0]
 80077b0:	e79e      	b.n	80076f0 <_dtoa_r+0x638>
 80077b2:	46d8      	mov	r8, fp
 80077b4:	e7eb      	b.n	800778e <_dtoa_r+0x6d6>
 80077b6:	2200      	movs	r2, #0
 80077b8:	4b6d      	ldr	r3, [pc, #436]	; (8007970 <_dtoa_r+0x8b8>)
 80077ba:	f7f8 fe8d 	bl	80004d8 <__aeabi_dmul>
 80077be:	2200      	movs	r2, #0
 80077c0:	2300      	movs	r3, #0
 80077c2:	4680      	mov	r8, r0
 80077c4:	4689      	mov	r9, r1
 80077c6:	f7f9 f8ef 	bl	80009a8 <__aeabi_dcmpeq>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d09b      	beq.n	8007706 <_dtoa_r+0x64e>
 80077ce:	e7cd      	b.n	800776c <_dtoa_r+0x6b4>
 80077d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077d2:	2a00      	cmp	r2, #0
 80077d4:	f000 80c4 	beq.w	8007960 <_dtoa_r+0x8a8>
 80077d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80077da:	2a01      	cmp	r2, #1
 80077dc:	f300 80a8 	bgt.w	8007930 <_dtoa_r+0x878>
 80077e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	f000 80a0 	beq.w	8007928 <_dtoa_r+0x870>
 80077e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077ec:	464f      	mov	r7, r9
 80077ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f2:	2101      	movs	r1, #1
 80077f4:	441a      	add	r2, r3
 80077f6:	4628      	mov	r0, r5
 80077f8:	4499      	add	r9, r3
 80077fa:	9209      	str	r2, [sp, #36]	; 0x24
 80077fc:	f000 fc32 	bl	8008064 <__i2b>
 8007800:	4606      	mov	r6, r0
 8007802:	b15f      	cbz	r7, 800781c <_dtoa_r+0x764>
 8007804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007806:	2b00      	cmp	r3, #0
 8007808:	dd08      	ble.n	800781c <_dtoa_r+0x764>
 800780a:	42bb      	cmp	r3, r7
 800780c:	bfa8      	it	ge
 800780e:	463b      	movge	r3, r7
 8007810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007812:	eba9 0903 	sub.w	r9, r9, r3
 8007816:	1aff      	subs	r7, r7, r3
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	9309      	str	r3, [sp, #36]	; 0x24
 800781c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781e:	b1f3      	cbz	r3, 800785e <_dtoa_r+0x7a6>
 8007820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 80a0 	beq.w	8007968 <_dtoa_r+0x8b0>
 8007828:	2c00      	cmp	r4, #0
 800782a:	dd10      	ble.n	800784e <_dtoa_r+0x796>
 800782c:	4631      	mov	r1, r6
 800782e:	4622      	mov	r2, r4
 8007830:	4628      	mov	r0, r5
 8007832:	f000 fcd5 	bl	80081e0 <__pow5mult>
 8007836:	4652      	mov	r2, sl
 8007838:	4601      	mov	r1, r0
 800783a:	4606      	mov	r6, r0
 800783c:	4628      	mov	r0, r5
 800783e:	f000 fc27 	bl	8008090 <__multiply>
 8007842:	4680      	mov	r8, r0
 8007844:	4651      	mov	r1, sl
 8007846:	4628      	mov	r0, r5
 8007848:	f000 fb56 	bl	8007ef8 <_Bfree>
 800784c:	46c2      	mov	sl, r8
 800784e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007850:	1b1a      	subs	r2, r3, r4
 8007852:	d004      	beq.n	800785e <_dtoa_r+0x7a6>
 8007854:	4651      	mov	r1, sl
 8007856:	4628      	mov	r0, r5
 8007858:	f000 fcc2 	bl	80081e0 <__pow5mult>
 800785c:	4682      	mov	sl, r0
 800785e:	2101      	movs	r1, #1
 8007860:	4628      	mov	r0, r5
 8007862:	f000 fbff 	bl	8008064 <__i2b>
 8007866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007868:	4604      	mov	r4, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	f340 8082 	ble.w	8007974 <_dtoa_r+0x8bc>
 8007870:	461a      	mov	r2, r3
 8007872:	4601      	mov	r1, r0
 8007874:	4628      	mov	r0, r5
 8007876:	f000 fcb3 	bl	80081e0 <__pow5mult>
 800787a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800787c:	4604      	mov	r4, r0
 800787e:	2b01      	cmp	r3, #1
 8007880:	dd7b      	ble.n	800797a <_dtoa_r+0x8c2>
 8007882:	f04f 0800 	mov.w	r8, #0
 8007886:	6923      	ldr	r3, [r4, #16]
 8007888:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800788c:	6918      	ldr	r0, [r3, #16]
 800788e:	f000 fb9b 	bl	8007fc8 <__hi0bits>
 8007892:	f1c0 0020 	rsb	r0, r0, #32
 8007896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007898:	4418      	add	r0, r3
 800789a:	f010 001f 	ands.w	r0, r0, #31
 800789e:	f000 8092 	beq.w	80079c6 <_dtoa_r+0x90e>
 80078a2:	f1c0 0320 	rsb	r3, r0, #32
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	f340 8085 	ble.w	80079b6 <_dtoa_r+0x8fe>
 80078ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ae:	f1c0 001c 	rsb	r0, r0, #28
 80078b2:	4403      	add	r3, r0
 80078b4:	4481      	add	r9, r0
 80078b6:	4407      	add	r7, r0
 80078b8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ba:	f1b9 0f00 	cmp.w	r9, #0
 80078be:	dd05      	ble.n	80078cc <_dtoa_r+0x814>
 80078c0:	4651      	mov	r1, sl
 80078c2:	464a      	mov	r2, r9
 80078c4:	4628      	mov	r0, r5
 80078c6:	f000 fce5 	bl	8008294 <__lshift>
 80078ca:	4682      	mov	sl, r0
 80078cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dd05      	ble.n	80078de <_dtoa_r+0x826>
 80078d2:	4621      	mov	r1, r4
 80078d4:	461a      	mov	r2, r3
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 fcdc 	bl	8008294 <__lshift>
 80078dc:	4604      	mov	r4, r0
 80078de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d072      	beq.n	80079ca <_dtoa_r+0x912>
 80078e4:	4621      	mov	r1, r4
 80078e6:	4650      	mov	r0, sl
 80078e8:	f000 fd40 	bl	800836c <__mcmp>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	da6c      	bge.n	80079ca <_dtoa_r+0x912>
 80078f0:	2300      	movs	r3, #0
 80078f2:	4651      	mov	r1, sl
 80078f4:	220a      	movs	r2, #10
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 fb20 	bl	8007f3c <__multadd>
 80078fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078fe:	4682      	mov	sl, r0
 8007900:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 81ac 	beq.w	8007c62 <_dtoa_r+0xbaa>
 800790a:	2300      	movs	r3, #0
 800790c:	4631      	mov	r1, r6
 800790e:	220a      	movs	r2, #10
 8007910:	4628      	mov	r0, r5
 8007912:	f000 fb13 	bl	8007f3c <__multadd>
 8007916:	9b06      	ldr	r3, [sp, #24]
 8007918:	4606      	mov	r6, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	f300 8093 	bgt.w	8007a46 <_dtoa_r+0x98e>
 8007920:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007922:	2b02      	cmp	r3, #2
 8007924:	dc59      	bgt.n	80079da <_dtoa_r+0x922>
 8007926:	e08e      	b.n	8007a46 <_dtoa_r+0x98e>
 8007928:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800792a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800792e:	e75d      	b.n	80077ec <_dtoa_r+0x734>
 8007930:	9b08      	ldr	r3, [sp, #32]
 8007932:	1e5c      	subs	r4, r3, #1
 8007934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007936:	42a3      	cmp	r3, r4
 8007938:	bfbf      	itttt	lt
 800793a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800793c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800793e:	1ae3      	sublt	r3, r4, r3
 8007940:	18d2      	addlt	r2, r2, r3
 8007942:	bfa8      	it	ge
 8007944:	1b1c      	subge	r4, r3, r4
 8007946:	9b08      	ldr	r3, [sp, #32]
 8007948:	bfbe      	ittt	lt
 800794a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800794c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800794e:	2400      	movlt	r4, #0
 8007950:	2b00      	cmp	r3, #0
 8007952:	bfb5      	itete	lt
 8007954:	eba9 0703 	sublt.w	r7, r9, r3
 8007958:	464f      	movge	r7, r9
 800795a:	2300      	movlt	r3, #0
 800795c:	9b08      	ldrge	r3, [sp, #32]
 800795e:	e747      	b.n	80077f0 <_dtoa_r+0x738>
 8007960:	464f      	mov	r7, r9
 8007962:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007964:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007966:	e74c      	b.n	8007802 <_dtoa_r+0x74a>
 8007968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800796a:	e773      	b.n	8007854 <_dtoa_r+0x79c>
 800796c:	3fe00000 	.word	0x3fe00000
 8007970:	40240000 	.word	0x40240000
 8007974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007976:	2b01      	cmp	r3, #1
 8007978:	dc18      	bgt.n	80079ac <_dtoa_r+0x8f4>
 800797a:	9b04      	ldr	r3, [sp, #16]
 800797c:	b9b3      	cbnz	r3, 80079ac <_dtoa_r+0x8f4>
 800797e:	9b05      	ldr	r3, [sp, #20]
 8007980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007984:	b993      	cbnz	r3, 80079ac <_dtoa_r+0x8f4>
 8007986:	9b05      	ldr	r3, [sp, #20]
 8007988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800798c:	0d1b      	lsrs	r3, r3, #20
 800798e:	051b      	lsls	r3, r3, #20
 8007990:	b17b      	cbz	r3, 80079b2 <_dtoa_r+0x8fa>
 8007992:	f04f 0801 	mov.w	r8, #1
 8007996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007998:	f109 0901 	add.w	r9, r9, #1
 800799c:	3301      	adds	r3, #1
 800799e:	9309      	str	r3, [sp, #36]	; 0x24
 80079a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f47f af6f 	bne.w	8007886 <_dtoa_r+0x7ce>
 80079a8:	2001      	movs	r0, #1
 80079aa:	e774      	b.n	8007896 <_dtoa_r+0x7de>
 80079ac:	f04f 0800 	mov.w	r8, #0
 80079b0:	e7f6      	b.n	80079a0 <_dtoa_r+0x8e8>
 80079b2:	4698      	mov	r8, r3
 80079b4:	e7f4      	b.n	80079a0 <_dtoa_r+0x8e8>
 80079b6:	d080      	beq.n	80078ba <_dtoa_r+0x802>
 80079b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079ba:	331c      	adds	r3, #28
 80079bc:	441a      	add	r2, r3
 80079be:	4499      	add	r9, r3
 80079c0:	441f      	add	r7, r3
 80079c2:	9209      	str	r2, [sp, #36]	; 0x24
 80079c4:	e779      	b.n	80078ba <_dtoa_r+0x802>
 80079c6:	4603      	mov	r3, r0
 80079c8:	e7f6      	b.n	80079b8 <_dtoa_r+0x900>
 80079ca:	9b08      	ldr	r3, [sp, #32]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dc34      	bgt.n	8007a3a <_dtoa_r+0x982>
 80079d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	dd31      	ble.n	8007a3a <_dtoa_r+0x982>
 80079d6:	9b08      	ldr	r3, [sp, #32]
 80079d8:	9306      	str	r3, [sp, #24]
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	b963      	cbnz	r3, 80079f8 <_dtoa_r+0x940>
 80079de:	4621      	mov	r1, r4
 80079e0:	2205      	movs	r2, #5
 80079e2:	4628      	mov	r0, r5
 80079e4:	f000 faaa 	bl	8007f3c <__multadd>
 80079e8:	4601      	mov	r1, r0
 80079ea:	4604      	mov	r4, r0
 80079ec:	4650      	mov	r0, sl
 80079ee:	f000 fcbd 	bl	800836c <__mcmp>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	f73f adbf 	bgt.w	8007576 <_dtoa_r+0x4be>
 80079f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079fa:	9f03      	ldr	r7, [sp, #12]
 80079fc:	ea6f 0b03 	mvn.w	fp, r3
 8007a00:	f04f 0800 	mov.w	r8, #0
 8007a04:	4621      	mov	r1, r4
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 fa76 	bl	8007ef8 <_Bfree>
 8007a0c:	2e00      	cmp	r6, #0
 8007a0e:	f43f aead 	beq.w	800776c <_dtoa_r+0x6b4>
 8007a12:	f1b8 0f00 	cmp.w	r8, #0
 8007a16:	d005      	beq.n	8007a24 <_dtoa_r+0x96c>
 8007a18:	45b0      	cmp	r8, r6
 8007a1a:	d003      	beq.n	8007a24 <_dtoa_r+0x96c>
 8007a1c:	4641      	mov	r1, r8
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 fa6a 	bl	8007ef8 <_Bfree>
 8007a24:	4631      	mov	r1, r6
 8007a26:	4628      	mov	r0, r5
 8007a28:	f000 fa66 	bl	8007ef8 <_Bfree>
 8007a2c:	e69e      	b.n	800776c <_dtoa_r+0x6b4>
 8007a2e:	2400      	movs	r4, #0
 8007a30:	4626      	mov	r6, r4
 8007a32:	e7e1      	b.n	80079f8 <_dtoa_r+0x940>
 8007a34:	46c3      	mov	fp, r8
 8007a36:	4626      	mov	r6, r4
 8007a38:	e59d      	b.n	8007576 <_dtoa_r+0x4be>
 8007a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 80c8 	beq.w	8007bd2 <_dtoa_r+0xb1a>
 8007a42:	9b08      	ldr	r3, [sp, #32]
 8007a44:	9306      	str	r3, [sp, #24]
 8007a46:	2f00      	cmp	r7, #0
 8007a48:	dd05      	ble.n	8007a56 <_dtoa_r+0x99e>
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	463a      	mov	r2, r7
 8007a4e:	4628      	mov	r0, r5
 8007a50:	f000 fc20 	bl	8008294 <__lshift>
 8007a54:	4606      	mov	r6, r0
 8007a56:	f1b8 0f00 	cmp.w	r8, #0
 8007a5a:	d05b      	beq.n	8007b14 <_dtoa_r+0xa5c>
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	6871      	ldr	r1, [r6, #4]
 8007a60:	f000 fa0a 	bl	8007e78 <_Balloc>
 8007a64:	4607      	mov	r7, r0
 8007a66:	b928      	cbnz	r0, 8007a74 <_dtoa_r+0x9bc>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007a6e:	4b81      	ldr	r3, [pc, #516]	; (8007c74 <_dtoa_r+0xbbc>)
 8007a70:	f7ff bb36 	b.w	80070e0 <_dtoa_r+0x28>
 8007a74:	6932      	ldr	r2, [r6, #16]
 8007a76:	f106 010c 	add.w	r1, r6, #12
 8007a7a:	3202      	adds	r2, #2
 8007a7c:	0092      	lsls	r2, r2, #2
 8007a7e:	300c      	adds	r0, #12
 8007a80:	f7ff fa80 	bl	8006f84 <memcpy>
 8007a84:	2201      	movs	r2, #1
 8007a86:	4639      	mov	r1, r7
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f000 fc03 	bl	8008294 <__lshift>
 8007a8e:	46b0      	mov	r8, r6
 8007a90:	4606      	mov	r6, r0
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	9a03      	ldr	r2, [sp, #12]
 8007a96:	3301      	adds	r3, #1
 8007a98:	9308      	str	r3, [sp, #32]
 8007a9a:	9b06      	ldr	r3, [sp, #24]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa0:	9b04      	ldr	r3, [sp, #16]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8007aa8:	9b08      	ldr	r3, [sp, #32]
 8007aaa:	4621      	mov	r1, r4
 8007aac:	3b01      	subs	r3, #1
 8007aae:	4650      	mov	r0, sl
 8007ab0:	9304      	str	r3, [sp, #16]
 8007ab2:	f7ff fa75 	bl	8006fa0 <quorem>
 8007ab6:	4641      	mov	r1, r8
 8007ab8:	9006      	str	r0, [sp, #24]
 8007aba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007abe:	4650      	mov	r0, sl
 8007ac0:	f000 fc54 	bl	800836c <__mcmp>
 8007ac4:	4632      	mov	r2, r6
 8007ac6:	9009      	str	r0, [sp, #36]	; 0x24
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4628      	mov	r0, r5
 8007acc:	f000 fc6a 	bl	80083a4 <__mdiff>
 8007ad0:	68c2      	ldr	r2, [r0, #12]
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	bb02      	cbnz	r2, 8007b18 <_dtoa_r+0xa60>
 8007ad6:	4601      	mov	r1, r0
 8007ad8:	4650      	mov	r0, sl
 8007ada:	f000 fc47 	bl	800836c <__mcmp>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	920c      	str	r2, [sp, #48]	; 0x30
 8007ae6:	f000 fa07 	bl	8007ef8 <_Bfree>
 8007aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aee:	9f08      	ldr	r7, [sp, #32]
 8007af0:	ea43 0102 	orr.w	r1, r3, r2
 8007af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af6:	4319      	orrs	r1, r3
 8007af8:	d110      	bne.n	8007b1c <_dtoa_r+0xa64>
 8007afa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007afe:	d029      	beq.n	8007b54 <_dtoa_r+0xa9c>
 8007b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	dd02      	ble.n	8007b0c <_dtoa_r+0xa54>
 8007b06:	9b06      	ldr	r3, [sp, #24]
 8007b08:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007b0c:	9b04      	ldr	r3, [sp, #16]
 8007b0e:	f883 9000 	strb.w	r9, [r3]
 8007b12:	e777      	b.n	8007a04 <_dtoa_r+0x94c>
 8007b14:	4630      	mov	r0, r6
 8007b16:	e7ba      	b.n	8007a8e <_dtoa_r+0x9d6>
 8007b18:	2201      	movs	r2, #1
 8007b1a:	e7e1      	b.n	8007ae0 <_dtoa_r+0xa28>
 8007b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	db04      	blt.n	8007b2c <_dtoa_r+0xa74>
 8007b22:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007b24:	430b      	orrs	r3, r1
 8007b26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	d120      	bne.n	8007b6e <_dtoa_r+0xab6>
 8007b2c:	2a00      	cmp	r2, #0
 8007b2e:	dded      	ble.n	8007b0c <_dtoa_r+0xa54>
 8007b30:	4651      	mov	r1, sl
 8007b32:	2201      	movs	r2, #1
 8007b34:	4628      	mov	r0, r5
 8007b36:	f000 fbad 	bl	8008294 <__lshift>
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	f000 fc15 	bl	800836c <__mcmp>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	dc03      	bgt.n	8007b4e <_dtoa_r+0xa96>
 8007b46:	d1e1      	bne.n	8007b0c <_dtoa_r+0xa54>
 8007b48:	f019 0f01 	tst.w	r9, #1
 8007b4c:	d0de      	beq.n	8007b0c <_dtoa_r+0xa54>
 8007b4e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b52:	d1d8      	bne.n	8007b06 <_dtoa_r+0xa4e>
 8007b54:	2339      	movs	r3, #57	; 0x39
 8007b56:	9a04      	ldr	r2, [sp, #16]
 8007b58:	7013      	strb	r3, [r2, #0]
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	461f      	mov	r7, r3
 8007b5e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	2a39      	cmp	r2, #57	; 0x39
 8007b66:	d06b      	beq.n	8007c40 <_dtoa_r+0xb88>
 8007b68:	3201      	adds	r2, #1
 8007b6a:	701a      	strb	r2, [r3, #0]
 8007b6c:	e74a      	b.n	8007a04 <_dtoa_r+0x94c>
 8007b6e:	2a00      	cmp	r2, #0
 8007b70:	dd07      	ble.n	8007b82 <_dtoa_r+0xaca>
 8007b72:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b76:	d0ed      	beq.n	8007b54 <_dtoa_r+0xa9c>
 8007b78:	9a04      	ldr	r2, [sp, #16]
 8007b7a:	f109 0301 	add.w	r3, r9, #1
 8007b7e:	7013      	strb	r3, [r2, #0]
 8007b80:	e740      	b.n	8007a04 <_dtoa_r+0x94c>
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b86:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d042      	beq.n	8007c14 <_dtoa_r+0xb5c>
 8007b8e:	4651      	mov	r1, sl
 8007b90:	2300      	movs	r3, #0
 8007b92:	220a      	movs	r2, #10
 8007b94:	4628      	mov	r0, r5
 8007b96:	f000 f9d1 	bl	8007f3c <__multadd>
 8007b9a:	45b0      	cmp	r8, r6
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	f04f 020a 	mov.w	r2, #10
 8007ba6:	4641      	mov	r1, r8
 8007ba8:	4628      	mov	r0, r5
 8007baa:	d107      	bne.n	8007bbc <_dtoa_r+0xb04>
 8007bac:	f000 f9c6 	bl	8007f3c <__multadd>
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	9b08      	ldr	r3, [sp, #32]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	9308      	str	r3, [sp, #32]
 8007bba:	e775      	b.n	8007aa8 <_dtoa_r+0x9f0>
 8007bbc:	f000 f9be 	bl	8007f3c <__multadd>
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4680      	mov	r8, r0
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	220a      	movs	r2, #10
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f000 f9b7 	bl	8007f3c <__multadd>
 8007bce:	4606      	mov	r6, r0
 8007bd0:	e7f0      	b.n	8007bb4 <_dtoa_r+0xafc>
 8007bd2:	9b08      	ldr	r3, [sp, #32]
 8007bd4:	9306      	str	r3, [sp, #24]
 8007bd6:	9f03      	ldr	r7, [sp, #12]
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4650      	mov	r0, sl
 8007bdc:	f7ff f9e0 	bl	8006fa0 <quorem>
 8007be0:	9b03      	ldr	r3, [sp, #12]
 8007be2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007be6:	f807 9b01 	strb.w	r9, [r7], #1
 8007bea:	1afa      	subs	r2, r7, r3
 8007bec:	9b06      	ldr	r3, [sp, #24]
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	dd07      	ble.n	8007c02 <_dtoa_r+0xb4a>
 8007bf2:	4651      	mov	r1, sl
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	220a      	movs	r2, #10
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 f99f 	bl	8007f3c <__multadd>
 8007bfe:	4682      	mov	sl, r0
 8007c00:	e7ea      	b.n	8007bd8 <_dtoa_r+0xb20>
 8007c02:	9b06      	ldr	r3, [sp, #24]
 8007c04:	f04f 0800 	mov.w	r8, #0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	bfcc      	ite	gt
 8007c0c:	461f      	movgt	r7, r3
 8007c0e:	2701      	movle	r7, #1
 8007c10:	9b03      	ldr	r3, [sp, #12]
 8007c12:	441f      	add	r7, r3
 8007c14:	4651      	mov	r1, sl
 8007c16:	2201      	movs	r2, #1
 8007c18:	4628      	mov	r0, r5
 8007c1a:	f000 fb3b 	bl	8008294 <__lshift>
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4682      	mov	sl, r0
 8007c22:	f000 fba3 	bl	800836c <__mcmp>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	dc97      	bgt.n	8007b5a <_dtoa_r+0xaa2>
 8007c2a:	d102      	bne.n	8007c32 <_dtoa_r+0xb7a>
 8007c2c:	f019 0f01 	tst.w	r9, #1
 8007c30:	d193      	bne.n	8007b5a <_dtoa_r+0xaa2>
 8007c32:	463b      	mov	r3, r7
 8007c34:	461f      	mov	r7, r3
 8007c36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c3a:	2a30      	cmp	r2, #48	; 0x30
 8007c3c:	d0fa      	beq.n	8007c34 <_dtoa_r+0xb7c>
 8007c3e:	e6e1      	b.n	8007a04 <_dtoa_r+0x94c>
 8007c40:	9a03      	ldr	r2, [sp, #12]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d18a      	bne.n	8007b5c <_dtoa_r+0xaa4>
 8007c46:	2331      	movs	r3, #49	; 0x31
 8007c48:	f10b 0b01 	add.w	fp, fp, #1
 8007c4c:	e797      	b.n	8007b7e <_dtoa_r+0xac6>
 8007c4e:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <_dtoa_r+0xbc0>)
 8007c50:	f7ff ba9f 	b.w	8007192 <_dtoa_r+0xda>
 8007c54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f47f aa77 	bne.w	800714a <_dtoa_r+0x92>
 8007c5c:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <_dtoa_r+0xbc4>)
 8007c5e:	f7ff ba98 	b.w	8007192 <_dtoa_r+0xda>
 8007c62:	9b06      	ldr	r3, [sp, #24]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	dcb6      	bgt.n	8007bd6 <_dtoa_r+0xb1e>
 8007c68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	f73f aeb5 	bgt.w	80079da <_dtoa_r+0x922>
 8007c70:	e7b1      	b.n	8007bd6 <_dtoa_r+0xb1e>
 8007c72:	bf00      	nop
 8007c74:	0800a764 	.word	0x0800a764
 8007c78:	0800a6c4 	.word	0x0800a6c4
 8007c7c:	0800a6e8 	.word	0x0800a6e8

08007c80 <_free_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4605      	mov	r5, r0
 8007c84:	2900      	cmp	r1, #0
 8007c86:	d040      	beq.n	8007d0a <_free_r+0x8a>
 8007c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8c:	1f0c      	subs	r4, r1, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bfb8      	it	lt
 8007c92:	18e4      	addlt	r4, r4, r3
 8007c94:	f000 f8e4 	bl	8007e60 <__malloc_lock>
 8007c98:	4a1c      	ldr	r2, [pc, #112]	; (8007d0c <_free_r+0x8c>)
 8007c9a:	6813      	ldr	r3, [r2, #0]
 8007c9c:	b933      	cbnz	r3, 8007cac <_free_r+0x2c>
 8007c9e:	6063      	str	r3, [r4, #4]
 8007ca0:	6014      	str	r4, [r2, #0]
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ca8:	f000 b8e0 	b.w	8007e6c <__malloc_unlock>
 8007cac:	42a3      	cmp	r3, r4
 8007cae:	d908      	bls.n	8007cc2 <_free_r+0x42>
 8007cb0:	6820      	ldr	r0, [r4, #0]
 8007cb2:	1821      	adds	r1, r4, r0
 8007cb4:	428b      	cmp	r3, r1
 8007cb6:	bf01      	itttt	eq
 8007cb8:	6819      	ldreq	r1, [r3, #0]
 8007cba:	685b      	ldreq	r3, [r3, #4]
 8007cbc:	1809      	addeq	r1, r1, r0
 8007cbe:	6021      	streq	r1, [r4, #0]
 8007cc0:	e7ed      	b.n	8007c9e <_free_r+0x1e>
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	b10b      	cbz	r3, 8007ccc <_free_r+0x4c>
 8007cc8:	42a3      	cmp	r3, r4
 8007cca:	d9fa      	bls.n	8007cc2 <_free_r+0x42>
 8007ccc:	6811      	ldr	r1, [r2, #0]
 8007cce:	1850      	adds	r0, r2, r1
 8007cd0:	42a0      	cmp	r0, r4
 8007cd2:	d10b      	bne.n	8007cec <_free_r+0x6c>
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	4401      	add	r1, r0
 8007cd8:	1850      	adds	r0, r2, r1
 8007cda:	4283      	cmp	r3, r0
 8007cdc:	6011      	str	r1, [r2, #0]
 8007cde:	d1e0      	bne.n	8007ca2 <_free_r+0x22>
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	4408      	add	r0, r1
 8007ce6:	6010      	str	r0, [r2, #0]
 8007ce8:	6053      	str	r3, [r2, #4]
 8007cea:	e7da      	b.n	8007ca2 <_free_r+0x22>
 8007cec:	d902      	bls.n	8007cf4 <_free_r+0x74>
 8007cee:	230c      	movs	r3, #12
 8007cf0:	602b      	str	r3, [r5, #0]
 8007cf2:	e7d6      	b.n	8007ca2 <_free_r+0x22>
 8007cf4:	6820      	ldr	r0, [r4, #0]
 8007cf6:	1821      	adds	r1, r4, r0
 8007cf8:	428b      	cmp	r3, r1
 8007cfa:	bf01      	itttt	eq
 8007cfc:	6819      	ldreq	r1, [r3, #0]
 8007cfe:	685b      	ldreq	r3, [r3, #4]
 8007d00:	1809      	addeq	r1, r1, r0
 8007d02:	6021      	streq	r1, [r4, #0]
 8007d04:	6063      	str	r3, [r4, #4]
 8007d06:	6054      	str	r4, [r2, #4]
 8007d08:	e7cb      	b.n	8007ca2 <_free_r+0x22>
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	200008f4 	.word	0x200008f4

08007d10 <malloc>:
 8007d10:	4b02      	ldr	r3, [pc, #8]	; (8007d1c <malloc+0xc>)
 8007d12:	4601      	mov	r1, r0
 8007d14:	6818      	ldr	r0, [r3, #0]
 8007d16:	f000 b823 	b.w	8007d60 <_malloc_r>
 8007d1a:	bf00      	nop
 8007d1c:	20000074 	.word	0x20000074

08007d20 <sbrk_aligned>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	4e0e      	ldr	r6, [pc, #56]	; (8007d5c <sbrk_aligned+0x3c>)
 8007d24:	460c      	mov	r4, r1
 8007d26:	6831      	ldr	r1, [r6, #0]
 8007d28:	4605      	mov	r5, r0
 8007d2a:	b911      	cbnz	r1, 8007d32 <sbrk_aligned+0x12>
 8007d2c:	f000 fffe 	bl	8008d2c <_sbrk_r>
 8007d30:	6030      	str	r0, [r6, #0]
 8007d32:	4621      	mov	r1, r4
 8007d34:	4628      	mov	r0, r5
 8007d36:	f000 fff9 	bl	8008d2c <_sbrk_r>
 8007d3a:	1c43      	adds	r3, r0, #1
 8007d3c:	d00a      	beq.n	8007d54 <sbrk_aligned+0x34>
 8007d3e:	1cc4      	adds	r4, r0, #3
 8007d40:	f024 0403 	bic.w	r4, r4, #3
 8007d44:	42a0      	cmp	r0, r4
 8007d46:	d007      	beq.n	8007d58 <sbrk_aligned+0x38>
 8007d48:	1a21      	subs	r1, r4, r0
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 ffee 	bl	8008d2c <_sbrk_r>
 8007d50:	3001      	adds	r0, #1
 8007d52:	d101      	bne.n	8007d58 <sbrk_aligned+0x38>
 8007d54:	f04f 34ff 	mov.w	r4, #4294967295
 8007d58:	4620      	mov	r0, r4
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}
 8007d5c:	200008f8 	.word	0x200008f8

08007d60 <_malloc_r>:
 8007d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d64:	1ccd      	adds	r5, r1, #3
 8007d66:	f025 0503 	bic.w	r5, r5, #3
 8007d6a:	3508      	adds	r5, #8
 8007d6c:	2d0c      	cmp	r5, #12
 8007d6e:	bf38      	it	cc
 8007d70:	250c      	movcc	r5, #12
 8007d72:	2d00      	cmp	r5, #0
 8007d74:	4607      	mov	r7, r0
 8007d76:	db01      	blt.n	8007d7c <_malloc_r+0x1c>
 8007d78:	42a9      	cmp	r1, r5
 8007d7a:	d905      	bls.n	8007d88 <_malloc_r+0x28>
 8007d7c:	230c      	movs	r3, #12
 8007d7e:	2600      	movs	r6, #0
 8007d80:	603b      	str	r3, [r7, #0]
 8007d82:	4630      	mov	r0, r6
 8007d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e5c <_malloc_r+0xfc>
 8007d8c:	f000 f868 	bl	8007e60 <__malloc_lock>
 8007d90:	f8d8 3000 	ldr.w	r3, [r8]
 8007d94:	461c      	mov	r4, r3
 8007d96:	bb5c      	cbnz	r4, 8007df0 <_malloc_r+0x90>
 8007d98:	4629      	mov	r1, r5
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	f7ff ffc0 	bl	8007d20 <sbrk_aligned>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	4604      	mov	r4, r0
 8007da4:	d155      	bne.n	8007e52 <_malloc_r+0xf2>
 8007da6:	f8d8 4000 	ldr.w	r4, [r8]
 8007daa:	4626      	mov	r6, r4
 8007dac:	2e00      	cmp	r6, #0
 8007dae:	d145      	bne.n	8007e3c <_malloc_r+0xdc>
 8007db0:	2c00      	cmp	r4, #0
 8007db2:	d048      	beq.n	8007e46 <_malloc_r+0xe6>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	4631      	mov	r1, r6
 8007db8:	4638      	mov	r0, r7
 8007dba:	eb04 0903 	add.w	r9, r4, r3
 8007dbe:	f000 ffb5 	bl	8008d2c <_sbrk_r>
 8007dc2:	4581      	cmp	r9, r0
 8007dc4:	d13f      	bne.n	8007e46 <_malloc_r+0xe6>
 8007dc6:	6821      	ldr	r1, [r4, #0]
 8007dc8:	4638      	mov	r0, r7
 8007dca:	1a6d      	subs	r5, r5, r1
 8007dcc:	4629      	mov	r1, r5
 8007dce:	f7ff ffa7 	bl	8007d20 <sbrk_aligned>
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	d037      	beq.n	8007e46 <_malloc_r+0xe6>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	442b      	add	r3, r5
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d038      	beq.n	8007e56 <_malloc_r+0xf6>
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	42a2      	cmp	r2, r4
 8007de8:	d12b      	bne.n	8007e42 <_malloc_r+0xe2>
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
 8007dee:	e00f      	b.n	8007e10 <_malloc_r+0xb0>
 8007df0:	6822      	ldr	r2, [r4, #0]
 8007df2:	1b52      	subs	r2, r2, r5
 8007df4:	d41f      	bmi.n	8007e36 <_malloc_r+0xd6>
 8007df6:	2a0b      	cmp	r2, #11
 8007df8:	d917      	bls.n	8007e2a <_malloc_r+0xca>
 8007dfa:	1961      	adds	r1, r4, r5
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	6025      	str	r5, [r4, #0]
 8007e00:	bf18      	it	ne
 8007e02:	6059      	strne	r1, [r3, #4]
 8007e04:	6863      	ldr	r3, [r4, #4]
 8007e06:	bf08      	it	eq
 8007e08:	f8c8 1000 	streq.w	r1, [r8]
 8007e0c:	5162      	str	r2, [r4, r5]
 8007e0e:	604b      	str	r3, [r1, #4]
 8007e10:	4638      	mov	r0, r7
 8007e12:	f104 060b 	add.w	r6, r4, #11
 8007e16:	f000 f829 	bl	8007e6c <__malloc_unlock>
 8007e1a:	f026 0607 	bic.w	r6, r6, #7
 8007e1e:	1d23      	adds	r3, r4, #4
 8007e20:	1af2      	subs	r2, r6, r3
 8007e22:	d0ae      	beq.n	8007d82 <_malloc_r+0x22>
 8007e24:	1b9b      	subs	r3, r3, r6
 8007e26:	50a3      	str	r3, [r4, r2]
 8007e28:	e7ab      	b.n	8007d82 <_malloc_r+0x22>
 8007e2a:	42a3      	cmp	r3, r4
 8007e2c:	6862      	ldr	r2, [r4, #4]
 8007e2e:	d1dd      	bne.n	8007dec <_malloc_r+0x8c>
 8007e30:	f8c8 2000 	str.w	r2, [r8]
 8007e34:	e7ec      	b.n	8007e10 <_malloc_r+0xb0>
 8007e36:	4623      	mov	r3, r4
 8007e38:	6864      	ldr	r4, [r4, #4]
 8007e3a:	e7ac      	b.n	8007d96 <_malloc_r+0x36>
 8007e3c:	4634      	mov	r4, r6
 8007e3e:	6876      	ldr	r6, [r6, #4]
 8007e40:	e7b4      	b.n	8007dac <_malloc_r+0x4c>
 8007e42:	4613      	mov	r3, r2
 8007e44:	e7cc      	b.n	8007de0 <_malloc_r+0x80>
 8007e46:	230c      	movs	r3, #12
 8007e48:	4638      	mov	r0, r7
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	f000 f80e 	bl	8007e6c <__malloc_unlock>
 8007e50:	e797      	b.n	8007d82 <_malloc_r+0x22>
 8007e52:	6025      	str	r5, [r4, #0]
 8007e54:	e7dc      	b.n	8007e10 <_malloc_r+0xb0>
 8007e56:	605b      	str	r3, [r3, #4]
 8007e58:	deff      	udf	#255	; 0xff
 8007e5a:	bf00      	nop
 8007e5c:	200008f4 	.word	0x200008f4

08007e60 <__malloc_lock>:
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <__malloc_lock+0x8>)
 8007e62:	f7ff b87f 	b.w	8006f64 <__retarget_lock_acquire_recursive>
 8007e66:	bf00      	nop
 8007e68:	200008f0 	.word	0x200008f0

08007e6c <__malloc_unlock>:
 8007e6c:	4801      	ldr	r0, [pc, #4]	; (8007e74 <__malloc_unlock+0x8>)
 8007e6e:	f7ff b87a 	b.w	8006f66 <__retarget_lock_release_recursive>
 8007e72:	bf00      	nop
 8007e74:	200008f0 	.word	0x200008f0

08007e78 <_Balloc>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	69c6      	ldr	r6, [r0, #28]
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	460d      	mov	r5, r1
 8007e80:	b976      	cbnz	r6, 8007ea0 <_Balloc+0x28>
 8007e82:	2010      	movs	r0, #16
 8007e84:	f7ff ff44 	bl	8007d10 <malloc>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	61e0      	str	r0, [r4, #28]
 8007e8c:	b920      	cbnz	r0, 8007e98 <_Balloc+0x20>
 8007e8e:	216b      	movs	r1, #107	; 0x6b
 8007e90:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <_Balloc+0x78>)
 8007e92:	4818      	ldr	r0, [pc, #96]	; (8007ef4 <_Balloc+0x7c>)
 8007e94:	f000 ff5a 	bl	8008d4c <__assert_func>
 8007e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e9c:	6006      	str	r6, [r0, #0]
 8007e9e:	60c6      	str	r6, [r0, #12]
 8007ea0:	69e6      	ldr	r6, [r4, #28]
 8007ea2:	68f3      	ldr	r3, [r6, #12]
 8007ea4:	b183      	cbz	r3, 8007ec8 <_Balloc+0x50>
 8007ea6:	69e3      	ldr	r3, [r4, #28]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007eae:	b9b8      	cbnz	r0, 8007ee0 <_Balloc+0x68>
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	fa01 f605 	lsl.w	r6, r1, r5
 8007eb6:	1d72      	adds	r2, r6, #5
 8007eb8:	4620      	mov	r0, r4
 8007eba:	0092      	lsls	r2, r2, #2
 8007ebc:	f000 ff64 	bl	8008d88 <_calloc_r>
 8007ec0:	b160      	cbz	r0, 8007edc <_Balloc+0x64>
 8007ec2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ec6:	e00e      	b.n	8007ee6 <_Balloc+0x6e>
 8007ec8:	2221      	movs	r2, #33	; 0x21
 8007eca:	2104      	movs	r1, #4
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 ff5b 	bl	8008d88 <_calloc_r>
 8007ed2:	69e3      	ldr	r3, [r4, #28]
 8007ed4:	60f0      	str	r0, [r6, #12]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e4      	bne.n	8007ea6 <_Balloc+0x2e>
 8007edc:	2000      	movs	r0, #0
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	6802      	ldr	r2, [r0, #0]
 8007ee2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007eec:	e7f7      	b.n	8007ede <_Balloc+0x66>
 8007eee:	bf00      	nop
 8007ef0:	0800a6f5 	.word	0x0800a6f5
 8007ef4:	0800a775 	.word	0x0800a775

08007ef8 <_Bfree>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	69c6      	ldr	r6, [r0, #28]
 8007efc:	4605      	mov	r5, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	b976      	cbnz	r6, 8007f20 <_Bfree+0x28>
 8007f02:	2010      	movs	r0, #16
 8007f04:	f7ff ff04 	bl	8007d10 <malloc>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	61e8      	str	r0, [r5, #28]
 8007f0c:	b920      	cbnz	r0, 8007f18 <_Bfree+0x20>
 8007f0e:	218f      	movs	r1, #143	; 0x8f
 8007f10:	4b08      	ldr	r3, [pc, #32]	; (8007f34 <_Bfree+0x3c>)
 8007f12:	4809      	ldr	r0, [pc, #36]	; (8007f38 <_Bfree+0x40>)
 8007f14:	f000 ff1a 	bl	8008d4c <__assert_func>
 8007f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f1c:	6006      	str	r6, [r0, #0]
 8007f1e:	60c6      	str	r6, [r0, #12]
 8007f20:	b13c      	cbz	r4, 8007f32 <_Bfree+0x3a>
 8007f22:	69eb      	ldr	r3, [r5, #28]
 8007f24:	6862      	ldr	r2, [r4, #4]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f2c:	6021      	str	r1, [r4, #0]
 8007f2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	0800a6f5 	.word	0x0800a6f5
 8007f38:	0800a775 	.word	0x0800a775

08007f3c <__multadd>:
 8007f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f40:	4607      	mov	r7, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	461e      	mov	r6, r3
 8007f46:	2000      	movs	r0, #0
 8007f48:	690d      	ldr	r5, [r1, #16]
 8007f4a:	f101 0c14 	add.w	ip, r1, #20
 8007f4e:	f8dc 3000 	ldr.w	r3, [ip]
 8007f52:	3001      	adds	r0, #1
 8007f54:	b299      	uxth	r1, r3
 8007f56:	fb02 6101 	mla	r1, r2, r1, r6
 8007f5a:	0c1e      	lsrs	r6, r3, #16
 8007f5c:	0c0b      	lsrs	r3, r1, #16
 8007f5e:	fb02 3306 	mla	r3, r2, r6, r3
 8007f62:	b289      	uxth	r1, r1
 8007f64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f68:	4285      	cmp	r5, r0
 8007f6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f6e:	f84c 1b04 	str.w	r1, [ip], #4
 8007f72:	dcec      	bgt.n	8007f4e <__multadd+0x12>
 8007f74:	b30e      	cbz	r6, 8007fba <__multadd+0x7e>
 8007f76:	68a3      	ldr	r3, [r4, #8]
 8007f78:	42ab      	cmp	r3, r5
 8007f7a:	dc19      	bgt.n	8007fb0 <__multadd+0x74>
 8007f7c:	6861      	ldr	r1, [r4, #4]
 8007f7e:	4638      	mov	r0, r7
 8007f80:	3101      	adds	r1, #1
 8007f82:	f7ff ff79 	bl	8007e78 <_Balloc>
 8007f86:	4680      	mov	r8, r0
 8007f88:	b928      	cbnz	r0, 8007f96 <__multadd+0x5a>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	21ba      	movs	r1, #186	; 0xba
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <__multadd+0x84>)
 8007f90:	480c      	ldr	r0, [pc, #48]	; (8007fc4 <__multadd+0x88>)
 8007f92:	f000 fedb 	bl	8008d4c <__assert_func>
 8007f96:	6922      	ldr	r2, [r4, #16]
 8007f98:	f104 010c 	add.w	r1, r4, #12
 8007f9c:	3202      	adds	r2, #2
 8007f9e:	0092      	lsls	r2, r2, #2
 8007fa0:	300c      	adds	r0, #12
 8007fa2:	f7fe ffef 	bl	8006f84 <memcpy>
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f7ff ffa5 	bl	8007ef8 <_Bfree>
 8007fae:	4644      	mov	r4, r8
 8007fb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fb4:	3501      	adds	r5, #1
 8007fb6:	615e      	str	r6, [r3, #20]
 8007fb8:	6125      	str	r5, [r4, #16]
 8007fba:	4620      	mov	r0, r4
 8007fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc0:	0800a764 	.word	0x0800a764
 8007fc4:	0800a775 	.word	0x0800a775

08007fc8 <__hi0bits>:
 8007fc8:	0c02      	lsrs	r2, r0, #16
 8007fca:	0412      	lsls	r2, r2, #16
 8007fcc:	4603      	mov	r3, r0
 8007fce:	b9ca      	cbnz	r2, 8008004 <__hi0bits+0x3c>
 8007fd0:	0403      	lsls	r3, r0, #16
 8007fd2:	2010      	movs	r0, #16
 8007fd4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007fd8:	bf04      	itt	eq
 8007fda:	021b      	lsleq	r3, r3, #8
 8007fdc:	3008      	addeq	r0, #8
 8007fde:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007fe2:	bf04      	itt	eq
 8007fe4:	011b      	lsleq	r3, r3, #4
 8007fe6:	3004      	addeq	r0, #4
 8007fe8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007fec:	bf04      	itt	eq
 8007fee:	009b      	lsleq	r3, r3, #2
 8007ff0:	3002      	addeq	r0, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	db05      	blt.n	8008002 <__hi0bits+0x3a>
 8007ff6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ffa:	f100 0001 	add.w	r0, r0, #1
 8007ffe:	bf08      	it	eq
 8008000:	2020      	moveq	r0, #32
 8008002:	4770      	bx	lr
 8008004:	2000      	movs	r0, #0
 8008006:	e7e5      	b.n	8007fd4 <__hi0bits+0xc>

08008008 <__lo0bits>:
 8008008:	6803      	ldr	r3, [r0, #0]
 800800a:	4602      	mov	r2, r0
 800800c:	f013 0007 	ands.w	r0, r3, #7
 8008010:	d00b      	beq.n	800802a <__lo0bits+0x22>
 8008012:	07d9      	lsls	r1, r3, #31
 8008014:	d421      	bmi.n	800805a <__lo0bits+0x52>
 8008016:	0798      	lsls	r0, r3, #30
 8008018:	bf49      	itett	mi
 800801a:	085b      	lsrmi	r3, r3, #1
 800801c:	089b      	lsrpl	r3, r3, #2
 800801e:	2001      	movmi	r0, #1
 8008020:	6013      	strmi	r3, [r2, #0]
 8008022:	bf5c      	itt	pl
 8008024:	2002      	movpl	r0, #2
 8008026:	6013      	strpl	r3, [r2, #0]
 8008028:	4770      	bx	lr
 800802a:	b299      	uxth	r1, r3
 800802c:	b909      	cbnz	r1, 8008032 <__lo0bits+0x2a>
 800802e:	2010      	movs	r0, #16
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	b2d9      	uxtb	r1, r3
 8008034:	b909      	cbnz	r1, 800803a <__lo0bits+0x32>
 8008036:	3008      	adds	r0, #8
 8008038:	0a1b      	lsrs	r3, r3, #8
 800803a:	0719      	lsls	r1, r3, #28
 800803c:	bf04      	itt	eq
 800803e:	091b      	lsreq	r3, r3, #4
 8008040:	3004      	addeq	r0, #4
 8008042:	0799      	lsls	r1, r3, #30
 8008044:	bf04      	itt	eq
 8008046:	089b      	lsreq	r3, r3, #2
 8008048:	3002      	addeq	r0, #2
 800804a:	07d9      	lsls	r1, r3, #31
 800804c:	d403      	bmi.n	8008056 <__lo0bits+0x4e>
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	f100 0001 	add.w	r0, r0, #1
 8008054:	d003      	beq.n	800805e <__lo0bits+0x56>
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	4770      	bx	lr
 800805a:	2000      	movs	r0, #0
 800805c:	4770      	bx	lr
 800805e:	2020      	movs	r0, #32
 8008060:	4770      	bx	lr
	...

08008064 <__i2b>:
 8008064:	b510      	push	{r4, lr}
 8008066:	460c      	mov	r4, r1
 8008068:	2101      	movs	r1, #1
 800806a:	f7ff ff05 	bl	8007e78 <_Balloc>
 800806e:	4602      	mov	r2, r0
 8008070:	b928      	cbnz	r0, 800807e <__i2b+0x1a>
 8008072:	f240 1145 	movw	r1, #325	; 0x145
 8008076:	4b04      	ldr	r3, [pc, #16]	; (8008088 <__i2b+0x24>)
 8008078:	4804      	ldr	r0, [pc, #16]	; (800808c <__i2b+0x28>)
 800807a:	f000 fe67 	bl	8008d4c <__assert_func>
 800807e:	2301      	movs	r3, #1
 8008080:	6144      	str	r4, [r0, #20]
 8008082:	6103      	str	r3, [r0, #16]
 8008084:	bd10      	pop	{r4, pc}
 8008086:	bf00      	nop
 8008088:	0800a764 	.word	0x0800a764
 800808c:	0800a775 	.word	0x0800a775

08008090 <__multiply>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	4691      	mov	r9, r2
 8008096:	690a      	ldr	r2, [r1, #16]
 8008098:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800809c:	460c      	mov	r4, r1
 800809e:	429a      	cmp	r2, r3
 80080a0:	bfbe      	ittt	lt
 80080a2:	460b      	movlt	r3, r1
 80080a4:	464c      	movlt	r4, r9
 80080a6:	4699      	movlt	r9, r3
 80080a8:	6927      	ldr	r7, [r4, #16]
 80080aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080ae:	68a3      	ldr	r3, [r4, #8]
 80080b0:	6861      	ldr	r1, [r4, #4]
 80080b2:	eb07 060a 	add.w	r6, r7, sl
 80080b6:	42b3      	cmp	r3, r6
 80080b8:	b085      	sub	sp, #20
 80080ba:	bfb8      	it	lt
 80080bc:	3101      	addlt	r1, #1
 80080be:	f7ff fedb 	bl	8007e78 <_Balloc>
 80080c2:	b930      	cbnz	r0, 80080d2 <__multiply+0x42>
 80080c4:	4602      	mov	r2, r0
 80080c6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80080ca:	4b43      	ldr	r3, [pc, #268]	; (80081d8 <__multiply+0x148>)
 80080cc:	4843      	ldr	r0, [pc, #268]	; (80081dc <__multiply+0x14c>)
 80080ce:	f000 fe3d 	bl	8008d4c <__assert_func>
 80080d2:	f100 0514 	add.w	r5, r0, #20
 80080d6:	462b      	mov	r3, r5
 80080d8:	2200      	movs	r2, #0
 80080da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080de:	4543      	cmp	r3, r8
 80080e0:	d321      	bcc.n	8008126 <__multiply+0x96>
 80080e2:	f104 0314 	add.w	r3, r4, #20
 80080e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80080ea:	f109 0314 	add.w	r3, r9, #20
 80080ee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80080f2:	9202      	str	r2, [sp, #8]
 80080f4:	1b3a      	subs	r2, r7, r4
 80080f6:	3a15      	subs	r2, #21
 80080f8:	f022 0203 	bic.w	r2, r2, #3
 80080fc:	3204      	adds	r2, #4
 80080fe:	f104 0115 	add.w	r1, r4, #21
 8008102:	428f      	cmp	r7, r1
 8008104:	bf38      	it	cc
 8008106:	2204      	movcc	r2, #4
 8008108:	9201      	str	r2, [sp, #4]
 800810a:	9a02      	ldr	r2, [sp, #8]
 800810c:	9303      	str	r3, [sp, #12]
 800810e:	429a      	cmp	r2, r3
 8008110:	d80c      	bhi.n	800812c <__multiply+0x9c>
 8008112:	2e00      	cmp	r6, #0
 8008114:	dd03      	ble.n	800811e <__multiply+0x8e>
 8008116:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800811a:	2b00      	cmp	r3, #0
 800811c:	d05a      	beq.n	80081d4 <__multiply+0x144>
 800811e:	6106      	str	r6, [r0, #16]
 8008120:	b005      	add	sp, #20
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	f843 2b04 	str.w	r2, [r3], #4
 800812a:	e7d8      	b.n	80080de <__multiply+0x4e>
 800812c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008130:	f1ba 0f00 	cmp.w	sl, #0
 8008134:	d023      	beq.n	800817e <__multiply+0xee>
 8008136:	46a9      	mov	r9, r5
 8008138:	f04f 0c00 	mov.w	ip, #0
 800813c:	f104 0e14 	add.w	lr, r4, #20
 8008140:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008144:	f8d9 1000 	ldr.w	r1, [r9]
 8008148:	fa1f fb82 	uxth.w	fp, r2
 800814c:	b289      	uxth	r1, r1
 800814e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008152:	4461      	add	r1, ip
 8008154:	f8d9 c000 	ldr.w	ip, [r9]
 8008158:	0c12      	lsrs	r2, r2, #16
 800815a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800815e:	fb0a c202 	mla	r2, sl, r2, ip
 8008162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008166:	b289      	uxth	r1, r1
 8008168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800816c:	4577      	cmp	r7, lr
 800816e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008172:	f849 1b04 	str.w	r1, [r9], #4
 8008176:	d8e3      	bhi.n	8008140 <__multiply+0xb0>
 8008178:	9a01      	ldr	r2, [sp, #4]
 800817a:	f845 c002 	str.w	ip, [r5, r2]
 800817e:	9a03      	ldr	r2, [sp, #12]
 8008180:	3304      	adds	r3, #4
 8008182:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008186:	f1b9 0f00 	cmp.w	r9, #0
 800818a:	d021      	beq.n	80081d0 <__multiply+0x140>
 800818c:	46ae      	mov	lr, r5
 800818e:	f04f 0a00 	mov.w	sl, #0
 8008192:	6829      	ldr	r1, [r5, #0]
 8008194:	f104 0c14 	add.w	ip, r4, #20
 8008198:	f8bc b000 	ldrh.w	fp, [ip]
 800819c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80081a0:	b289      	uxth	r1, r1
 80081a2:	fb09 220b 	mla	r2, r9, fp, r2
 80081a6:	4452      	add	r2, sl
 80081a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081ac:	f84e 1b04 	str.w	r1, [lr], #4
 80081b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80081b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80081b8:	f8be 1000 	ldrh.w	r1, [lr]
 80081bc:	4567      	cmp	r7, ip
 80081be:	fb09 110a 	mla	r1, r9, sl, r1
 80081c2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80081c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80081ca:	d8e5      	bhi.n	8008198 <__multiply+0x108>
 80081cc:	9a01      	ldr	r2, [sp, #4]
 80081ce:	50a9      	str	r1, [r5, r2]
 80081d0:	3504      	adds	r5, #4
 80081d2:	e79a      	b.n	800810a <__multiply+0x7a>
 80081d4:	3e01      	subs	r6, #1
 80081d6:	e79c      	b.n	8008112 <__multiply+0x82>
 80081d8:	0800a764 	.word	0x0800a764
 80081dc:	0800a775 	.word	0x0800a775

080081e0 <__pow5mult>:
 80081e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e4:	4615      	mov	r5, r2
 80081e6:	f012 0203 	ands.w	r2, r2, #3
 80081ea:	4606      	mov	r6, r0
 80081ec:	460f      	mov	r7, r1
 80081ee:	d007      	beq.n	8008200 <__pow5mult+0x20>
 80081f0:	4c25      	ldr	r4, [pc, #148]	; (8008288 <__pow5mult+0xa8>)
 80081f2:	3a01      	subs	r2, #1
 80081f4:	2300      	movs	r3, #0
 80081f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081fa:	f7ff fe9f 	bl	8007f3c <__multadd>
 80081fe:	4607      	mov	r7, r0
 8008200:	10ad      	asrs	r5, r5, #2
 8008202:	d03d      	beq.n	8008280 <__pow5mult+0xa0>
 8008204:	69f4      	ldr	r4, [r6, #28]
 8008206:	b97c      	cbnz	r4, 8008228 <__pow5mult+0x48>
 8008208:	2010      	movs	r0, #16
 800820a:	f7ff fd81 	bl	8007d10 <malloc>
 800820e:	4602      	mov	r2, r0
 8008210:	61f0      	str	r0, [r6, #28]
 8008212:	b928      	cbnz	r0, 8008220 <__pow5mult+0x40>
 8008214:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008218:	4b1c      	ldr	r3, [pc, #112]	; (800828c <__pow5mult+0xac>)
 800821a:	481d      	ldr	r0, [pc, #116]	; (8008290 <__pow5mult+0xb0>)
 800821c:	f000 fd96 	bl	8008d4c <__assert_func>
 8008220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008224:	6004      	str	r4, [r0, #0]
 8008226:	60c4      	str	r4, [r0, #12]
 8008228:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800822c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008230:	b94c      	cbnz	r4, 8008246 <__pow5mult+0x66>
 8008232:	f240 2171 	movw	r1, #625	; 0x271
 8008236:	4630      	mov	r0, r6
 8008238:	f7ff ff14 	bl	8008064 <__i2b>
 800823c:	2300      	movs	r3, #0
 800823e:	4604      	mov	r4, r0
 8008240:	f8c8 0008 	str.w	r0, [r8, #8]
 8008244:	6003      	str	r3, [r0, #0]
 8008246:	f04f 0900 	mov.w	r9, #0
 800824a:	07eb      	lsls	r3, r5, #31
 800824c:	d50a      	bpl.n	8008264 <__pow5mult+0x84>
 800824e:	4639      	mov	r1, r7
 8008250:	4622      	mov	r2, r4
 8008252:	4630      	mov	r0, r6
 8008254:	f7ff ff1c 	bl	8008090 <__multiply>
 8008258:	4680      	mov	r8, r0
 800825a:	4639      	mov	r1, r7
 800825c:	4630      	mov	r0, r6
 800825e:	f7ff fe4b 	bl	8007ef8 <_Bfree>
 8008262:	4647      	mov	r7, r8
 8008264:	106d      	asrs	r5, r5, #1
 8008266:	d00b      	beq.n	8008280 <__pow5mult+0xa0>
 8008268:	6820      	ldr	r0, [r4, #0]
 800826a:	b938      	cbnz	r0, 800827c <__pow5mult+0x9c>
 800826c:	4622      	mov	r2, r4
 800826e:	4621      	mov	r1, r4
 8008270:	4630      	mov	r0, r6
 8008272:	f7ff ff0d 	bl	8008090 <__multiply>
 8008276:	6020      	str	r0, [r4, #0]
 8008278:	f8c0 9000 	str.w	r9, [r0]
 800827c:	4604      	mov	r4, r0
 800827e:	e7e4      	b.n	800824a <__pow5mult+0x6a>
 8008280:	4638      	mov	r0, r7
 8008282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008286:	bf00      	nop
 8008288:	0800a8c0 	.word	0x0800a8c0
 800828c:	0800a6f5 	.word	0x0800a6f5
 8008290:	0800a775 	.word	0x0800a775

08008294 <__lshift>:
 8008294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008298:	460c      	mov	r4, r1
 800829a:	4607      	mov	r7, r0
 800829c:	4691      	mov	r9, r2
 800829e:	6923      	ldr	r3, [r4, #16]
 80082a0:	6849      	ldr	r1, [r1, #4]
 80082a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082a6:	68a3      	ldr	r3, [r4, #8]
 80082a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082ac:	f108 0601 	add.w	r6, r8, #1
 80082b0:	42b3      	cmp	r3, r6
 80082b2:	db0b      	blt.n	80082cc <__lshift+0x38>
 80082b4:	4638      	mov	r0, r7
 80082b6:	f7ff fddf 	bl	8007e78 <_Balloc>
 80082ba:	4605      	mov	r5, r0
 80082bc:	b948      	cbnz	r0, 80082d2 <__lshift+0x3e>
 80082be:	4602      	mov	r2, r0
 80082c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80082c4:	4b27      	ldr	r3, [pc, #156]	; (8008364 <__lshift+0xd0>)
 80082c6:	4828      	ldr	r0, [pc, #160]	; (8008368 <__lshift+0xd4>)
 80082c8:	f000 fd40 	bl	8008d4c <__assert_func>
 80082cc:	3101      	adds	r1, #1
 80082ce:	005b      	lsls	r3, r3, #1
 80082d0:	e7ee      	b.n	80082b0 <__lshift+0x1c>
 80082d2:	2300      	movs	r3, #0
 80082d4:	f100 0114 	add.w	r1, r0, #20
 80082d8:	f100 0210 	add.w	r2, r0, #16
 80082dc:	4618      	mov	r0, r3
 80082de:	4553      	cmp	r3, sl
 80082e0:	db33      	blt.n	800834a <__lshift+0xb6>
 80082e2:	6920      	ldr	r0, [r4, #16]
 80082e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082e8:	f104 0314 	add.w	r3, r4, #20
 80082ec:	f019 091f 	ands.w	r9, r9, #31
 80082f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082f8:	d02b      	beq.n	8008352 <__lshift+0xbe>
 80082fa:	468a      	mov	sl, r1
 80082fc:	2200      	movs	r2, #0
 80082fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	fa00 f009 	lsl.w	r0, r0, r9
 8008308:	4310      	orrs	r0, r2
 800830a:	f84a 0b04 	str.w	r0, [sl], #4
 800830e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008312:	459c      	cmp	ip, r3
 8008314:	fa22 f20e 	lsr.w	r2, r2, lr
 8008318:	d8f3      	bhi.n	8008302 <__lshift+0x6e>
 800831a:	ebac 0304 	sub.w	r3, ip, r4
 800831e:	3b15      	subs	r3, #21
 8008320:	f023 0303 	bic.w	r3, r3, #3
 8008324:	3304      	adds	r3, #4
 8008326:	f104 0015 	add.w	r0, r4, #21
 800832a:	4584      	cmp	ip, r0
 800832c:	bf38      	it	cc
 800832e:	2304      	movcc	r3, #4
 8008330:	50ca      	str	r2, [r1, r3]
 8008332:	b10a      	cbz	r2, 8008338 <__lshift+0xa4>
 8008334:	f108 0602 	add.w	r6, r8, #2
 8008338:	3e01      	subs	r6, #1
 800833a:	4638      	mov	r0, r7
 800833c:	4621      	mov	r1, r4
 800833e:	612e      	str	r6, [r5, #16]
 8008340:	f7ff fdda 	bl	8007ef8 <_Bfree>
 8008344:	4628      	mov	r0, r5
 8008346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834a:	f842 0f04 	str.w	r0, [r2, #4]!
 800834e:	3301      	adds	r3, #1
 8008350:	e7c5      	b.n	80082de <__lshift+0x4a>
 8008352:	3904      	subs	r1, #4
 8008354:	f853 2b04 	ldr.w	r2, [r3], #4
 8008358:	459c      	cmp	ip, r3
 800835a:	f841 2f04 	str.w	r2, [r1, #4]!
 800835e:	d8f9      	bhi.n	8008354 <__lshift+0xc0>
 8008360:	e7ea      	b.n	8008338 <__lshift+0xa4>
 8008362:	bf00      	nop
 8008364:	0800a764 	.word	0x0800a764
 8008368:	0800a775 	.word	0x0800a775

0800836c <__mcmp>:
 800836c:	4603      	mov	r3, r0
 800836e:	690a      	ldr	r2, [r1, #16]
 8008370:	6900      	ldr	r0, [r0, #16]
 8008372:	b530      	push	{r4, r5, lr}
 8008374:	1a80      	subs	r0, r0, r2
 8008376:	d10d      	bne.n	8008394 <__mcmp+0x28>
 8008378:	3314      	adds	r3, #20
 800837a:	3114      	adds	r1, #20
 800837c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008380:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008384:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008388:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800838c:	4295      	cmp	r5, r2
 800838e:	d002      	beq.n	8008396 <__mcmp+0x2a>
 8008390:	d304      	bcc.n	800839c <__mcmp+0x30>
 8008392:	2001      	movs	r0, #1
 8008394:	bd30      	pop	{r4, r5, pc}
 8008396:	42a3      	cmp	r3, r4
 8008398:	d3f4      	bcc.n	8008384 <__mcmp+0x18>
 800839a:	e7fb      	b.n	8008394 <__mcmp+0x28>
 800839c:	f04f 30ff 	mov.w	r0, #4294967295
 80083a0:	e7f8      	b.n	8008394 <__mcmp+0x28>
	...

080083a4 <__mdiff>:
 80083a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a8:	460d      	mov	r5, r1
 80083aa:	4607      	mov	r7, r0
 80083ac:	4611      	mov	r1, r2
 80083ae:	4628      	mov	r0, r5
 80083b0:	4614      	mov	r4, r2
 80083b2:	f7ff ffdb 	bl	800836c <__mcmp>
 80083b6:	1e06      	subs	r6, r0, #0
 80083b8:	d111      	bne.n	80083de <__mdiff+0x3a>
 80083ba:	4631      	mov	r1, r6
 80083bc:	4638      	mov	r0, r7
 80083be:	f7ff fd5b 	bl	8007e78 <_Balloc>
 80083c2:	4602      	mov	r2, r0
 80083c4:	b928      	cbnz	r0, 80083d2 <__mdiff+0x2e>
 80083c6:	f240 2137 	movw	r1, #567	; 0x237
 80083ca:	4b3a      	ldr	r3, [pc, #232]	; (80084b4 <__mdiff+0x110>)
 80083cc:	483a      	ldr	r0, [pc, #232]	; (80084b8 <__mdiff+0x114>)
 80083ce:	f000 fcbd 	bl	8008d4c <__assert_func>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80083d8:	4610      	mov	r0, r2
 80083da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083de:	bfa4      	itt	ge
 80083e0:	4623      	movge	r3, r4
 80083e2:	462c      	movge	r4, r5
 80083e4:	4638      	mov	r0, r7
 80083e6:	6861      	ldr	r1, [r4, #4]
 80083e8:	bfa6      	itte	ge
 80083ea:	461d      	movge	r5, r3
 80083ec:	2600      	movge	r6, #0
 80083ee:	2601      	movlt	r6, #1
 80083f0:	f7ff fd42 	bl	8007e78 <_Balloc>
 80083f4:	4602      	mov	r2, r0
 80083f6:	b918      	cbnz	r0, 8008400 <__mdiff+0x5c>
 80083f8:	f240 2145 	movw	r1, #581	; 0x245
 80083fc:	4b2d      	ldr	r3, [pc, #180]	; (80084b4 <__mdiff+0x110>)
 80083fe:	e7e5      	b.n	80083cc <__mdiff+0x28>
 8008400:	f102 0814 	add.w	r8, r2, #20
 8008404:	46c2      	mov	sl, r8
 8008406:	f04f 0c00 	mov.w	ip, #0
 800840a:	6927      	ldr	r7, [r4, #16]
 800840c:	60c6      	str	r6, [r0, #12]
 800840e:	692e      	ldr	r6, [r5, #16]
 8008410:	f104 0014 	add.w	r0, r4, #20
 8008414:	f105 0914 	add.w	r9, r5, #20
 8008418:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800841c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008420:	3410      	adds	r4, #16
 8008422:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008426:	f859 3b04 	ldr.w	r3, [r9], #4
 800842a:	fa1f f18b 	uxth.w	r1, fp
 800842e:	4461      	add	r1, ip
 8008430:	fa1f fc83 	uxth.w	ip, r3
 8008434:	0c1b      	lsrs	r3, r3, #16
 8008436:	eba1 010c 	sub.w	r1, r1, ip
 800843a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800843e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008442:	b289      	uxth	r1, r1
 8008444:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008448:	454e      	cmp	r6, r9
 800844a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800844e:	f84a 1b04 	str.w	r1, [sl], #4
 8008452:	d8e6      	bhi.n	8008422 <__mdiff+0x7e>
 8008454:	1b73      	subs	r3, r6, r5
 8008456:	3b15      	subs	r3, #21
 8008458:	f023 0303 	bic.w	r3, r3, #3
 800845c:	3515      	adds	r5, #21
 800845e:	3304      	adds	r3, #4
 8008460:	42ae      	cmp	r6, r5
 8008462:	bf38      	it	cc
 8008464:	2304      	movcc	r3, #4
 8008466:	4418      	add	r0, r3
 8008468:	4443      	add	r3, r8
 800846a:	461e      	mov	r6, r3
 800846c:	4605      	mov	r5, r0
 800846e:	4575      	cmp	r5, lr
 8008470:	d30e      	bcc.n	8008490 <__mdiff+0xec>
 8008472:	f10e 0103 	add.w	r1, lr, #3
 8008476:	1a09      	subs	r1, r1, r0
 8008478:	f021 0103 	bic.w	r1, r1, #3
 800847c:	3803      	subs	r0, #3
 800847e:	4586      	cmp	lr, r0
 8008480:	bf38      	it	cc
 8008482:	2100      	movcc	r1, #0
 8008484:	440b      	add	r3, r1
 8008486:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800848a:	b189      	cbz	r1, 80084b0 <__mdiff+0x10c>
 800848c:	6117      	str	r7, [r2, #16]
 800848e:	e7a3      	b.n	80083d8 <__mdiff+0x34>
 8008490:	f855 8b04 	ldr.w	r8, [r5], #4
 8008494:	fa1f f188 	uxth.w	r1, r8
 8008498:	4461      	add	r1, ip
 800849a:	140c      	asrs	r4, r1, #16
 800849c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80084a0:	b289      	uxth	r1, r1
 80084a2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80084a6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80084aa:	f846 1b04 	str.w	r1, [r6], #4
 80084ae:	e7de      	b.n	800846e <__mdiff+0xca>
 80084b0:	3f01      	subs	r7, #1
 80084b2:	e7e8      	b.n	8008486 <__mdiff+0xe2>
 80084b4:	0800a764 	.word	0x0800a764
 80084b8:	0800a775 	.word	0x0800a775

080084bc <__d2b>:
 80084bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084be:	2101      	movs	r1, #1
 80084c0:	4617      	mov	r7, r2
 80084c2:	461c      	mov	r4, r3
 80084c4:	9e08      	ldr	r6, [sp, #32]
 80084c6:	f7ff fcd7 	bl	8007e78 <_Balloc>
 80084ca:	4605      	mov	r5, r0
 80084cc:	b930      	cbnz	r0, 80084dc <__d2b+0x20>
 80084ce:	4602      	mov	r2, r0
 80084d0:	f240 310f 	movw	r1, #783	; 0x30f
 80084d4:	4b22      	ldr	r3, [pc, #136]	; (8008560 <__d2b+0xa4>)
 80084d6:	4823      	ldr	r0, [pc, #140]	; (8008564 <__d2b+0xa8>)
 80084d8:	f000 fc38 	bl	8008d4c <__assert_func>
 80084dc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80084e0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80084e4:	bb24      	cbnz	r4, 8008530 <__d2b+0x74>
 80084e6:	2f00      	cmp	r7, #0
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	d026      	beq.n	800853a <__d2b+0x7e>
 80084ec:	4668      	mov	r0, sp
 80084ee:	9700      	str	r7, [sp, #0]
 80084f0:	f7ff fd8a 	bl	8008008 <__lo0bits>
 80084f4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084f8:	b1e8      	cbz	r0, 8008536 <__d2b+0x7a>
 80084fa:	f1c0 0320 	rsb	r3, r0, #32
 80084fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008502:	430b      	orrs	r3, r1
 8008504:	40c2      	lsrs	r2, r0
 8008506:	616b      	str	r3, [r5, #20]
 8008508:	9201      	str	r2, [sp, #4]
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	bf14      	ite	ne
 8008510:	2102      	movne	r1, #2
 8008512:	2101      	moveq	r1, #1
 8008514:	61ab      	str	r3, [r5, #24]
 8008516:	6129      	str	r1, [r5, #16]
 8008518:	b1bc      	cbz	r4, 800854a <__d2b+0x8e>
 800851a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800851e:	4404      	add	r4, r0
 8008520:	6034      	str	r4, [r6, #0]
 8008522:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008528:	6018      	str	r0, [r3, #0]
 800852a:	4628      	mov	r0, r5
 800852c:	b003      	add	sp, #12
 800852e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008534:	e7d7      	b.n	80084e6 <__d2b+0x2a>
 8008536:	6169      	str	r1, [r5, #20]
 8008538:	e7e7      	b.n	800850a <__d2b+0x4e>
 800853a:	a801      	add	r0, sp, #4
 800853c:	f7ff fd64 	bl	8008008 <__lo0bits>
 8008540:	9b01      	ldr	r3, [sp, #4]
 8008542:	2101      	movs	r1, #1
 8008544:	616b      	str	r3, [r5, #20]
 8008546:	3020      	adds	r0, #32
 8008548:	e7e5      	b.n	8008516 <__d2b+0x5a>
 800854a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800854e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008552:	6030      	str	r0, [r6, #0]
 8008554:	6918      	ldr	r0, [r3, #16]
 8008556:	f7ff fd37 	bl	8007fc8 <__hi0bits>
 800855a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800855e:	e7e2      	b.n	8008526 <__d2b+0x6a>
 8008560:	0800a764 	.word	0x0800a764
 8008564:	0800a775 	.word	0x0800a775

08008568 <__ssputs_r>:
 8008568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	461f      	mov	r7, r3
 800856e:	688e      	ldr	r6, [r1, #8]
 8008570:	4682      	mov	sl, r0
 8008572:	42be      	cmp	r6, r7
 8008574:	460c      	mov	r4, r1
 8008576:	4690      	mov	r8, r2
 8008578:	680b      	ldr	r3, [r1, #0]
 800857a:	d82c      	bhi.n	80085d6 <__ssputs_r+0x6e>
 800857c:	898a      	ldrh	r2, [r1, #12]
 800857e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008582:	d026      	beq.n	80085d2 <__ssputs_r+0x6a>
 8008584:	6965      	ldr	r5, [r4, #20]
 8008586:	6909      	ldr	r1, [r1, #16]
 8008588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800858c:	eba3 0901 	sub.w	r9, r3, r1
 8008590:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008594:	1c7b      	adds	r3, r7, #1
 8008596:	444b      	add	r3, r9
 8008598:	106d      	asrs	r5, r5, #1
 800859a:	429d      	cmp	r5, r3
 800859c:	bf38      	it	cc
 800859e:	461d      	movcc	r5, r3
 80085a0:	0553      	lsls	r3, r2, #21
 80085a2:	d527      	bpl.n	80085f4 <__ssputs_r+0x8c>
 80085a4:	4629      	mov	r1, r5
 80085a6:	f7ff fbdb 	bl	8007d60 <_malloc_r>
 80085aa:	4606      	mov	r6, r0
 80085ac:	b360      	cbz	r0, 8008608 <__ssputs_r+0xa0>
 80085ae:	464a      	mov	r2, r9
 80085b0:	6921      	ldr	r1, [r4, #16]
 80085b2:	f7fe fce7 	bl	8006f84 <memcpy>
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c0:	81a3      	strh	r3, [r4, #12]
 80085c2:	6126      	str	r6, [r4, #16]
 80085c4:	444e      	add	r6, r9
 80085c6:	6026      	str	r6, [r4, #0]
 80085c8:	463e      	mov	r6, r7
 80085ca:	6165      	str	r5, [r4, #20]
 80085cc:	eba5 0509 	sub.w	r5, r5, r9
 80085d0:	60a5      	str	r5, [r4, #8]
 80085d2:	42be      	cmp	r6, r7
 80085d4:	d900      	bls.n	80085d8 <__ssputs_r+0x70>
 80085d6:	463e      	mov	r6, r7
 80085d8:	4632      	mov	r2, r6
 80085da:	4641      	mov	r1, r8
 80085dc:	6820      	ldr	r0, [r4, #0]
 80085de:	f000 fb68 	bl	8008cb2 <memmove>
 80085e2:	2000      	movs	r0, #0
 80085e4:	68a3      	ldr	r3, [r4, #8]
 80085e6:	1b9b      	subs	r3, r3, r6
 80085e8:	60a3      	str	r3, [r4, #8]
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	4433      	add	r3, r6
 80085ee:	6023      	str	r3, [r4, #0]
 80085f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f4:	462a      	mov	r2, r5
 80085f6:	f000 fbed 	bl	8008dd4 <_realloc_r>
 80085fa:	4606      	mov	r6, r0
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d1e0      	bne.n	80085c2 <__ssputs_r+0x5a>
 8008600:	4650      	mov	r0, sl
 8008602:	6921      	ldr	r1, [r4, #16]
 8008604:	f7ff fb3c 	bl	8007c80 <_free_r>
 8008608:	230c      	movs	r3, #12
 800860a:	f8ca 3000 	str.w	r3, [sl]
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	f04f 30ff 	mov.w	r0, #4294967295
 8008614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008618:	81a3      	strh	r3, [r4, #12]
 800861a:	e7e9      	b.n	80085f0 <__ssputs_r+0x88>

0800861c <_svfiprintf_r>:
 800861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008620:	4698      	mov	r8, r3
 8008622:	898b      	ldrh	r3, [r1, #12]
 8008624:	4607      	mov	r7, r0
 8008626:	061b      	lsls	r3, r3, #24
 8008628:	460d      	mov	r5, r1
 800862a:	4614      	mov	r4, r2
 800862c:	b09d      	sub	sp, #116	; 0x74
 800862e:	d50e      	bpl.n	800864e <_svfiprintf_r+0x32>
 8008630:	690b      	ldr	r3, [r1, #16]
 8008632:	b963      	cbnz	r3, 800864e <_svfiprintf_r+0x32>
 8008634:	2140      	movs	r1, #64	; 0x40
 8008636:	f7ff fb93 	bl	8007d60 <_malloc_r>
 800863a:	6028      	str	r0, [r5, #0]
 800863c:	6128      	str	r0, [r5, #16]
 800863e:	b920      	cbnz	r0, 800864a <_svfiprintf_r+0x2e>
 8008640:	230c      	movs	r3, #12
 8008642:	603b      	str	r3, [r7, #0]
 8008644:	f04f 30ff 	mov.w	r0, #4294967295
 8008648:	e0d0      	b.n	80087ec <_svfiprintf_r+0x1d0>
 800864a:	2340      	movs	r3, #64	; 0x40
 800864c:	616b      	str	r3, [r5, #20]
 800864e:	2300      	movs	r3, #0
 8008650:	9309      	str	r3, [sp, #36]	; 0x24
 8008652:	2320      	movs	r3, #32
 8008654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008658:	2330      	movs	r3, #48	; 0x30
 800865a:	f04f 0901 	mov.w	r9, #1
 800865e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008662:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008804 <_svfiprintf_r+0x1e8>
 8008666:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800866a:	4623      	mov	r3, r4
 800866c:	469a      	mov	sl, r3
 800866e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008672:	b10a      	cbz	r2, 8008678 <_svfiprintf_r+0x5c>
 8008674:	2a25      	cmp	r2, #37	; 0x25
 8008676:	d1f9      	bne.n	800866c <_svfiprintf_r+0x50>
 8008678:	ebba 0b04 	subs.w	fp, sl, r4
 800867c:	d00b      	beq.n	8008696 <_svfiprintf_r+0x7a>
 800867e:	465b      	mov	r3, fp
 8008680:	4622      	mov	r2, r4
 8008682:	4629      	mov	r1, r5
 8008684:	4638      	mov	r0, r7
 8008686:	f7ff ff6f 	bl	8008568 <__ssputs_r>
 800868a:	3001      	adds	r0, #1
 800868c:	f000 80a9 	beq.w	80087e2 <_svfiprintf_r+0x1c6>
 8008690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008692:	445a      	add	r2, fp
 8008694:	9209      	str	r2, [sp, #36]	; 0x24
 8008696:	f89a 3000 	ldrb.w	r3, [sl]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 80a1 	beq.w	80087e2 <_svfiprintf_r+0x1c6>
 80086a0:	2300      	movs	r3, #0
 80086a2:	f04f 32ff 	mov.w	r2, #4294967295
 80086a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086aa:	f10a 0a01 	add.w	sl, sl, #1
 80086ae:	9304      	str	r3, [sp, #16]
 80086b0:	9307      	str	r3, [sp, #28]
 80086b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086b6:	931a      	str	r3, [sp, #104]	; 0x68
 80086b8:	4654      	mov	r4, sl
 80086ba:	2205      	movs	r2, #5
 80086bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c0:	4850      	ldr	r0, [pc, #320]	; (8008804 <_svfiprintf_r+0x1e8>)
 80086c2:	f7fe fc51 	bl	8006f68 <memchr>
 80086c6:	9a04      	ldr	r2, [sp, #16]
 80086c8:	b9d8      	cbnz	r0, 8008702 <_svfiprintf_r+0xe6>
 80086ca:	06d0      	lsls	r0, r2, #27
 80086cc:	bf44      	itt	mi
 80086ce:	2320      	movmi	r3, #32
 80086d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d4:	0711      	lsls	r1, r2, #28
 80086d6:	bf44      	itt	mi
 80086d8:	232b      	movmi	r3, #43	; 0x2b
 80086da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086de:	f89a 3000 	ldrb.w	r3, [sl]
 80086e2:	2b2a      	cmp	r3, #42	; 0x2a
 80086e4:	d015      	beq.n	8008712 <_svfiprintf_r+0xf6>
 80086e6:	4654      	mov	r4, sl
 80086e8:	2000      	movs	r0, #0
 80086ea:	f04f 0c0a 	mov.w	ip, #10
 80086ee:	9a07      	ldr	r2, [sp, #28]
 80086f0:	4621      	mov	r1, r4
 80086f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086f6:	3b30      	subs	r3, #48	; 0x30
 80086f8:	2b09      	cmp	r3, #9
 80086fa:	d94d      	bls.n	8008798 <_svfiprintf_r+0x17c>
 80086fc:	b1b0      	cbz	r0, 800872c <_svfiprintf_r+0x110>
 80086fe:	9207      	str	r2, [sp, #28]
 8008700:	e014      	b.n	800872c <_svfiprintf_r+0x110>
 8008702:	eba0 0308 	sub.w	r3, r0, r8
 8008706:	fa09 f303 	lsl.w	r3, r9, r3
 800870a:	4313      	orrs	r3, r2
 800870c:	46a2      	mov	sl, r4
 800870e:	9304      	str	r3, [sp, #16]
 8008710:	e7d2      	b.n	80086b8 <_svfiprintf_r+0x9c>
 8008712:	9b03      	ldr	r3, [sp, #12]
 8008714:	1d19      	adds	r1, r3, #4
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	9103      	str	r1, [sp, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	bfbb      	ittet	lt
 800871e:	425b      	neglt	r3, r3
 8008720:	f042 0202 	orrlt.w	r2, r2, #2
 8008724:	9307      	strge	r3, [sp, #28]
 8008726:	9307      	strlt	r3, [sp, #28]
 8008728:	bfb8      	it	lt
 800872a:	9204      	strlt	r2, [sp, #16]
 800872c:	7823      	ldrb	r3, [r4, #0]
 800872e:	2b2e      	cmp	r3, #46	; 0x2e
 8008730:	d10c      	bne.n	800874c <_svfiprintf_r+0x130>
 8008732:	7863      	ldrb	r3, [r4, #1]
 8008734:	2b2a      	cmp	r3, #42	; 0x2a
 8008736:	d134      	bne.n	80087a2 <_svfiprintf_r+0x186>
 8008738:	9b03      	ldr	r3, [sp, #12]
 800873a:	3402      	adds	r4, #2
 800873c:	1d1a      	adds	r2, r3, #4
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	9203      	str	r2, [sp, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	bfb8      	it	lt
 8008746:	f04f 33ff 	movlt.w	r3, #4294967295
 800874a:	9305      	str	r3, [sp, #20]
 800874c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008808 <_svfiprintf_r+0x1ec>
 8008750:	2203      	movs	r2, #3
 8008752:	4650      	mov	r0, sl
 8008754:	7821      	ldrb	r1, [r4, #0]
 8008756:	f7fe fc07 	bl	8006f68 <memchr>
 800875a:	b138      	cbz	r0, 800876c <_svfiprintf_r+0x150>
 800875c:	2240      	movs	r2, #64	; 0x40
 800875e:	9b04      	ldr	r3, [sp, #16]
 8008760:	eba0 000a 	sub.w	r0, r0, sl
 8008764:	4082      	lsls	r2, r0
 8008766:	4313      	orrs	r3, r2
 8008768:	3401      	adds	r4, #1
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008770:	2206      	movs	r2, #6
 8008772:	4826      	ldr	r0, [pc, #152]	; (800880c <_svfiprintf_r+0x1f0>)
 8008774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008778:	f7fe fbf6 	bl	8006f68 <memchr>
 800877c:	2800      	cmp	r0, #0
 800877e:	d038      	beq.n	80087f2 <_svfiprintf_r+0x1d6>
 8008780:	4b23      	ldr	r3, [pc, #140]	; (8008810 <_svfiprintf_r+0x1f4>)
 8008782:	bb1b      	cbnz	r3, 80087cc <_svfiprintf_r+0x1b0>
 8008784:	9b03      	ldr	r3, [sp, #12]
 8008786:	3307      	adds	r3, #7
 8008788:	f023 0307 	bic.w	r3, r3, #7
 800878c:	3308      	adds	r3, #8
 800878e:	9303      	str	r3, [sp, #12]
 8008790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008792:	4433      	add	r3, r6
 8008794:	9309      	str	r3, [sp, #36]	; 0x24
 8008796:	e768      	b.n	800866a <_svfiprintf_r+0x4e>
 8008798:	460c      	mov	r4, r1
 800879a:	2001      	movs	r0, #1
 800879c:	fb0c 3202 	mla	r2, ip, r2, r3
 80087a0:	e7a6      	b.n	80086f0 <_svfiprintf_r+0xd4>
 80087a2:	2300      	movs	r3, #0
 80087a4:	f04f 0c0a 	mov.w	ip, #10
 80087a8:	4619      	mov	r1, r3
 80087aa:	3401      	adds	r4, #1
 80087ac:	9305      	str	r3, [sp, #20]
 80087ae:	4620      	mov	r0, r4
 80087b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087b4:	3a30      	subs	r2, #48	; 0x30
 80087b6:	2a09      	cmp	r2, #9
 80087b8:	d903      	bls.n	80087c2 <_svfiprintf_r+0x1a6>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0c6      	beq.n	800874c <_svfiprintf_r+0x130>
 80087be:	9105      	str	r1, [sp, #20]
 80087c0:	e7c4      	b.n	800874c <_svfiprintf_r+0x130>
 80087c2:	4604      	mov	r4, r0
 80087c4:	2301      	movs	r3, #1
 80087c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ca:	e7f0      	b.n	80087ae <_svfiprintf_r+0x192>
 80087cc:	ab03      	add	r3, sp, #12
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	462a      	mov	r2, r5
 80087d2:	4638      	mov	r0, r7
 80087d4:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <_svfiprintf_r+0x1f8>)
 80087d6:	a904      	add	r1, sp, #16
 80087d8:	f7fd fd5c 	bl	8006294 <_printf_float>
 80087dc:	1c42      	adds	r2, r0, #1
 80087de:	4606      	mov	r6, r0
 80087e0:	d1d6      	bne.n	8008790 <_svfiprintf_r+0x174>
 80087e2:	89ab      	ldrh	r3, [r5, #12]
 80087e4:	065b      	lsls	r3, r3, #25
 80087e6:	f53f af2d 	bmi.w	8008644 <_svfiprintf_r+0x28>
 80087ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ec:	b01d      	add	sp, #116	; 0x74
 80087ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f2:	ab03      	add	r3, sp, #12
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	462a      	mov	r2, r5
 80087f8:	4638      	mov	r0, r7
 80087fa:	4b06      	ldr	r3, [pc, #24]	; (8008814 <_svfiprintf_r+0x1f8>)
 80087fc:	a904      	add	r1, sp, #16
 80087fe:	f7fd ffe9 	bl	80067d4 <_printf_i>
 8008802:	e7eb      	b.n	80087dc <_svfiprintf_r+0x1c0>
 8008804:	0800a8cc 	.word	0x0800a8cc
 8008808:	0800a8d2 	.word	0x0800a8d2
 800880c:	0800a8d6 	.word	0x0800a8d6
 8008810:	08006295 	.word	0x08006295
 8008814:	08008569 	.word	0x08008569

08008818 <__sfputc_r>:
 8008818:	6893      	ldr	r3, [r2, #8]
 800881a:	b410      	push	{r4}
 800881c:	3b01      	subs	r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	6093      	str	r3, [r2, #8]
 8008822:	da07      	bge.n	8008834 <__sfputc_r+0x1c>
 8008824:	6994      	ldr	r4, [r2, #24]
 8008826:	42a3      	cmp	r3, r4
 8008828:	db01      	blt.n	800882e <__sfputc_r+0x16>
 800882a:	290a      	cmp	r1, #10
 800882c:	d102      	bne.n	8008834 <__sfputc_r+0x1c>
 800882e:	bc10      	pop	{r4}
 8008830:	f7fe ba87 	b.w	8006d42 <__swbuf_r>
 8008834:	6813      	ldr	r3, [r2, #0]
 8008836:	1c58      	adds	r0, r3, #1
 8008838:	6010      	str	r0, [r2, #0]
 800883a:	7019      	strb	r1, [r3, #0]
 800883c:	4608      	mov	r0, r1
 800883e:	bc10      	pop	{r4}
 8008840:	4770      	bx	lr

08008842 <__sfputs_r>:
 8008842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008844:	4606      	mov	r6, r0
 8008846:	460f      	mov	r7, r1
 8008848:	4614      	mov	r4, r2
 800884a:	18d5      	adds	r5, r2, r3
 800884c:	42ac      	cmp	r4, r5
 800884e:	d101      	bne.n	8008854 <__sfputs_r+0x12>
 8008850:	2000      	movs	r0, #0
 8008852:	e007      	b.n	8008864 <__sfputs_r+0x22>
 8008854:	463a      	mov	r2, r7
 8008856:	4630      	mov	r0, r6
 8008858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800885c:	f7ff ffdc 	bl	8008818 <__sfputc_r>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d1f3      	bne.n	800884c <__sfputs_r+0xa>
 8008864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008868 <_vfiprintf_r>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	460d      	mov	r5, r1
 800886e:	4614      	mov	r4, r2
 8008870:	4698      	mov	r8, r3
 8008872:	4606      	mov	r6, r0
 8008874:	b09d      	sub	sp, #116	; 0x74
 8008876:	b118      	cbz	r0, 8008880 <_vfiprintf_r+0x18>
 8008878:	6a03      	ldr	r3, [r0, #32]
 800887a:	b90b      	cbnz	r3, 8008880 <_vfiprintf_r+0x18>
 800887c:	f7fe f946 	bl	8006b0c <__sinit>
 8008880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008882:	07d9      	lsls	r1, r3, #31
 8008884:	d405      	bmi.n	8008892 <_vfiprintf_r+0x2a>
 8008886:	89ab      	ldrh	r3, [r5, #12]
 8008888:	059a      	lsls	r2, r3, #22
 800888a:	d402      	bmi.n	8008892 <_vfiprintf_r+0x2a>
 800888c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800888e:	f7fe fb69 	bl	8006f64 <__retarget_lock_acquire_recursive>
 8008892:	89ab      	ldrh	r3, [r5, #12]
 8008894:	071b      	lsls	r3, r3, #28
 8008896:	d501      	bpl.n	800889c <_vfiprintf_r+0x34>
 8008898:	692b      	ldr	r3, [r5, #16]
 800889a:	b99b      	cbnz	r3, 80088c4 <_vfiprintf_r+0x5c>
 800889c:	4629      	mov	r1, r5
 800889e:	4630      	mov	r0, r6
 80088a0:	f7fe fa8c 	bl	8006dbc <__swsetup_r>
 80088a4:	b170      	cbz	r0, 80088c4 <_vfiprintf_r+0x5c>
 80088a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088a8:	07dc      	lsls	r4, r3, #31
 80088aa:	d504      	bpl.n	80088b6 <_vfiprintf_r+0x4e>
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	b01d      	add	sp, #116	; 0x74
 80088b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b6:	89ab      	ldrh	r3, [r5, #12]
 80088b8:	0598      	lsls	r0, r3, #22
 80088ba:	d4f7      	bmi.n	80088ac <_vfiprintf_r+0x44>
 80088bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088be:	f7fe fb52 	bl	8006f66 <__retarget_lock_release_recursive>
 80088c2:	e7f3      	b.n	80088ac <_vfiprintf_r+0x44>
 80088c4:	2300      	movs	r3, #0
 80088c6:	9309      	str	r3, [sp, #36]	; 0x24
 80088c8:	2320      	movs	r3, #32
 80088ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ce:	2330      	movs	r3, #48	; 0x30
 80088d0:	f04f 0901 	mov.w	r9, #1
 80088d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80088d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008a88 <_vfiprintf_r+0x220>
 80088dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088e0:	4623      	mov	r3, r4
 80088e2:	469a      	mov	sl, r3
 80088e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088e8:	b10a      	cbz	r2, 80088ee <_vfiprintf_r+0x86>
 80088ea:	2a25      	cmp	r2, #37	; 0x25
 80088ec:	d1f9      	bne.n	80088e2 <_vfiprintf_r+0x7a>
 80088ee:	ebba 0b04 	subs.w	fp, sl, r4
 80088f2:	d00b      	beq.n	800890c <_vfiprintf_r+0xa4>
 80088f4:	465b      	mov	r3, fp
 80088f6:	4622      	mov	r2, r4
 80088f8:	4629      	mov	r1, r5
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7ff ffa1 	bl	8008842 <__sfputs_r>
 8008900:	3001      	adds	r0, #1
 8008902:	f000 80a9 	beq.w	8008a58 <_vfiprintf_r+0x1f0>
 8008906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008908:	445a      	add	r2, fp
 800890a:	9209      	str	r2, [sp, #36]	; 0x24
 800890c:	f89a 3000 	ldrb.w	r3, [sl]
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 80a1 	beq.w	8008a58 <_vfiprintf_r+0x1f0>
 8008916:	2300      	movs	r3, #0
 8008918:	f04f 32ff 	mov.w	r2, #4294967295
 800891c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008920:	f10a 0a01 	add.w	sl, sl, #1
 8008924:	9304      	str	r3, [sp, #16]
 8008926:	9307      	str	r3, [sp, #28]
 8008928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800892c:	931a      	str	r3, [sp, #104]	; 0x68
 800892e:	4654      	mov	r4, sl
 8008930:	2205      	movs	r2, #5
 8008932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008936:	4854      	ldr	r0, [pc, #336]	; (8008a88 <_vfiprintf_r+0x220>)
 8008938:	f7fe fb16 	bl	8006f68 <memchr>
 800893c:	9a04      	ldr	r2, [sp, #16]
 800893e:	b9d8      	cbnz	r0, 8008978 <_vfiprintf_r+0x110>
 8008940:	06d1      	lsls	r1, r2, #27
 8008942:	bf44      	itt	mi
 8008944:	2320      	movmi	r3, #32
 8008946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800894a:	0713      	lsls	r3, r2, #28
 800894c:	bf44      	itt	mi
 800894e:	232b      	movmi	r3, #43	; 0x2b
 8008950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008954:	f89a 3000 	ldrb.w	r3, [sl]
 8008958:	2b2a      	cmp	r3, #42	; 0x2a
 800895a:	d015      	beq.n	8008988 <_vfiprintf_r+0x120>
 800895c:	4654      	mov	r4, sl
 800895e:	2000      	movs	r0, #0
 8008960:	f04f 0c0a 	mov.w	ip, #10
 8008964:	9a07      	ldr	r2, [sp, #28]
 8008966:	4621      	mov	r1, r4
 8008968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800896c:	3b30      	subs	r3, #48	; 0x30
 800896e:	2b09      	cmp	r3, #9
 8008970:	d94d      	bls.n	8008a0e <_vfiprintf_r+0x1a6>
 8008972:	b1b0      	cbz	r0, 80089a2 <_vfiprintf_r+0x13a>
 8008974:	9207      	str	r2, [sp, #28]
 8008976:	e014      	b.n	80089a2 <_vfiprintf_r+0x13a>
 8008978:	eba0 0308 	sub.w	r3, r0, r8
 800897c:	fa09 f303 	lsl.w	r3, r9, r3
 8008980:	4313      	orrs	r3, r2
 8008982:	46a2      	mov	sl, r4
 8008984:	9304      	str	r3, [sp, #16]
 8008986:	e7d2      	b.n	800892e <_vfiprintf_r+0xc6>
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	1d19      	adds	r1, r3, #4
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	9103      	str	r1, [sp, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	bfbb      	ittet	lt
 8008994:	425b      	neglt	r3, r3
 8008996:	f042 0202 	orrlt.w	r2, r2, #2
 800899a:	9307      	strge	r3, [sp, #28]
 800899c:	9307      	strlt	r3, [sp, #28]
 800899e:	bfb8      	it	lt
 80089a0:	9204      	strlt	r2, [sp, #16]
 80089a2:	7823      	ldrb	r3, [r4, #0]
 80089a4:	2b2e      	cmp	r3, #46	; 0x2e
 80089a6:	d10c      	bne.n	80089c2 <_vfiprintf_r+0x15a>
 80089a8:	7863      	ldrb	r3, [r4, #1]
 80089aa:	2b2a      	cmp	r3, #42	; 0x2a
 80089ac:	d134      	bne.n	8008a18 <_vfiprintf_r+0x1b0>
 80089ae:	9b03      	ldr	r3, [sp, #12]
 80089b0:	3402      	adds	r4, #2
 80089b2:	1d1a      	adds	r2, r3, #4
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	9203      	str	r2, [sp, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	bfb8      	it	lt
 80089bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80089c0:	9305      	str	r3, [sp, #20]
 80089c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a8c <_vfiprintf_r+0x224>
 80089c6:	2203      	movs	r2, #3
 80089c8:	4650      	mov	r0, sl
 80089ca:	7821      	ldrb	r1, [r4, #0]
 80089cc:	f7fe facc 	bl	8006f68 <memchr>
 80089d0:	b138      	cbz	r0, 80089e2 <_vfiprintf_r+0x17a>
 80089d2:	2240      	movs	r2, #64	; 0x40
 80089d4:	9b04      	ldr	r3, [sp, #16]
 80089d6:	eba0 000a 	sub.w	r0, r0, sl
 80089da:	4082      	lsls	r2, r0
 80089dc:	4313      	orrs	r3, r2
 80089de:	3401      	adds	r4, #1
 80089e0:	9304      	str	r3, [sp, #16]
 80089e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e6:	2206      	movs	r2, #6
 80089e8:	4829      	ldr	r0, [pc, #164]	; (8008a90 <_vfiprintf_r+0x228>)
 80089ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089ee:	f7fe fabb 	bl	8006f68 <memchr>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d03f      	beq.n	8008a76 <_vfiprintf_r+0x20e>
 80089f6:	4b27      	ldr	r3, [pc, #156]	; (8008a94 <_vfiprintf_r+0x22c>)
 80089f8:	bb1b      	cbnz	r3, 8008a42 <_vfiprintf_r+0x1da>
 80089fa:	9b03      	ldr	r3, [sp, #12]
 80089fc:	3307      	adds	r3, #7
 80089fe:	f023 0307 	bic.w	r3, r3, #7
 8008a02:	3308      	adds	r3, #8
 8008a04:	9303      	str	r3, [sp, #12]
 8008a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a08:	443b      	add	r3, r7
 8008a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0c:	e768      	b.n	80088e0 <_vfiprintf_r+0x78>
 8008a0e:	460c      	mov	r4, r1
 8008a10:	2001      	movs	r0, #1
 8008a12:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a16:	e7a6      	b.n	8008966 <_vfiprintf_r+0xfe>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f04f 0c0a 	mov.w	ip, #10
 8008a1e:	4619      	mov	r1, r3
 8008a20:	3401      	adds	r4, #1
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	4620      	mov	r0, r4
 8008a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a2a:	3a30      	subs	r2, #48	; 0x30
 8008a2c:	2a09      	cmp	r2, #9
 8008a2e:	d903      	bls.n	8008a38 <_vfiprintf_r+0x1d0>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0c6      	beq.n	80089c2 <_vfiprintf_r+0x15a>
 8008a34:	9105      	str	r1, [sp, #20]
 8008a36:	e7c4      	b.n	80089c2 <_vfiprintf_r+0x15a>
 8008a38:	4604      	mov	r4, r0
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a40:	e7f0      	b.n	8008a24 <_vfiprintf_r+0x1bc>
 8008a42:	ab03      	add	r3, sp, #12
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	462a      	mov	r2, r5
 8008a48:	4630      	mov	r0, r6
 8008a4a:	4b13      	ldr	r3, [pc, #76]	; (8008a98 <_vfiprintf_r+0x230>)
 8008a4c:	a904      	add	r1, sp, #16
 8008a4e:	f7fd fc21 	bl	8006294 <_printf_float>
 8008a52:	4607      	mov	r7, r0
 8008a54:	1c78      	adds	r0, r7, #1
 8008a56:	d1d6      	bne.n	8008a06 <_vfiprintf_r+0x19e>
 8008a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a5a:	07d9      	lsls	r1, r3, #31
 8008a5c:	d405      	bmi.n	8008a6a <_vfiprintf_r+0x202>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	059a      	lsls	r2, r3, #22
 8008a62:	d402      	bmi.n	8008a6a <_vfiprintf_r+0x202>
 8008a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a66:	f7fe fa7e 	bl	8006f66 <__retarget_lock_release_recursive>
 8008a6a:	89ab      	ldrh	r3, [r5, #12]
 8008a6c:	065b      	lsls	r3, r3, #25
 8008a6e:	f53f af1d 	bmi.w	80088ac <_vfiprintf_r+0x44>
 8008a72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a74:	e71c      	b.n	80088b0 <_vfiprintf_r+0x48>
 8008a76:	ab03      	add	r3, sp, #12
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	462a      	mov	r2, r5
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <_vfiprintf_r+0x230>)
 8008a80:	a904      	add	r1, sp, #16
 8008a82:	f7fd fea7 	bl	80067d4 <_printf_i>
 8008a86:	e7e4      	b.n	8008a52 <_vfiprintf_r+0x1ea>
 8008a88:	0800a8cc 	.word	0x0800a8cc
 8008a8c:	0800a8d2 	.word	0x0800a8d2
 8008a90:	0800a8d6 	.word	0x0800a8d6
 8008a94:	08006295 	.word	0x08006295
 8008a98:	08008843 	.word	0x08008843

08008a9c <__sflush_r>:
 8008a9c:	898a      	ldrh	r2, [r1, #12]
 8008a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	0710      	lsls	r0, r2, #28
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	d457      	bmi.n	8008b58 <__sflush_r+0xbc>
 8008aa8:	684b      	ldr	r3, [r1, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	dc04      	bgt.n	8008ab8 <__sflush_r+0x1c>
 8008aae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	dc01      	bgt.n	8008ab8 <__sflush_r+0x1c>
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	d0fa      	beq.n	8008ab4 <__sflush_r+0x18>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ac4:	682f      	ldr	r7, [r5, #0]
 8008ac6:	6a21      	ldr	r1, [r4, #32]
 8008ac8:	602b      	str	r3, [r5, #0]
 8008aca:	d032      	beq.n	8008b32 <__sflush_r+0x96>
 8008acc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	075a      	lsls	r2, r3, #29
 8008ad2:	d505      	bpl.n	8008ae0 <__sflush_r+0x44>
 8008ad4:	6863      	ldr	r3, [r4, #4]
 8008ad6:	1ac0      	subs	r0, r0, r3
 8008ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ada:	b10b      	cbz	r3, 8008ae0 <__sflush_r+0x44>
 8008adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ade:	1ac0      	subs	r0, r0, r3
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	6a21      	ldr	r1, [r4, #32]
 8008aea:	47b0      	blx	r6
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	d106      	bne.n	8008b00 <__sflush_r+0x64>
 8008af2:	6829      	ldr	r1, [r5, #0]
 8008af4:	291d      	cmp	r1, #29
 8008af6:	d82b      	bhi.n	8008b50 <__sflush_r+0xb4>
 8008af8:	4a28      	ldr	r2, [pc, #160]	; (8008b9c <__sflush_r+0x100>)
 8008afa:	410a      	asrs	r2, r1
 8008afc:	07d6      	lsls	r6, r2, #31
 8008afe:	d427      	bmi.n	8008b50 <__sflush_r+0xb4>
 8008b00:	2200      	movs	r2, #0
 8008b02:	6062      	str	r2, [r4, #4]
 8008b04:	6922      	ldr	r2, [r4, #16]
 8008b06:	04d9      	lsls	r1, r3, #19
 8008b08:	6022      	str	r2, [r4, #0]
 8008b0a:	d504      	bpl.n	8008b16 <__sflush_r+0x7a>
 8008b0c:	1c42      	adds	r2, r0, #1
 8008b0e:	d101      	bne.n	8008b14 <__sflush_r+0x78>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	b903      	cbnz	r3, 8008b16 <__sflush_r+0x7a>
 8008b14:	6560      	str	r0, [r4, #84]	; 0x54
 8008b16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b18:	602f      	str	r7, [r5, #0]
 8008b1a:	2900      	cmp	r1, #0
 8008b1c:	d0ca      	beq.n	8008ab4 <__sflush_r+0x18>
 8008b1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b22:	4299      	cmp	r1, r3
 8008b24:	d002      	beq.n	8008b2c <__sflush_r+0x90>
 8008b26:	4628      	mov	r0, r5
 8008b28:	f7ff f8aa 	bl	8007c80 <_free_r>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	6360      	str	r0, [r4, #52]	; 0x34
 8008b30:	e7c1      	b.n	8008ab6 <__sflush_r+0x1a>
 8008b32:	2301      	movs	r3, #1
 8008b34:	4628      	mov	r0, r5
 8008b36:	47b0      	blx	r6
 8008b38:	1c41      	adds	r1, r0, #1
 8008b3a:	d1c8      	bne.n	8008ace <__sflush_r+0x32>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0c5      	beq.n	8008ace <__sflush_r+0x32>
 8008b42:	2b1d      	cmp	r3, #29
 8008b44:	d001      	beq.n	8008b4a <__sflush_r+0xae>
 8008b46:	2b16      	cmp	r3, #22
 8008b48:	d101      	bne.n	8008b4e <__sflush_r+0xb2>
 8008b4a:	602f      	str	r7, [r5, #0]
 8008b4c:	e7b2      	b.n	8008ab4 <__sflush_r+0x18>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b54:	81a3      	strh	r3, [r4, #12]
 8008b56:	e7ae      	b.n	8008ab6 <__sflush_r+0x1a>
 8008b58:	690f      	ldr	r7, [r1, #16]
 8008b5a:	2f00      	cmp	r7, #0
 8008b5c:	d0aa      	beq.n	8008ab4 <__sflush_r+0x18>
 8008b5e:	0793      	lsls	r3, r2, #30
 8008b60:	bf18      	it	ne
 8008b62:	2300      	movne	r3, #0
 8008b64:	680e      	ldr	r6, [r1, #0]
 8008b66:	bf08      	it	eq
 8008b68:	694b      	ldreq	r3, [r1, #20]
 8008b6a:	1bf6      	subs	r6, r6, r7
 8008b6c:	600f      	str	r7, [r1, #0]
 8008b6e:	608b      	str	r3, [r1, #8]
 8008b70:	2e00      	cmp	r6, #0
 8008b72:	dd9f      	ble.n	8008ab4 <__sflush_r+0x18>
 8008b74:	4633      	mov	r3, r6
 8008b76:	463a      	mov	r2, r7
 8008b78:	4628      	mov	r0, r5
 8008b7a:	6a21      	ldr	r1, [r4, #32]
 8008b7c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008b80:	47e0      	blx	ip
 8008b82:	2800      	cmp	r0, #0
 8008b84:	dc06      	bgt.n	8008b94 <__sflush_r+0xf8>
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b90:	81a3      	strh	r3, [r4, #12]
 8008b92:	e790      	b.n	8008ab6 <__sflush_r+0x1a>
 8008b94:	4407      	add	r7, r0
 8008b96:	1a36      	subs	r6, r6, r0
 8008b98:	e7ea      	b.n	8008b70 <__sflush_r+0xd4>
 8008b9a:	bf00      	nop
 8008b9c:	dfbffffe 	.word	0xdfbffffe

08008ba0 <_fflush_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	690b      	ldr	r3, [r1, #16]
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	b913      	cbnz	r3, 8008bb0 <_fflush_r+0x10>
 8008baa:	2500      	movs	r5, #0
 8008bac:	4628      	mov	r0, r5
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	b118      	cbz	r0, 8008bba <_fflush_r+0x1a>
 8008bb2:	6a03      	ldr	r3, [r0, #32]
 8008bb4:	b90b      	cbnz	r3, 8008bba <_fflush_r+0x1a>
 8008bb6:	f7fd ffa9 	bl	8006b0c <__sinit>
 8008bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0f3      	beq.n	8008baa <_fflush_r+0xa>
 8008bc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bc4:	07d0      	lsls	r0, r2, #31
 8008bc6:	d404      	bmi.n	8008bd2 <_fflush_r+0x32>
 8008bc8:	0599      	lsls	r1, r3, #22
 8008bca:	d402      	bmi.n	8008bd2 <_fflush_r+0x32>
 8008bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bce:	f7fe f9c9 	bl	8006f64 <__retarget_lock_acquire_recursive>
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	f7ff ff61 	bl	8008a9c <__sflush_r>
 8008bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bdc:	4605      	mov	r5, r0
 8008bde:	07da      	lsls	r2, r3, #31
 8008be0:	d4e4      	bmi.n	8008bac <_fflush_r+0xc>
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	059b      	lsls	r3, r3, #22
 8008be6:	d4e1      	bmi.n	8008bac <_fflush_r+0xc>
 8008be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bea:	f7fe f9bc 	bl	8006f66 <__retarget_lock_release_recursive>
 8008bee:	e7dd      	b.n	8008bac <_fflush_r+0xc>

08008bf0 <__swhatbuf_r>:
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf8:	4615      	mov	r5, r2
 8008bfa:	2900      	cmp	r1, #0
 8008bfc:	461e      	mov	r6, r3
 8008bfe:	b096      	sub	sp, #88	; 0x58
 8008c00:	da0c      	bge.n	8008c1c <__swhatbuf_r+0x2c>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	2100      	movs	r1, #0
 8008c06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c0a:	bf0c      	ite	eq
 8008c0c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c10:	2340      	movne	r3, #64	; 0x40
 8008c12:	2000      	movs	r0, #0
 8008c14:	6031      	str	r1, [r6, #0]
 8008c16:	602b      	str	r3, [r5, #0]
 8008c18:	b016      	add	sp, #88	; 0x58
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
 8008c1c:	466a      	mov	r2, sp
 8008c1e:	f000 f863 	bl	8008ce8 <_fstat_r>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	dbed      	blt.n	8008c02 <__swhatbuf_r+0x12>
 8008c26:	9901      	ldr	r1, [sp, #4]
 8008c28:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c2c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c30:	4259      	negs	r1, r3
 8008c32:	4159      	adcs	r1, r3
 8008c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c38:	e7eb      	b.n	8008c12 <__swhatbuf_r+0x22>

08008c3a <__smakebuf_r>:
 8008c3a:	898b      	ldrh	r3, [r1, #12]
 8008c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c3e:	079d      	lsls	r5, r3, #30
 8008c40:	4606      	mov	r6, r0
 8008c42:	460c      	mov	r4, r1
 8008c44:	d507      	bpl.n	8008c56 <__smakebuf_r+0x1c>
 8008c46:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	6123      	str	r3, [r4, #16]
 8008c4e:	2301      	movs	r3, #1
 8008c50:	6163      	str	r3, [r4, #20]
 8008c52:	b002      	add	sp, #8
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
 8008c56:	466a      	mov	r2, sp
 8008c58:	ab01      	add	r3, sp, #4
 8008c5a:	f7ff ffc9 	bl	8008bf0 <__swhatbuf_r>
 8008c5e:	9900      	ldr	r1, [sp, #0]
 8008c60:	4605      	mov	r5, r0
 8008c62:	4630      	mov	r0, r6
 8008c64:	f7ff f87c 	bl	8007d60 <_malloc_r>
 8008c68:	b948      	cbnz	r0, 8008c7e <__smakebuf_r+0x44>
 8008c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c6e:	059a      	lsls	r2, r3, #22
 8008c70:	d4ef      	bmi.n	8008c52 <__smakebuf_r+0x18>
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	f043 0302 	orr.w	r3, r3, #2
 8008c7a:	81a3      	strh	r3, [r4, #12]
 8008c7c:	e7e3      	b.n	8008c46 <__smakebuf_r+0xc>
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	6020      	str	r0, [r4, #0]
 8008c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	9b00      	ldr	r3, [sp, #0]
 8008c8a:	6120      	str	r0, [r4, #16]
 8008c8c:	6163      	str	r3, [r4, #20]
 8008c8e:	9b01      	ldr	r3, [sp, #4]
 8008c90:	b15b      	cbz	r3, 8008caa <__smakebuf_r+0x70>
 8008c92:	4630      	mov	r0, r6
 8008c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c98:	f000 f838 	bl	8008d0c <_isatty_r>
 8008c9c:	b128      	cbz	r0, 8008caa <__smakebuf_r+0x70>
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f023 0303 	bic.w	r3, r3, #3
 8008ca4:	f043 0301 	orr.w	r3, r3, #1
 8008ca8:	81a3      	strh	r3, [r4, #12]
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	431d      	orrs	r5, r3
 8008cae:	81a5      	strh	r5, [r4, #12]
 8008cb0:	e7cf      	b.n	8008c52 <__smakebuf_r+0x18>

08008cb2 <memmove>:
 8008cb2:	4288      	cmp	r0, r1
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	eb01 0402 	add.w	r4, r1, r2
 8008cba:	d902      	bls.n	8008cc2 <memmove+0x10>
 8008cbc:	4284      	cmp	r4, r0
 8008cbe:	4623      	mov	r3, r4
 8008cc0:	d807      	bhi.n	8008cd2 <memmove+0x20>
 8008cc2:	1e43      	subs	r3, r0, #1
 8008cc4:	42a1      	cmp	r1, r4
 8008cc6:	d008      	beq.n	8008cda <memmove+0x28>
 8008cc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ccc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cd0:	e7f8      	b.n	8008cc4 <memmove+0x12>
 8008cd2:	4601      	mov	r1, r0
 8008cd4:	4402      	add	r2, r0
 8008cd6:	428a      	cmp	r2, r1
 8008cd8:	d100      	bne.n	8008cdc <memmove+0x2a>
 8008cda:	bd10      	pop	{r4, pc}
 8008cdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ce0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ce4:	e7f7      	b.n	8008cd6 <memmove+0x24>
	...

08008ce8 <_fstat_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	2300      	movs	r3, #0
 8008cec:	4d06      	ldr	r5, [pc, #24]	; (8008d08 <_fstat_r+0x20>)
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	602b      	str	r3, [r5, #0]
 8008cf6:	f7fa fa69 	bl	80031cc <_fstat>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	d102      	bne.n	8008d04 <_fstat_r+0x1c>
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	b103      	cbz	r3, 8008d04 <_fstat_r+0x1c>
 8008d02:	6023      	str	r3, [r4, #0]
 8008d04:	bd38      	pop	{r3, r4, r5, pc}
 8008d06:	bf00      	nop
 8008d08:	200008ec 	.word	0x200008ec

08008d0c <_isatty_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	2300      	movs	r3, #0
 8008d10:	4d05      	ldr	r5, [pc, #20]	; (8008d28 <_isatty_r+0x1c>)
 8008d12:	4604      	mov	r4, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	602b      	str	r3, [r5, #0]
 8008d18:	f7fa fa67 	bl	80031ea <_isatty>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_isatty_r+0x1a>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_isatty_r+0x1a>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	200008ec 	.word	0x200008ec

08008d2c <_sbrk_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	2300      	movs	r3, #0
 8008d30:	4d05      	ldr	r5, [pc, #20]	; (8008d48 <_sbrk_r+0x1c>)
 8008d32:	4604      	mov	r4, r0
 8008d34:	4608      	mov	r0, r1
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	f7fa fa6e 	bl	8003218 <_sbrk>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_sbrk_r+0x1a>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_sbrk_r+0x1a>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	200008ec 	.word	0x200008ec

08008d4c <__assert_func>:
 8008d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d4e:	4614      	mov	r4, r2
 8008d50:	461a      	mov	r2, r3
 8008d52:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <__assert_func+0x2c>)
 8008d54:	4605      	mov	r5, r0
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68d8      	ldr	r0, [r3, #12]
 8008d5a:	b14c      	cbz	r4, 8008d70 <__assert_func+0x24>
 8008d5c:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <__assert_func+0x30>)
 8008d5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d62:	9100      	str	r1, [sp, #0]
 8008d64:	462b      	mov	r3, r5
 8008d66:	4906      	ldr	r1, [pc, #24]	; (8008d80 <__assert_func+0x34>)
 8008d68:	f000 f870 	bl	8008e4c <fiprintf>
 8008d6c:	f000 f880 	bl	8008e70 <abort>
 8008d70:	4b04      	ldr	r3, [pc, #16]	; (8008d84 <__assert_func+0x38>)
 8008d72:	461c      	mov	r4, r3
 8008d74:	e7f3      	b.n	8008d5e <__assert_func+0x12>
 8008d76:	bf00      	nop
 8008d78:	20000074 	.word	0x20000074
 8008d7c:	0800a8e7 	.word	0x0800a8e7
 8008d80:	0800a8f4 	.word	0x0800a8f4
 8008d84:	0800a922 	.word	0x0800a922

08008d88 <_calloc_r>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	fba1 5402 	umull	r5, r4, r1, r2
 8008d8e:	b934      	cbnz	r4, 8008d9e <_calloc_r+0x16>
 8008d90:	4629      	mov	r1, r5
 8008d92:	f7fe ffe5 	bl	8007d60 <_malloc_r>
 8008d96:	4606      	mov	r6, r0
 8008d98:	b928      	cbnz	r0, 8008da6 <_calloc_r+0x1e>
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}
 8008d9e:	220c      	movs	r2, #12
 8008da0:	2600      	movs	r6, #0
 8008da2:	6002      	str	r2, [r0, #0]
 8008da4:	e7f9      	b.n	8008d9a <_calloc_r+0x12>
 8008da6:	462a      	mov	r2, r5
 8008da8:	4621      	mov	r1, r4
 8008daa:	f7fe f85f 	bl	8006e6c <memset>
 8008dae:	e7f4      	b.n	8008d9a <_calloc_r+0x12>

08008db0 <__ascii_mbtowc>:
 8008db0:	b082      	sub	sp, #8
 8008db2:	b901      	cbnz	r1, 8008db6 <__ascii_mbtowc+0x6>
 8008db4:	a901      	add	r1, sp, #4
 8008db6:	b142      	cbz	r2, 8008dca <__ascii_mbtowc+0x1a>
 8008db8:	b14b      	cbz	r3, 8008dce <__ascii_mbtowc+0x1e>
 8008dba:	7813      	ldrb	r3, [r2, #0]
 8008dbc:	600b      	str	r3, [r1, #0]
 8008dbe:	7812      	ldrb	r2, [r2, #0]
 8008dc0:	1e10      	subs	r0, r2, #0
 8008dc2:	bf18      	it	ne
 8008dc4:	2001      	movne	r0, #1
 8008dc6:	b002      	add	sp, #8
 8008dc8:	4770      	bx	lr
 8008dca:	4610      	mov	r0, r2
 8008dcc:	e7fb      	b.n	8008dc6 <__ascii_mbtowc+0x16>
 8008dce:	f06f 0001 	mvn.w	r0, #1
 8008dd2:	e7f8      	b.n	8008dc6 <__ascii_mbtowc+0x16>

08008dd4 <_realloc_r>:
 8008dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd8:	4680      	mov	r8, r0
 8008dda:	4614      	mov	r4, r2
 8008ddc:	460e      	mov	r6, r1
 8008dde:	b921      	cbnz	r1, 8008dea <_realloc_r+0x16>
 8008de0:	4611      	mov	r1, r2
 8008de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008de6:	f7fe bfbb 	b.w	8007d60 <_malloc_r>
 8008dea:	b92a      	cbnz	r2, 8008df8 <_realloc_r+0x24>
 8008dec:	f7fe ff48 	bl	8007c80 <_free_r>
 8008df0:	4625      	mov	r5, r4
 8008df2:	4628      	mov	r0, r5
 8008df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df8:	f000 f841 	bl	8008e7e <_malloc_usable_size_r>
 8008dfc:	4284      	cmp	r4, r0
 8008dfe:	4607      	mov	r7, r0
 8008e00:	d802      	bhi.n	8008e08 <_realloc_r+0x34>
 8008e02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e06:	d812      	bhi.n	8008e2e <_realloc_r+0x5a>
 8008e08:	4621      	mov	r1, r4
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	f7fe ffa8 	bl	8007d60 <_malloc_r>
 8008e10:	4605      	mov	r5, r0
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d0ed      	beq.n	8008df2 <_realloc_r+0x1e>
 8008e16:	42bc      	cmp	r4, r7
 8008e18:	4622      	mov	r2, r4
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	bf28      	it	cs
 8008e1e:	463a      	movcs	r2, r7
 8008e20:	f7fe f8b0 	bl	8006f84 <memcpy>
 8008e24:	4631      	mov	r1, r6
 8008e26:	4640      	mov	r0, r8
 8008e28:	f7fe ff2a 	bl	8007c80 <_free_r>
 8008e2c:	e7e1      	b.n	8008df2 <_realloc_r+0x1e>
 8008e2e:	4635      	mov	r5, r6
 8008e30:	e7df      	b.n	8008df2 <_realloc_r+0x1e>

08008e32 <__ascii_wctomb>:
 8008e32:	4603      	mov	r3, r0
 8008e34:	4608      	mov	r0, r1
 8008e36:	b141      	cbz	r1, 8008e4a <__ascii_wctomb+0x18>
 8008e38:	2aff      	cmp	r2, #255	; 0xff
 8008e3a:	d904      	bls.n	8008e46 <__ascii_wctomb+0x14>
 8008e3c:	228a      	movs	r2, #138	; 0x8a
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	4770      	bx	lr
 8008e46:	2001      	movs	r0, #1
 8008e48:	700a      	strb	r2, [r1, #0]
 8008e4a:	4770      	bx	lr

08008e4c <fiprintf>:
 8008e4c:	b40e      	push	{r1, r2, r3}
 8008e4e:	b503      	push	{r0, r1, lr}
 8008e50:	4601      	mov	r1, r0
 8008e52:	ab03      	add	r3, sp, #12
 8008e54:	4805      	ldr	r0, [pc, #20]	; (8008e6c <fiprintf+0x20>)
 8008e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e5a:	6800      	ldr	r0, [r0, #0]
 8008e5c:	9301      	str	r3, [sp, #4]
 8008e5e:	f7ff fd03 	bl	8008868 <_vfiprintf_r>
 8008e62:	b002      	add	sp, #8
 8008e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e68:	b003      	add	sp, #12
 8008e6a:	4770      	bx	lr
 8008e6c:	20000074 	.word	0x20000074

08008e70 <abort>:
 8008e70:	2006      	movs	r0, #6
 8008e72:	b508      	push	{r3, lr}
 8008e74:	f000 f834 	bl	8008ee0 <raise>
 8008e78:	2001      	movs	r0, #1
 8008e7a:	f7fa f975 	bl	8003168 <_exit>

08008e7e <_malloc_usable_size_r>:
 8008e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e82:	1f18      	subs	r0, r3, #4
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	bfbc      	itt	lt
 8008e88:	580b      	ldrlt	r3, [r1, r0]
 8008e8a:	18c0      	addlt	r0, r0, r3
 8008e8c:	4770      	bx	lr

08008e8e <_raise_r>:
 8008e8e:	291f      	cmp	r1, #31
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4604      	mov	r4, r0
 8008e94:	460d      	mov	r5, r1
 8008e96:	d904      	bls.n	8008ea2 <_raise_r+0x14>
 8008e98:	2316      	movs	r3, #22
 8008e9a:	6003      	str	r3, [r0, #0]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	bd38      	pop	{r3, r4, r5, pc}
 8008ea2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ea4:	b112      	cbz	r2, 8008eac <_raise_r+0x1e>
 8008ea6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008eaa:	b94b      	cbnz	r3, 8008ec0 <_raise_r+0x32>
 8008eac:	4620      	mov	r0, r4
 8008eae:	f000 f831 	bl	8008f14 <_getpid_r>
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	4601      	mov	r1, r0
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ebc:	f000 b818 	b.w	8008ef0 <_kill_r>
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d00a      	beq.n	8008eda <_raise_r+0x4c>
 8008ec4:	1c59      	adds	r1, r3, #1
 8008ec6:	d103      	bne.n	8008ed0 <_raise_r+0x42>
 8008ec8:	2316      	movs	r3, #22
 8008eca:	6003      	str	r3, [r0, #0]
 8008ecc:	2001      	movs	r0, #1
 8008ece:	e7e7      	b.n	8008ea0 <_raise_r+0x12>
 8008ed0:	2400      	movs	r4, #0
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ed8:	4798      	blx	r3
 8008eda:	2000      	movs	r0, #0
 8008edc:	e7e0      	b.n	8008ea0 <_raise_r+0x12>
	...

08008ee0 <raise>:
 8008ee0:	4b02      	ldr	r3, [pc, #8]	; (8008eec <raise+0xc>)
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	6818      	ldr	r0, [r3, #0]
 8008ee6:	f7ff bfd2 	b.w	8008e8e <_raise_r>
 8008eea:	bf00      	nop
 8008eec:	20000074 	.word	0x20000074

08008ef0 <_kill_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	4d06      	ldr	r5, [pc, #24]	; (8008f10 <_kill_r+0x20>)
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	4608      	mov	r0, r1
 8008efa:	4611      	mov	r1, r2
 8008efc:	602b      	str	r3, [r5, #0]
 8008efe:	f7fa f923 	bl	8003148 <_kill>
 8008f02:	1c43      	adds	r3, r0, #1
 8008f04:	d102      	bne.n	8008f0c <_kill_r+0x1c>
 8008f06:	682b      	ldr	r3, [r5, #0]
 8008f08:	b103      	cbz	r3, 8008f0c <_kill_r+0x1c>
 8008f0a:	6023      	str	r3, [r4, #0]
 8008f0c:	bd38      	pop	{r3, r4, r5, pc}
 8008f0e:	bf00      	nop
 8008f10:	200008ec 	.word	0x200008ec

08008f14 <_getpid_r>:
 8008f14:	f7fa b911 	b.w	800313a <_getpid>

08008f18 <_init>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr

08008f24 <_fini>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	bf00      	nop
 8008f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2a:	bc08      	pop	{r3}
 8008f2c:	469e      	mov	lr, r3
 8008f2e:	4770      	bx	lr
