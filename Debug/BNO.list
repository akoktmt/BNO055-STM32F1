
BNO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd98  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800dea8  0800dea8  0001dea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4b8  0800e4b8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4b8  0800e4b8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4b8  0800e4b8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4b8  0800e4b8  0001e4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4bc  0800e4bc  0001e4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800e4c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cbc  200001d8  0800e698  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e94  0800e698  00021e94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ecce  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004664  00000000  00000000  0003ef12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a08  00000000  00000000  00043578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000144b  00000000  00000000  00044f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c4e4  00000000  00000000  000463cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9fb  00000000  00000000  000628af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c430  00000000  00000000  000822aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008364  00000000  00000000  0011e6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00126a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800de90 	.word	0x0800de90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800de90 	.word	0x0800de90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	2200      	movs	r2, #0
 800102c:	2300      	movs	r3, #0
 800102e:	4628      	mov	r0, r5
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <Euler_Calibration>:
 *      Author: win 10
 */
#include "bno055.h"
#include "bno_config.h"
#include "Calib.h"
void Euler_Calibration(bno055_t *bno , bno055_euler_t *eul,EulerCalib *Euler){
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
		float RateRoll,RatePitch,RateYaw;
		int RateNumber;
		bno->euler(bno, eul);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	4798      	blx	r3
		for(RateNumber=0;RateNumber<2000;RateNumber++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	e01d      	b.n	80010ee <Euler_Calibration+0x5a>
		{
		RateRoll+=eul->roll;
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4619      	mov	r1, r3
 80010b8:	69f8      	ldr	r0, [r7, #28]
 80010ba:	f7ff fd5b 	bl	8000b74 <__addsf3>
 80010be:	4603      	mov	r3, r0
 80010c0:	61fb      	str	r3, [r7, #28]
		RatePitch+=eul->pitch;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4619      	mov	r1, r3
 80010c8:	69b8      	ldr	r0, [r7, #24]
 80010ca:	f7ff fd53 	bl	8000b74 <__addsf3>
 80010ce:	4603      	mov	r3, r0
 80010d0:	61bb      	str	r3, [r7, #24]
		RateYaw+=eul->yaw;
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	4619      	mov	r1, r3
 80010d8:	6978      	ldr	r0, [r7, #20]
 80010da:	f7ff fd4b 	bl	8000b74 <__addsf3>
 80010de:	4603      	mov	r3, r0
 80010e0:	617b      	str	r3, [r7, #20]
		HAL_Delay(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f002 fac2 	bl	800366c <HAL_Delay>
		for(RateNumber=0;RateNumber<2000;RateNumber++)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	3301      	adds	r3, #1
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010f4:	dbdd      	blt.n	80010b2 <Euler_Calibration+0x1e>
		}
		RateRoll/=2000;
 80010f6:	490f      	ldr	r1, [pc, #60]	; (8001134 <Euler_Calibration+0xa0>)
 80010f8:	69f8      	ldr	r0, [r7, #28]
 80010fa:	f7ff fef7 	bl	8000eec <__aeabi_fdiv>
 80010fe:	4603      	mov	r3, r0
 8001100:	61fb      	str	r3, [r7, #28]
		RatePitch/=2000;
 8001102:	490c      	ldr	r1, [pc, #48]	; (8001134 <Euler_Calibration+0xa0>)
 8001104:	69b8      	ldr	r0, [r7, #24]
 8001106:	f7ff fef1 	bl	8000eec <__aeabi_fdiv>
 800110a:	4603      	mov	r3, r0
 800110c:	61bb      	str	r3, [r7, #24]
		RateYaw/=2000;
 800110e:	4909      	ldr	r1, [pc, #36]	; (8001134 <Euler_Calibration+0xa0>)
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f7ff feeb 	bl	8000eec <__aeabi_fdiv>
 8001116:	4603      	mov	r3, r0
 8001118:	617b      	str	r3, [r7, #20]

		Euler->RatePitch=RatePitch;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	605a      	str	r2, [r3, #4]
		Euler->RateRoll=RateRoll;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	601a      	str	r2, [r3, #0]
		Euler->RateYaw=RateYaw;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	609a      	str	r2, [r3, #8]
}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	44fa0000 	.word	0x44fa0000

08001138 <Euler_getData>:
void Euler_getData(bno055_euler_t *eul,bno055_t *bno,EulerCalib *Euler){
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]

				bno->euler(bno, eul);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800114a:	68f9      	ldr	r1, [r7, #12]
 800114c:	68b8      	ldr	r0, [r7, #8]
 800114e:	4798      	blx	r3
			    eul->roll-= Euler->RateRoll;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4610      	mov	r0, r2
 800115c:	f7ff fd08 	bl	8000b70 <__aeabi_fsub>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	601a      	str	r2, [r3, #0]
				eul->pitch-=Euler->RatePitch;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4619      	mov	r1, r3
 8001172:	4610      	mov	r0, r2
 8001174:	f7ff fcfc 	bl	8000b70 <__aeabi_fsub>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
				eul->yaw-=Euler->RateYaw;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4619      	mov	r1, r3
 800118a:	4610      	mov	r0, r2
 800118c:	f7ff fcf0 	bl	8000b70 <__aeabi_fsub>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	609a      	str	r2, [r3, #8]
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <bno055_init>:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */


error_bno bno055_init(bno055_t* imu) {
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b0af      	sub	sp, #188	; 0xbc
 80011a4:	af2a      	add	r7, sp, #168	; 0xa8
 80011a6:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	799b      	ldrb	r3, [r3, #6]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 80011b8:	687c      	ldr	r4, [r7, #4]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80011be:	f107 030e 	add.w	r3, r7, #14
 80011c2:	9328      	str	r3, [sp, #160]	; 0xa0
 80011c4:	2300      	movs	r3, #0
 80011c6:	9327      	str	r3, [sp, #156]	; 0x9c
 80011c8:	4668      	mov	r0, sp
 80011ca:	f104 0310 	add.w	r3, r4, #16
 80011ce:	229c      	movs	r2, #156	; 0x9c
 80011d0:	4619      	mov	r1, r3
 80011d2:	f009 fb5c 	bl	800a88e <memcpy>
 80011d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011da:	f001 fbe4 	bl	80029a6 <bno055_read_regs>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <bno055_init+0x4c>
        return err;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	e0b6      	b.n	800135a <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	2ba0      	cmp	r3, #160	; 0xa0
 80011f0:	d001      	beq.n	80011f6 <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 80011f2:	2306      	movs	r3, #6
 80011f4:	e0b1      	b.n	800135a <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80011f6:	2100      	movs	r1, #0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f001 faa2 	bl	8002742 <bno055_set_opmode>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <bno055_init+0x6c>
        return err;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	e0a6      	b.n	800135a <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 800120c:	2002      	movs	r0, #2
 800120e:	f002 fa2d 	bl	800366c <HAL_Delay>
    bno055_reset(imu);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f001 fb81 	bl	800291a <bno055_reset>
    HAL_Delay(5000);
 8001218:	f241 3088 	movw	r0, #5000	; 0x1388
 800121c:	f002 fa26 	bl	800366c <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8001220:	2100      	movs	r1, #0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f001 fb1c 	bl	8002860 <bno055_set_pwr_mode>
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <bno055_init+0x96>
        return err;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	e091      	b.n	800135a <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 8001236:	200a      	movs	r0, #10
 8001238:	f002 fa18 	bl	800366c <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800123c:	2100      	movs	r1, #0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f001 fc14 	bl	8002a6c <bno055_set_page>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <bno055_init+0xb2>
        return err;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	e083      	b.n	800135a <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8001252:	200c      	movs	r0, #12
 8001254:	f002 fa0a 	bl	800366c <HAL_Delay>
    bno055_on(imu);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f001 fb81 	bl	8002960 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	791b      	ldrb	r3, [r3, #4]
 8001262:	4619      	mov	r1, r3
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f001 fa6c 	bl	8002742 <bno055_set_opmode>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <bno055_init+0xd8>
        return err;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	e070      	b.n	800135a <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8001278:	2018      	movs	r0, #24
 800127a:	f002 f9f7 	bl	800366c <HAL_Delay>

    imu->temperature = &bno055_temperature;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a38      	ldr	r2, [pc, #224]	; (8001364 <bno055_init+0x1c4>)
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a38      	ldr	r2, [pc, #224]	; (8001368 <bno055_init+0x1c8>)
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a37      	ldr	r2, [pc, #220]	; (800136c <bno055_init+0x1cc>)
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a37      	ldr	r2, [pc, #220]	; (8001370 <bno055_init+0x1d0>)
 8001294:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a36      	ldr	r2, [pc, #216]	; (8001374 <bno055_init+0x1d4>)
 800129a:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a36      	ldr	r2, [pc, #216]	; (8001378 <bno055_init+0x1d8>)
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a35      	ldr	r2, [pc, #212]	; (800137c <bno055_init+0x1dc>)
 80012a6:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a35      	ldr	r2, [pc, #212]	; (8001380 <bno055_init+0x1e0>)
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a34      	ldr	r2, [pc, #208]	; (8001384 <bno055_init+0x1e4>)
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a34      	ldr	r2, [pc, #208]	; (8001388 <bno055_init+0x1e8>)
 80012b8:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a33      	ldr	r2, [pc, #204]	; (800138c <bno055_init+0x1ec>)
 80012be:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a33      	ldr	r2, [pc, #204]	; (8001390 <bno055_init+0x1f0>)
 80012c4:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a32      	ldr	r2, [pc, #200]	; (8001394 <bno055_init+0x1f4>)
 80012ca:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a32      	ldr	r2, [pc, #200]	; (8001398 <bno055_init+0x1f8>)
 80012d0:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a31      	ldr	r2, [pc, #196]	; (800139c <bno055_init+0x1fc>)
 80012d6:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a31      	ldr	r2, [pc, #196]	; (80013a0 <bno055_init+0x200>)
 80012dc:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <bno055_init+0x204>)
 80012e2:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <bno055_init+0x208>)
 80012e8:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a2f      	ldr	r2, [pc, #188]	; (80013ac <bno055_init+0x20c>)
 80012ee:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a2f      	ldr	r2, [pc, #188]	; (80013b0 <bno055_init+0x210>)
 80012f4:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a2e      	ldr	r2, [pc, #184]	; (80013b4 <bno055_init+0x214>)
 80012fa:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a2e      	ldr	r2, [pc, #184]	; (80013b8 <bno055_init+0x218>)
 8001300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a2d      	ldr	r2, [pc, #180]	; (80013bc <bno055_init+0x21c>)
 8001308:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a2c      	ldr	r2, [pc, #176]	; (80013c0 <bno055_init+0x220>)
 800130e:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a2c      	ldr	r2, [pc, #176]	; (80013c4 <bno055_init+0x224>)
 8001314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a2b      	ldr	r2, [pc, #172]	; (80013c8 <bno055_init+0x228>)
 800131c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a2a      	ldr	r2, [pc, #168]	; (80013cc <bno055_init+0x22c>)
 8001324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <bno055_init+0x230>)
 800132c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a28      	ldr	r2, [pc, #160]	; (80013d4 <bno055_init+0x234>)
 8001334:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <bno055_init+0x238>)
 800133c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a26      	ldr	r2, [pc, #152]	; (80013dc <bno055_init+0x23c>)
 8001344:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <bno055_init+0x240>)
 800134c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a24      	ldr	r2, [pc, #144]	; (80013e4 <bno055_init+0x244>)
 8001354:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bd90      	pop	{r4, r7, pc}
 8001362:	bf00      	nop
 8001364:	080013e9 	.word	0x080013e9
 8001368:	08001451 	.word	0x08001451
 800136c:	080014d5 	.word	0x080014d5
 8001370:	08001559 	.word	0x08001559
 8001374:	080015dd 	.word	0x080015dd
 8001378:	080016ad 	.word	0x080016ad
 800137c:	08001731 	.word	0x08001731
 8001380:	080017b5 	.word	0x080017b5
 8001384:	08001839 	.word	0x08001839
 8001388:	08001909 	.word	0x08001909
 800138c:	0800198d 	.word	0x0800198d
 8001390:	08001a11 	.word	0x08001a11
 8001394:	08001a95 	.word	0x08001a95
 8001398:	08001b65 	.word	0x08001b65
 800139c:	08001bd5 	.word	0x08001bd5
 80013a0:	08001c45 	.word	0x08001c45
 80013a4:	08001cb5 	.word	0x08001cb5
 80013a8:	08001d75 	.word	0x08001d75
 80013ac:	08001df9 	.word	0x08001df9
 80013b0:	08001e7d 	.word	0x08001e7d
 80013b4:	08001f01 	.word	0x08001f01
 80013b8:	08001fd1 	.word	0x08001fd1
 80013bc:	08002055 	.word	0x08002055
 80013c0:	080020d9 	.word	0x080020d9
 80013c4:	0800215d 	.word	0x0800215d
 80013c8:	0800222d 	.word	0x0800222d
 80013cc:	0800229d 	.word	0x0800229d
 80013d0:	0800230d 	.word	0x0800230d
 80013d4:	0800237d 	.word	0x0800237d
 80013d8:	080023ed 	.word	0x080023ed
 80013dc:	080024d5 	.word	0x080024d5
 80013e0:	080025a5 	.word	0x080025a5
 80013e4:	08002673 	.word	0x08002673

080013e8 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b0af      	sub	sp, #188	; 0xbc
 80013ec:	af2a      	add	r7, sp, #168	; 0xa8
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80013f6:	687c      	ldr	r4, [r7, #4]
 80013f8:	2301      	movs	r3, #1
 80013fa:	9329      	str	r3, [sp, #164]	; 0xa4
 80013fc:	f107 030e 	add.w	r3, r7, #14
 8001400:	9328      	str	r3, [sp, #160]	; 0xa0
 8001402:	2334      	movs	r3, #52	; 0x34
 8001404:	9327      	str	r3, [sp, #156]	; 0x9c
 8001406:	4668      	mov	r0, sp
 8001408:	f104 0310 	add.w	r3, r4, #16
 800140c:	229c      	movs	r2, #156	; 0x9c
 800140e:	4619      	mov	r1, r3
 8001410:	f009 fa3d 	bl	800a88e <memcpy>
 8001414:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001418:	f001 fac5 	bl	80029a6 <bno055_read_regs>
 800141c:	4603      	mov	r3, r0
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <bno055_temperature+0x42>
        return err;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	e00d      	b.n	8001446 <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7bdb      	ldrb	r3, [r3, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <bno055_temperature+0x54>
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	b25b      	sxtb	r3, r3
 800143a:	e001      	b.n	8001440 <bno055_temperature+0x58>
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	b25b      	sxtb	r3, r3
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bd90      	pop	{r4, r7, pc}
	...

08001450 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b0af      	sub	sp, #188	; 0xbc
 8001454:	af2a      	add	r7, sp, #168	; 0xa8
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 800145a:	687c      	ldr	r4, [r7, #4]
 800145c:	2302      	movs	r3, #2
 800145e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	9328      	str	r3, [sp, #160]	; 0xa0
 8001466:	2308      	movs	r3, #8
 8001468:	9327      	str	r3, [sp, #156]	; 0x9c
 800146a:	4668      	mov	r0, sp
 800146c:	f104 0310 	add.w	r3, r4, #16
 8001470:	229c      	movs	r2, #156	; 0x9c
 8001472:	4619      	mov	r1, r3
 8001474:	f009 fa0b 	bl	800a88e <memcpy>
 8001478:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800147c:	f001 fa93 	bl	80029a6 <bno055_read_regs>
 8001480:	4603      	mov	r3, r0
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <bno055_acc_x+0x3e>
        return err;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	e01b      	b.n	80014c6 <bno055_acc_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800148e:	7b7b      	ldrb	r3, [r7, #13]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b21a      	sxth	r2, r3
 8001494:	7b3b      	ldrb	r3, [r7, #12]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21b      	sxth	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fc1d 	bl	8000cdc <__aeabi_i2f>
 80014a2:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <bno055_acc_x+0x60>
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <bno055_acc_x+0x80>)
 80014ae:	e001      	b.n	80014b4 <bno055_acc_x+0x64>
 80014b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 80014b4:	4619      	mov	r1, r3
 80014b6:	4610      	mov	r0, r2
 80014b8:	f7ff fd18 	bl	8000eec <__aeabi_fdiv>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80014c4:	2300      	movs	r3, #0
};
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	42c80000 	.word	0x42c80000

080014d4 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b0af      	sub	sp, #188	; 0xbc
 80014d8:	af2a      	add	r7, sp, #168	; 0xa8
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80014de:	687c      	ldr	r4, [r7, #4]
 80014e0:	2302      	movs	r3, #2
 80014e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80014ea:	230a      	movs	r3, #10
 80014ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80014ee:	4668      	mov	r0, sp
 80014f0:	f104 0310 	add.w	r3, r4, #16
 80014f4:	229c      	movs	r2, #156	; 0x9c
 80014f6:	4619      	mov	r1, r3
 80014f8:	f009 f9c9 	bl	800a88e <memcpy>
 80014fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001500:	f001 fa51 	bl	80029a6 <bno055_read_regs>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <bno055_acc_y+0x3e>
        return err;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	e01b      	b.n	800154a <bno055_acc_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001512:	7b7b      	ldrb	r3, [r7, #13]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	7b3b      	ldrb	r3, [r7, #12]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21b      	sxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fbdb 	bl	8000cdc <__aeabi_i2f>
 8001526:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <bno055_acc_y+0x60>
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <bno055_acc_y+0x80>)
 8001532:	e001      	b.n	8001538 <bno055_acc_y+0x64>
 8001534:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001538:	4619      	mov	r1, r3
 800153a:	4610      	mov	r0, r2
 800153c:	f7ff fcd6 	bl	8000eec <__aeabi_fdiv>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001548:	2300      	movs	r3, #0
};
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	bf00      	nop
 8001554:	42c80000 	.word	0x42c80000

08001558 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b0af      	sub	sp, #188	; 0xbc
 800155c:	af2a      	add	r7, sp, #168	; 0xa8
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001562:	687c      	ldr	r4, [r7, #4]
 8001564:	2302      	movs	r3, #2
 8001566:	9329      	str	r3, [sp, #164]	; 0xa4
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	9328      	str	r3, [sp, #160]	; 0xa0
 800156e:	230c      	movs	r3, #12
 8001570:	9327      	str	r3, [sp, #156]	; 0x9c
 8001572:	4668      	mov	r0, sp
 8001574:	f104 0310 	add.w	r3, r4, #16
 8001578:	229c      	movs	r2, #156	; 0x9c
 800157a:	4619      	mov	r1, r3
 800157c:	f009 f987 	bl	800a88e <memcpy>
 8001580:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001584:	f001 fa0f 	bl	80029a6 <bno055_read_regs>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <bno055_acc_z+0x3e>
        return err;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	e01b      	b.n	80015ce <bno055_acc_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001596:	7b7b      	ldrb	r3, [r7, #13]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	7b3b      	ldrb	r3, [r7, #12]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fb99 	bl	8000cdc <__aeabi_i2f>
 80015aa:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <bno055_acc_z+0x60>
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <bno055_acc_z+0x80>)
 80015b6:	e001      	b.n	80015bc <bno055_acc_z+0x64>
 80015b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f7ff fc94 	bl	8000eec <__aeabi_fdiv>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80015cc:	2300      	movs	r3, #0
};
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	42c80000 	.word	0x42c80000

080015dc <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b0b1      	sub	sp, #196	; 0xc4
 80015e0:	af2a      	add	r7, sp, #168	; 0xa8
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80015e6:	687c      	ldr	r4, [r7, #4]
 80015e8:	2306      	movs	r3, #6
 80015ea:	9329      	str	r3, [sp, #164]	; 0xa4
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	9328      	str	r3, [sp, #160]	; 0xa0
 80015f2:	2308      	movs	r3, #8
 80015f4:	9327      	str	r3, [sp, #156]	; 0x9c
 80015f6:	4668      	mov	r0, sp
 80015f8:	f104 0310 	add.w	r3, r4, #16
 80015fc:	229c      	movs	r2, #156	; 0x9c
 80015fe:	4619      	mov	r1, r3
 8001600:	f009 f945 	bl	800a88e <memcpy>
 8001604:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001608:	f001 f9cd 	bl	80029a6 <bno055_read_regs>
 800160c:	4603      	mov	r3, r0
 800160e:	75fb      	strb	r3, [r7, #23]
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <bno055_acc+0x3e>
        return err;
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	e042      	b.n	80016a0 <bno055_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <bno055_acc+0x4a>
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <bno055_acc+0xcc>)
 8001624:	e001      	b.n	800162a <bno055_acc+0x4e>
 8001626:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800162a:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 800162c:	7a7b      	ldrb	r3, [r7, #9]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b21a      	sxth	r2, r3
 8001632:	7a3b      	ldrb	r3, [r7, #8]
 8001634:	b21b      	sxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b21b      	sxth	r3, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fb4e 	bl	8000cdc <__aeabi_i2f>
 8001640:	4603      	mov	r3, r0
 8001642:	6939      	ldr	r1, [r7, #16]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fc51 	bl	8000eec <__aeabi_fdiv>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001652:	7afb      	ldrb	r3, [r7, #11]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	7abb      	ldrb	r3, [r7, #10]
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b21b      	sxth	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fb3b 	bl	8000cdc <__aeabi_i2f>
 8001666:	4603      	mov	r3, r0
 8001668:	6939      	ldr	r1, [r7, #16]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fc3e 	bl	8000eec <__aeabi_fdiv>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001678:	7b7b      	ldrb	r3, [r7, #13]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b21a      	sxth	r2, r3
 800167e:	7b3b      	ldrb	r3, [r7, #12]
 8001680:	b21b      	sxth	r3, r3
 8001682:	4313      	orrs	r3, r2
 8001684:	b21b      	sxth	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fb28 	bl	8000cdc <__aeabi_i2f>
 800168c:	4603      	mov	r3, r0
 800168e:	6939      	ldr	r1, [r7, #16]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fc2b 	bl	8000eec <__aeabi_fdiv>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 800169e:	2300      	movs	r3, #0
};
 80016a0:	4618      	mov	r0, r3
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}
 80016a8:	42c80000 	.word	0x42c80000

080016ac <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b0af      	sub	sp, #188	; 0xbc
 80016b0:	af2a      	add	r7, sp, #168	; 0xa8
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80016b6:	687c      	ldr	r4, [r7, #4]
 80016b8:	2302      	movs	r3, #2
 80016ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80016c2:	2328      	movs	r3, #40	; 0x28
 80016c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80016c6:	4668      	mov	r0, sp
 80016c8:	f104 0310 	add.w	r3, r4, #16
 80016cc:	229c      	movs	r2, #156	; 0x9c
 80016ce:	4619      	mov	r1, r3
 80016d0:	f009 f8dd 	bl	800a88e <memcpy>
 80016d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016d8:	f001 f965 	bl	80029a6 <bno055_read_regs>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <bno055_linear_acc_x+0x3e>
        return err;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	e01b      	b.n	8001722 <bno055_linear_acc_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	7b3b      	ldrb	r3, [r7, #12]
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff faef 	bl	8000cdc <__aeabi_i2f>
 80016fe:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <bno055_linear_acc_x+0x60>
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <bno055_linear_acc_x+0x80>)
 800170a:	e001      	b.n	8001710 <bno055_linear_acc_x+0x64>
 800170c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001710:	4619      	mov	r1, r3
 8001712:	4610      	mov	r0, r2
 8001714:	f7ff fbea 	bl	8000eec <__aeabi_fdiv>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001720:	2300      	movs	r3, #0
};
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	bf00      	nop
 800172c:	42c80000 	.word	0x42c80000

08001730 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b0af      	sub	sp, #188	; 0xbc
 8001734:	af2a      	add	r7, sp, #168	; 0xa8
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800173a:	687c      	ldr	r4, [r7, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	9328      	str	r3, [sp, #160]	; 0xa0
 8001746:	232a      	movs	r3, #42	; 0x2a
 8001748:	9327      	str	r3, [sp, #156]	; 0x9c
 800174a:	4668      	mov	r0, sp
 800174c:	f104 0310 	add.w	r3, r4, #16
 8001750:	229c      	movs	r2, #156	; 0x9c
 8001752:	4619      	mov	r1, r3
 8001754:	f009 f89b 	bl	800a88e <memcpy>
 8001758:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800175c:	f001 f923 	bl	80029a6 <bno055_read_regs>
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <bno055_linear_acc_y+0x3e>
        return err;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	e01b      	b.n	80017a6 <bno055_linear_acc_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800176e:	7b7b      	ldrb	r3, [r7, #13]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21b      	sxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff faad 	bl	8000cdc <__aeabi_i2f>
 8001782:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <bno055_linear_acc_y+0x60>
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <bno055_linear_acc_y+0x80>)
 800178e:	e001      	b.n	8001794 <bno055_linear_acc_y+0x64>
 8001790:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f7ff fba8 	bl	8000eec <__aeabi_fdiv>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80017a4:	2300      	movs	r3, #0
};
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd90      	pop	{r4, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	42c80000 	.word	0x42c80000

080017b4 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b0af      	sub	sp, #188	; 0xbc
 80017b8:	af2a      	add	r7, sp, #168	; 0xa8
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80017be:	687c      	ldr	r4, [r7, #4]
 80017c0:	2302      	movs	r3, #2
 80017c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80017ca:	232c      	movs	r3, #44	; 0x2c
 80017cc:	9327      	str	r3, [sp, #156]	; 0x9c
 80017ce:	4668      	mov	r0, sp
 80017d0:	f104 0310 	add.w	r3, r4, #16
 80017d4:	229c      	movs	r2, #156	; 0x9c
 80017d6:	4619      	mov	r1, r3
 80017d8:	f009 f859 	bl	800a88e <memcpy>
 80017dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017e0:	f001 f8e1 	bl	80029a6 <bno055_read_regs>
 80017e4:	4603      	mov	r3, r0
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <bno055_linear_acc_z+0x3e>
        return err;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	e01b      	b.n	800182a <bno055_linear_acc_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80017f2:	7b7b      	ldrb	r3, [r7, #13]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	7b3b      	ldrb	r3, [r7, #12]
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b21b      	sxth	r3, r3
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fa6b 	bl	8000cdc <__aeabi_i2f>
 8001806:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <bno055_linear_acc_z+0x60>
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <bno055_linear_acc_z+0x80>)
 8001812:	e001      	b.n	8001818 <bno055_linear_acc_z+0x64>
 8001814:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f7ff fb66 	bl	8000eec <__aeabi_fdiv>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001828:	2300      	movs	r3, #0
};
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	42c80000 	.word	0x42c80000

08001838 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b0b1      	sub	sp, #196	; 0xc4
 800183c:	af2a      	add	r7, sp, #168	; 0xa8
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001842:	687c      	ldr	r4, [r7, #4]
 8001844:	2306      	movs	r3, #6
 8001846:	9329      	str	r3, [sp, #164]	; 0xa4
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	9328      	str	r3, [sp, #160]	; 0xa0
 800184e:	2328      	movs	r3, #40	; 0x28
 8001850:	9327      	str	r3, [sp, #156]	; 0x9c
 8001852:	4668      	mov	r0, sp
 8001854:	f104 0310 	add.w	r3, r4, #16
 8001858:	229c      	movs	r2, #156	; 0x9c
 800185a:	4619      	mov	r1, r3
 800185c:	f009 f817 	bl	800a88e <memcpy>
 8001860:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001864:	f001 f89f 	bl	80029a6 <bno055_read_regs>
 8001868:	4603      	mov	r3, r0
 800186a:	75fb      	strb	r3, [r7, #23]
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <bno055_linear_acc+0x3e>
        return err;
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	e042      	b.n	80018fc <bno055_linear_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <bno055_linear_acc+0x4a>
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <bno055_linear_acc+0xcc>)
 8001880:	e001      	b.n	8001886 <bno055_linear_acc+0x4e>
 8001882:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001886:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001888:	7a7b      	ldrb	r3, [r7, #9]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21a      	sxth	r2, r3
 800188e:	7a3b      	ldrb	r3, [r7, #8]
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21b      	sxth	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fa20 	bl	8000cdc <__aeabi_i2f>
 800189c:	4603      	mov	r3, r0
 800189e:	6939      	ldr	r1, [r7, #16]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb23 	bl	8000eec <__aeabi_fdiv>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80018ae:	7afb      	ldrb	r3, [r7, #11]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	7abb      	ldrb	r3, [r7, #10]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fa0d 	bl	8000cdc <__aeabi_i2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	6939      	ldr	r1, [r7, #16]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fb10 	bl	8000eec <__aeabi_fdiv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80018d4:	7b7b      	ldrb	r3, [r7, #13]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	7b3b      	ldrb	r3, [r7, #12]
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f9fa 	bl	8000cdc <__aeabi_i2f>
 80018e8:	4603      	mov	r3, r0
 80018ea:	6939      	ldr	r1, [r7, #16]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fafd 	bl	8000eec <__aeabi_fdiv>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 80018fa:	2300      	movs	r3, #0
};
 80018fc:	4618      	mov	r0, r3
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd90      	pop	{r4, r7, pc}
 8001904:	42c80000 	.word	0x42c80000

08001908 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b0af      	sub	sp, #188	; 0xbc
 800190c:	af2a      	add	r7, sp, #168	; 0xa8
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001912:	687c      	ldr	r4, [r7, #4]
 8001914:	2302      	movs	r3, #2
 8001916:	9329      	str	r3, [sp, #164]	; 0xa4
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	9328      	str	r3, [sp, #160]	; 0xa0
 800191e:	2314      	movs	r3, #20
 8001920:	9327      	str	r3, [sp, #156]	; 0x9c
 8001922:	4668      	mov	r0, sp
 8001924:	f104 0310 	add.w	r3, r4, #16
 8001928:	229c      	movs	r2, #156	; 0x9c
 800192a:	4619      	mov	r1, r3
 800192c:	f008 ffaf 	bl	800a88e <memcpy>
 8001930:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001934:	f001 f837 	bl	80029a6 <bno055_read_regs>
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <bno055_gyro_x+0x3e>
        return err;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	e01b      	b.n	800197e <bno055_gyro_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001946:	7b7b      	ldrb	r3, [r7, #13]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b21a      	sxth	r2, r3
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21b      	sxth	r3, r3
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff f9c1 	bl	8000cdc <__aeabi_i2f>
 800195a:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <bno055_gyro_x+0x62>
 8001964:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001968:	e000      	b.n	800196c <bno055_gyro_x+0x64>
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <bno055_gyro_x+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 800196c:	4619      	mov	r1, r3
 800196e:	4610      	mov	r0, r2
 8001970:	f7ff fabc 	bl	8000eec <__aeabi_fdiv>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800197c:	2300      	movs	r3, #0
};
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}
 8001986:	bf00      	nop
 8001988:	44610000 	.word	0x44610000

0800198c <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b0af      	sub	sp, #188	; 0xbc
 8001990:	af2a      	add	r7, sp, #168	; 0xa8
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001996:	687c      	ldr	r4, [r7, #4]
 8001998:	2302      	movs	r3, #2
 800199a:	9329      	str	r3, [sp, #164]	; 0xa4
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80019a2:	2316      	movs	r3, #22
 80019a4:	9327      	str	r3, [sp, #156]	; 0x9c
 80019a6:	4668      	mov	r0, sp
 80019a8:	f104 0310 	add.w	r3, r4, #16
 80019ac:	229c      	movs	r2, #156	; 0x9c
 80019ae:	4619      	mov	r1, r3
 80019b0:	f008 ff6d 	bl	800a88e <memcpy>
 80019b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019b8:	f000 fff5 	bl	80029a6 <bno055_read_regs>
 80019bc:	4603      	mov	r3, r0
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <bno055_gyro_y+0x3e>
        return err;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	e01b      	b.n	8001a02 <bno055_gyro_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	7b3b      	ldrb	r3, [r7, #12]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff f97f 	bl	8000cdc <__aeabi_i2f>
 80019de:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <bno055_gyro_y+0x62>
 80019e8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80019ec:	e000      	b.n	80019f0 <bno055_gyro_y+0x64>
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <bno055_gyro_y+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 80019f0:	4619      	mov	r1, r3
 80019f2:	4610      	mov	r0, r2
 80019f4:	f7ff fa7a 	bl	8000eec <__aeabi_fdiv>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001a00:	2300      	movs	r3, #0
};
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	44610000 	.word	0x44610000

08001a10 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b0af      	sub	sp, #188	; 0xbc
 8001a14:	af2a      	add	r7, sp, #168	; 0xa8
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001a1a:	687c      	ldr	r4, [r7, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a26:	2318      	movs	r3, #24
 8001a28:	9327      	str	r3, [sp, #156]	; 0x9c
 8001a2a:	4668      	mov	r0, sp
 8001a2c:	f104 0310 	add.w	r3, r4, #16
 8001a30:	229c      	movs	r2, #156	; 0x9c
 8001a32:	4619      	mov	r1, r3
 8001a34:	f008 ff2b 	bl	800a88e <memcpy>
 8001a38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a3c:	f000 ffb3 	bl	80029a6 <bno055_read_regs>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <bno055_gyro_z+0x3e>
        return err;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	e01b      	b.n	8001a86 <bno055_gyro_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001a4e:	7b7b      	ldrb	r3, [r7, #13]
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	7b3b      	ldrb	r3, [r7, #12]
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f93d 	bl	8000cdc <__aeabi_i2f>
 8001a62:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <bno055_gyro_z+0x62>
 8001a6c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001a70:	e000      	b.n	8001a74 <bno055_gyro_z+0x64>
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <bno055_gyro_z+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f7ff fa38 	bl	8000eec <__aeabi_fdiv>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001a84:	2300      	movs	r3, #0
};
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd90      	pop	{r4, r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	44610000 	.word	0x44610000

08001a94 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b0b1      	sub	sp, #196	; 0xc4
 8001a98:	af2a      	add	r7, sp, #168	; 0xa8
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001a9e:	687c      	ldr	r4, [r7, #4]
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001aaa:	2314      	movs	r3, #20
 8001aac:	9327      	str	r3, [sp, #156]	; 0x9c
 8001aae:	4668      	mov	r0, sp
 8001ab0:	f104 0310 	add.w	r3, r4, #16
 8001ab4:	229c      	movs	r2, #156	; 0x9c
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f008 fee9 	bl	800a88e <memcpy>
 8001abc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ac0:	f000 ff71 	bl	80029a6 <bno055_read_regs>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	75fb      	strb	r3, [r7, #23]
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <bno055_gyro+0x3e>
        return err;
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	e042      	b.n	8001b58 <bno055_gyro+0xc4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <bno055_gyro+0x4c>
 8001ada:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001ade:	e000      	b.n	8001ae2 <bno055_gyro+0x4e>
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <bno055_gyro+0xcc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8001ae2:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001ae4:	7a7b      	ldrb	r3, [r7, #9]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	7a3b      	ldrb	r3, [r7, #8]
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4313      	orrs	r3, r2
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f8f2 	bl	8000cdc <__aeabi_i2f>
 8001af8:	4603      	mov	r3, r0
 8001afa:	6939      	ldr	r1, [r7, #16]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f9f5 	bl	8000eec <__aeabi_fdiv>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	7abb      	ldrb	r3, [r7, #10]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff f8df 	bl	8000cdc <__aeabi_i2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6939      	ldr	r1, [r7, #16]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f9e2 	bl	8000eec <__aeabi_fdiv>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8001b30:	7b7b      	ldrb	r3, [r7, #13]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	7b3b      	ldrb	r3, [r7, #12]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f8cc 	bl	8000cdc <__aeabi_i2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	6939      	ldr	r1, [r7, #16]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff f9cf 	bl	8000eec <__aeabi_fdiv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	44610000 	.word	0x44610000

08001b64 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b0af      	sub	sp, #188	; 0xbc
 8001b68:	af2a      	add	r7, sp, #168	; 0xa8
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001b6e:	687c      	ldr	r4, [r7, #4]
 8001b70:	2302      	movs	r3, #2
 8001b72:	9329      	str	r3, [sp, #164]	; 0xa4
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	9328      	str	r3, [sp, #160]	; 0xa0
 8001b7a:	230e      	movs	r3, #14
 8001b7c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001b7e:	4668      	mov	r0, sp
 8001b80:	f104 0310 	add.w	r3, r4, #16
 8001b84:	229c      	movs	r2, #156	; 0x9c
 8001b86:	4619      	mov	r1, r3
 8001b88:	f008 fe81 	bl	800a88e <memcpy>
 8001b8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b90:	f000 ff09 	bl	80029a6 <bno055_read_regs>
 8001b94:	4603      	mov	r3, r0
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <bno055_mag_x+0x3e>
        return err;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	e014      	b.n	8001bcc <bno055_mag_x+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001ba2:	7b7b      	ldrb	r3, [r7, #13]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	7b3b      	ldrb	r3, [r7, #12]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f893 	bl	8000cdc <__aeabi_i2f>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f995 	bl	8000eec <__aeabi_fdiv>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd90      	pop	{r4, r7, pc}

08001bd4 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b0af      	sub	sp, #188	; 0xbc
 8001bd8:	af2a      	add	r7, sp, #168	; 0xa8
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001bde:	687c      	ldr	r4, [r7, #4]
 8001be0:	2302      	movs	r3, #2
 8001be2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001bea:	2310      	movs	r3, #16
 8001bec:	9327      	str	r3, [sp, #156]	; 0x9c
 8001bee:	4668      	mov	r0, sp
 8001bf0:	f104 0310 	add.w	r3, r4, #16
 8001bf4:	229c      	movs	r2, #156	; 0x9c
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f008 fe49 	bl	800a88e <memcpy>
 8001bfc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c00:	f000 fed1 	bl	80029a6 <bno055_read_regs>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <bno055_mag_y+0x3e>
        return err;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	e014      	b.n	8001c3c <bno055_mag_y+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001c12:	7b7b      	ldrb	r3, [r7, #13]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	b21a      	sxth	r2, r3
 8001c18:	7b3b      	ldrb	r3, [r7, #12]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f85b 	bl	8000cdc <__aeabi_i2f>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff f95d 	bl	8000eec <__aeabi_fdiv>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}

08001c44 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b0af      	sub	sp, #188	; 0xbc
 8001c48:	af2a      	add	r7, sp, #168	; 0xa8
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001c4e:	687c      	ldr	r4, [r7, #4]
 8001c50:	2302      	movs	r3, #2
 8001c52:	9329      	str	r3, [sp, #164]	; 0xa4
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	9328      	str	r3, [sp, #160]	; 0xa0
 8001c5a:	2312      	movs	r3, #18
 8001c5c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001c5e:	4668      	mov	r0, sp
 8001c60:	f104 0310 	add.w	r3, r4, #16
 8001c64:	229c      	movs	r2, #156	; 0x9c
 8001c66:	4619      	mov	r1, r3
 8001c68:	f008 fe11 	bl	800a88e <memcpy>
 8001c6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c70:	f000 fe99 	bl	80029a6 <bno055_read_regs>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <bno055_mag_z+0x3e>
        return err;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	e014      	b.n	8001cac <bno055_mag_z+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001c82:	7b7b      	ldrb	r3, [r7, #13]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	7b3b      	ldrb	r3, [r7, #12]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f823 	bl	8000cdc <__aeabi_i2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f925 	bl	8000eec <__aeabi_fdiv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b0af      	sub	sp, #188	; 0xbc
 8001cb8:	af2a      	add	r7, sp, #168	; 0xa8
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001cbe:	687c      	ldr	r4, [r7, #4]
 8001cc0:	2306      	movs	r3, #6
 8001cc2:	9329      	str	r3, [sp, #164]	; 0xa4
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	9328      	str	r3, [sp, #160]	; 0xa0
 8001cca:	230e      	movs	r3, #14
 8001ccc:	9327      	str	r3, [sp, #156]	; 0x9c
 8001cce:	4668      	mov	r0, sp
 8001cd0:	f104 0310 	add.w	r3, r4, #16
 8001cd4:	229c      	movs	r2, #156	; 0x9c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f008 fdd9 	bl	800a88e <memcpy>
 8001cdc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ce0:	f000 fe61 	bl	80029a6 <bno055_read_regs>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <bno055_mag+0x3e>
        return err;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	e03c      	b.n	8001d6c <bno055_mag+0xb8>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8001cf2:	7a7b      	ldrb	r3, [r7, #9]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	7a3b      	ldrb	r3, [r7, #8]
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe ffeb 	bl	8000cdc <__aeabi_i2f>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f8ed 	bl	8000eec <__aeabi_fdiv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	7abb      	ldrb	r3, [r7, #10]
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe ffd7 	bl	8000cdc <__aeabi_i2f>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff f8d9 	bl	8000eec <__aeabi_fdiv>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8001d42:	7b7b      	ldrb	r3, [r7, #13]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21a      	sxth	r2, r3
 8001d48:	7b3b      	ldrb	r3, [r7, #12]
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe ffc3 	bl	8000cdc <__aeabi_i2f>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f8c5 	bl	8000eec <__aeabi_fdiv>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461a      	mov	r2, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 8001d6a:	2300      	movs	r3, #0
};
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd90      	pop	{r4, r7, pc}

08001d74 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b0b1      	sub	sp, #196	; 0xc4
 8001d78:	af2a      	add	r7, sp, #168	; 0xa8
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001d7e:	687c      	ldr	r4, [r7, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9329      	str	r3, [sp, #164]	; 0xa4
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	9328      	str	r3, [sp, #160]	; 0xa0
 8001d8a:	232e      	movs	r3, #46	; 0x2e
 8001d8c:	9327      	str	r3, [sp, #156]	; 0x9c
 8001d8e:	4668      	mov	r0, sp
 8001d90:	f104 0310 	add.w	r3, r4, #16
 8001d94:	229c      	movs	r2, #156	; 0x9c
 8001d96:	4619      	mov	r1, r3
 8001d98:	f008 fd79 	bl	800a88e <memcpy>
 8001d9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001da0:	f000 fe01 	bl	80029a6 <bno055_read_regs>
 8001da4:	4603      	mov	r3, r0
 8001da6:	75fb      	strb	r3, [r7, #23]
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <bno055_gravity_x+0x3e>
        return err;
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
 8001db0:	e01c      	b.n	8001dec <bno055_gravity_x+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <bno055_gravity_x+0x4a>
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <bno055_gravity_x+0x80>)
 8001dbc:	e001      	b.n	8001dc2 <bno055_gravity_x+0x4e>
 8001dbe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001dc2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001dc4:	7b7b      	ldrb	r3, [r7, #13]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	7b3b      	ldrb	r3, [r7, #12]
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ff82 	bl	8000cdc <__aeabi_i2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	6939      	ldr	r1, [r7, #16]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f885 	bl	8000eec <__aeabi_fdiv>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}
 8001df4:	42c80000 	.word	0x42c80000

08001df8 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b0b1      	sub	sp, #196	; 0xc4
 8001dfc:	af2a      	add	r7, sp, #168	; 0xa8
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001e02:	687c      	ldr	r4, [r7, #4]
 8001e04:	2302      	movs	r3, #2
 8001e06:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e0e:	2330      	movs	r3, #48	; 0x30
 8001e10:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e12:	4668      	mov	r0, sp
 8001e14:	f104 0310 	add.w	r3, r4, #16
 8001e18:	229c      	movs	r2, #156	; 0x9c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f008 fd37 	bl	800a88e <memcpy>
 8001e20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e24:	f000 fdbf 	bl	80029a6 <bno055_read_regs>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	75fb      	strb	r3, [r7, #23]
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <bno055_gravity_y+0x3e>
        return err;
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
 8001e34:	e01c      	b.n	8001e70 <bno055_gravity_y+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <bno055_gravity_y+0x4a>
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <bno055_gravity_y+0x80>)
 8001e40:	e001      	b.n	8001e46 <bno055_gravity_y+0x4e>
 8001e42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001e46:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001e48:	7b7b      	ldrb	r3, [r7, #13]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	b21a      	sxth	r2, r3
 8001e4e:	7b3b      	ldrb	r3, [r7, #12]
 8001e50:	b21b      	sxth	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe ff40 	bl	8000cdc <__aeabi_i2f>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	6939      	ldr	r1, [r7, #16]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f843 	bl	8000eec <__aeabi_fdiv>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	42c80000 	.word	0x42c80000

08001e7c <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b0b1      	sub	sp, #196	; 0xc4
 8001e80:	af2a      	add	r7, sp, #168	; 0xa8
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8001e86:	687c      	ldr	r4, [r7, #4]
 8001e88:	2302      	movs	r3, #2
 8001e8a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	9328      	str	r3, [sp, #160]	; 0xa0
 8001e92:	2332      	movs	r3, #50	; 0x32
 8001e94:	9327      	str	r3, [sp, #156]	; 0x9c
 8001e96:	4668      	mov	r0, sp
 8001e98:	f104 0310 	add.w	r3, r4, #16
 8001e9c:	229c      	movs	r2, #156	; 0x9c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f008 fcf5 	bl	800a88e <memcpy>
 8001ea4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ea8:	f000 fd7d 	bl	80029a6 <bno055_read_regs>
 8001eac:	4603      	mov	r3, r0
 8001eae:	75fb      	strb	r3, [r7, #23]
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <bno055_gravity_z+0x3e>
        return err;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	e01c      	b.n	8001ef4 <bno055_gravity_z+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <bno055_gravity_z+0x4a>
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <bno055_gravity_z+0x80>)
 8001ec4:	e001      	b.n	8001eca <bno055_gravity_z+0x4e>
 8001ec6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001eca:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	7b3b      	ldrb	r3, [r7, #12]
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fefe 	bl	8000cdc <__aeabi_i2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	6939      	ldr	r1, [r7, #16]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff f801 	bl	8000eec <__aeabi_fdiv>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd90      	pop	{r4, r7, pc}
 8001efc:	42c80000 	.word	0x42c80000

08001f00 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b0b1      	sub	sp, #196	; 0xc4
 8001f04:	af2a      	add	r7, sp, #168	; 0xa8
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8001f0a:	687c      	ldr	r4, [r7, #4]
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	9329      	str	r3, [sp, #164]	; 0xa4
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	9328      	str	r3, [sp, #160]	; 0xa0
 8001f16:	232e      	movs	r3, #46	; 0x2e
 8001f18:	9327      	str	r3, [sp, #156]	; 0x9c
 8001f1a:	4668      	mov	r0, sp
 8001f1c:	f104 0310 	add.w	r3, r4, #16
 8001f20:	229c      	movs	r2, #156	; 0x9c
 8001f22:	4619      	mov	r1, r3
 8001f24:	f008 fcb3 	bl	800a88e <memcpy>
 8001f28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f2c:	f000 fd3b 	bl	80029a6 <bno055_read_regs>
 8001f30:	4603      	mov	r3, r0
 8001f32:	75fb      	strb	r3, [r7, #23]
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <bno055_gravity+0x3e>
        return err;
 8001f3a:	7dfb      	ldrb	r3, [r7, #23]
 8001f3c:	e042      	b.n	8001fc4 <bno055_gravity+0xc4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <bno055_gravity+0x4a>
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <bno055_gravity+0xcc>)
 8001f48:	e001      	b.n	8001f4e <bno055_gravity+0x4e>
 8001f4a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001f4e:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8001f50:	7a7b      	ldrb	r3, [r7, #9]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	b21a      	sxth	r2, r3
 8001f56:	7a3b      	ldrb	r3, [r7, #8]
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe febc 	bl	8000cdc <__aeabi_i2f>
 8001f64:	4603      	mov	r3, r0
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe ffbf 	bl	8000eec <__aeabi_fdiv>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	601a      	str	r2, [r3, #0]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	7abb      	ldrb	r3, [r7, #10]
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fea9 	bl	8000cdc <__aeabi_i2f>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6939      	ldr	r1, [r7, #16]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe ffac 	bl	8000eec <__aeabi_fdiv>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8001f9c:	7b7b      	ldrb	r3, [r7, #13]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	7b3b      	ldrb	r3, [r7, #12]
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fe96 	bl	8000cdc <__aeabi_i2f>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	6939      	ldr	r1, [r7, #16]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe ff99 	bl	8000eec <__aeabi_fdiv>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	42c80000 	.word	0x42c80000

08001fd0 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b0b1      	sub	sp, #196	; 0xc4
 8001fd4:	af2a      	add	r7, sp, #168	; 0xa8
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8001fda:	687c      	ldr	r4, [r7, #4]
 8001fdc:	2302      	movs	r3, #2
 8001fde:	9329      	str	r3, [sp, #164]	; 0xa4
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	9328      	str	r3, [sp, #160]	; 0xa0
 8001fe6:	231a      	movs	r3, #26
 8001fe8:	9327      	str	r3, [sp, #156]	; 0x9c
 8001fea:	4668      	mov	r0, sp
 8001fec:	f104 0310 	add.w	r3, r4, #16
 8001ff0:	229c      	movs	r2, #156	; 0x9c
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f008 fc4b 	bl	800a88e <memcpy>
 8001ff8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ffc:	f000 fcd3 	bl	80029a6 <bno055_read_regs>
 8002000:	4603      	mov	r3, r0
 8002002:	75fb      	strb	r3, [r7, #23]
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	e01c      	b.n	8002048 <bno055_euler_yaw+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <bno055_euler_yaw+0x4c>
 8002016:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800201a:	e000      	b.n	800201e <bno055_euler_yaw+0x4e>
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800201e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002020:	7b7b      	ldrb	r3, [r7, #13]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	b21a      	sxth	r2, r3
 8002026:	7b3b      	ldrb	r3, [r7, #12]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21b      	sxth	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fe54 	bl	8000cdc <__aeabi_i2f>
 8002034:	4603      	mov	r3, r0
 8002036:	6939      	ldr	r1, [r7, #16]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe ff57 	bl	8000eec <__aeabi_fdiv>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	44610000 	.word	0x44610000

08002054 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b0b1      	sub	sp, #196	; 0xc4
 8002058:	af2a      	add	r7, sp, #168	; 0xa8
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 800205e:	687c      	ldr	r4, [r7, #4]
 8002060:	2302      	movs	r3, #2
 8002062:	9329      	str	r3, [sp, #164]	; 0xa4
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	9328      	str	r3, [sp, #160]	; 0xa0
 800206a:	231c      	movs	r3, #28
 800206c:	9327      	str	r3, [sp, #156]	; 0x9c
 800206e:	4668      	mov	r0, sp
 8002070:	f104 0310 	add.w	r3, r4, #16
 8002074:	229c      	movs	r2, #156	; 0x9c
 8002076:	4619      	mov	r1, r3
 8002078:	f008 fc09 	bl	800a88e <memcpy>
 800207c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002080:	f000 fc91 	bl	80029a6 <bno055_read_regs>
 8002084:	4603      	mov	r3, r0
 8002086:	75fb      	strb	r3, [r7, #23]
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <bno055_euler_roll+0x3e>
        return err;
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	e01c      	b.n	80020cc <bno055_euler_roll+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <bno055_euler_roll+0x4c>
 800209a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800209e:	e000      	b.n	80020a2 <bno055_euler_roll+0x4e>
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80020a2:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80020a4:	7b7b      	ldrb	r3, [r7, #13]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	7b3b      	ldrb	r3, [r7, #12]
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fe12 	bl	8000cdc <__aeabi_i2f>
 80020b8:	4603      	mov	r3, r0
 80020ba:	6939      	ldr	r1, [r7, #16]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe ff15 	bl	8000eec <__aeabi_fdiv>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461a      	mov	r2, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd90      	pop	{r4, r7, pc}
 80020d4:	44610000 	.word	0x44610000

080020d8 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b0b1      	sub	sp, #196	; 0xc4
 80020dc:	af2a      	add	r7, sp, #168	; 0xa8
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 80020e2:	687c      	ldr	r4, [r7, #4]
 80020e4:	2302      	movs	r3, #2
 80020e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	9328      	str	r3, [sp, #160]	; 0xa0
 80020ee:	231e      	movs	r3, #30
 80020f0:	9327      	str	r3, [sp, #156]	; 0x9c
 80020f2:	4668      	mov	r0, sp
 80020f4:	f104 0310 	add.w	r3, r4, #16
 80020f8:	229c      	movs	r2, #156	; 0x9c
 80020fa:	4619      	mov	r1, r3
 80020fc:	f008 fbc7 	bl	800a88e <memcpy>
 8002100:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002104:	f000 fc4f 	bl	80029a6 <bno055_read_regs>
 8002108:	4603      	mov	r3, r0
 800210a:	75fb      	strb	r3, [r7, #23]
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <bno055_euler_pitch+0x3e>
        return err;
 8002112:	7dfb      	ldrb	r3, [r7, #23]
 8002114:	e01c      	b.n	8002150 <bno055_euler_pitch+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <bno055_euler_pitch+0x4c>
 800211e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002122:	e000      	b.n	8002126 <bno055_euler_pitch+0x4e>
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002126:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002128:	7b7b      	ldrb	r3, [r7, #13]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	b21a      	sxth	r2, r3
 800212e:	7b3b      	ldrb	r3, [r7, #12]
 8002130:	b21b      	sxth	r3, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	b21b      	sxth	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fdd0 	bl	8000cdc <__aeabi_i2f>
 800213c:	4603      	mov	r3, r0
 800213e:	6939      	ldr	r1, [r7, #16]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fed3 	bl	8000eec <__aeabi_fdiv>
 8002146:	4603      	mov	r3, r0
 8002148:	461a      	mov	r2, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}
 8002158:	44610000 	.word	0x44610000

0800215c <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b0b1      	sub	sp, #196	; 0xc4
 8002160:	af2a      	add	r7, sp, #168	; 0xa8
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8002166:	687c      	ldr	r4, [r7, #4]
 8002168:	2306      	movs	r3, #6
 800216a:	9329      	str	r3, [sp, #164]	; 0xa4
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	9328      	str	r3, [sp, #160]	; 0xa0
 8002172:	231a      	movs	r3, #26
 8002174:	9327      	str	r3, [sp, #156]	; 0x9c
 8002176:	4668      	mov	r0, sp
 8002178:	f104 0310 	add.w	r3, r4, #16
 800217c:	229c      	movs	r2, #156	; 0x9c
 800217e:	4619      	mov	r1, r3
 8002180:	f008 fb85 	bl	800a88e <memcpy>
 8002184:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002188:	f000 fc0d 	bl	80029a6 <bno055_read_regs>
 800218c:	4603      	mov	r3, r0
 800218e:	75fb      	strb	r3, [r7, #23]
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	e042      	b.n	8002220 <bno055_euler+0xc4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <bno055_euler+0x4c>
 80021a2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80021a6:	e000      	b.n	80021aa <bno055_euler+0x4e>
 80021a8:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <bno055_euler+0xcc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80021aa:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 80021ac:	7a7b      	ldrb	r3, [r7, #9]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	7a3b      	ldrb	r3, [r7, #8]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fd8e 	bl	8000cdc <__aeabi_i2f>
 80021c0:	4603      	mov	r3, r0
 80021c2:	6939      	ldr	r1, [r7, #16]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fe91 	bl	8000eec <__aeabi_fdiv>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	609a      	str	r2, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 80021d2:	7afb      	ldrb	r3, [r7, #11]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	b21a      	sxth	r2, r3
 80021d8:	7abb      	ldrb	r3, [r7, #10]
 80021da:	b21b      	sxth	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b21b      	sxth	r3, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fd7b 	bl	8000cdc <__aeabi_i2f>
 80021e6:	4603      	mov	r3, r0
 80021e8:	6939      	ldr	r1, [r7, #16]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fe7e 	bl	8000eec <__aeabi_fdiv>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	601a      	str	r2, [r3, #0]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 80021f8:	7b7b      	ldrb	r3, [r7, #13]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	7b3b      	ldrb	r3, [r7, #12]
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21b      	sxth	r3, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fd68 	bl	8000cdc <__aeabi_i2f>
 800220c:	4603      	mov	r3, r0
 800220e:	6939      	ldr	r1, [r7, #16]
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe fe6b 	bl	8000eec <__aeabi_fdiv>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	605a      	str	r2, [r3, #4]
    return BNO_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	bd90      	pop	{r4, r7, pc}
 8002228:	44610000 	.word	0x44610000

0800222c <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b0af      	sub	sp, #188	; 0xbc
 8002230:	af2a      	add	r7, sp, #168	; 0xa8
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8002236:	687c      	ldr	r4, [r7, #4]
 8002238:	2302      	movs	r3, #2
 800223a:	9329      	str	r3, [sp, #164]	; 0xa4
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	9328      	str	r3, [sp, #160]	; 0xa0
 8002242:	2320      	movs	r3, #32
 8002244:	9327      	str	r3, [sp, #156]	; 0x9c
 8002246:	4668      	mov	r0, sp
 8002248:	f104 0310 	add.w	r3, r4, #16
 800224c:	229c      	movs	r2, #156	; 0x9c
 800224e:	4619      	mov	r1, r3
 8002250:	f008 fb1d 	bl	800a88e <memcpy>
 8002254:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002258:	f000 fba5 	bl	80029a6 <bno055_read_regs>
 800225c:	4603      	mov	r3, r0
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <bno055_quaternion_w+0x3e>
        return err;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	e014      	b.n	8002294 <bno055_quaternion_w+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800226a:	7b7b      	ldrb	r3, [r7, #13]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	b21a      	sxth	r2, r3
 8002270:	7b3b      	ldrb	r3, [r7, #12]
 8002272:	b21b      	sxth	r3, r3
 8002274:	4313      	orrs	r3, r2
 8002276:	b21b      	sxth	r3, r3
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fd2f 	bl	8000cdc <__aeabi_i2f>
 800227e:	4603      	mov	r3, r0
 8002280:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fe31 	bl	8000eec <__aeabi_fdiv>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}

0800229c <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b0af      	sub	sp, #188	; 0xbc
 80022a0:	af2a      	add	r7, sp, #168	; 0xa8
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80022a6:	687c      	ldr	r4, [r7, #4]
 80022a8:	2302      	movs	r3, #2
 80022aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80022b2:	2322      	movs	r3, #34	; 0x22
 80022b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80022b6:	4668      	mov	r0, sp
 80022b8:	f104 0310 	add.w	r3, r4, #16
 80022bc:	229c      	movs	r2, #156	; 0x9c
 80022be:	4619      	mov	r1, r3
 80022c0:	f008 fae5 	bl	800a88e <memcpy>
 80022c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022c8:	f000 fb6d 	bl	80029a6 <bno055_read_regs>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <bno055_quaternion_x+0x3e>
        return err;
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	e014      	b.n	8002304 <bno055_quaternion_x+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80022da:	7b7b      	ldrb	r3, [r7, #13]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	b21a      	sxth	r2, r3
 80022e0:	7b3b      	ldrb	r3, [r7, #12]
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fcf7 	bl	8000cdc <__aeabi_i2f>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fdf9 	bl	8000eec <__aeabi_fdiv>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461a      	mov	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bd90      	pop	{r4, r7, pc}

0800230c <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b0af      	sub	sp, #188	; 0xbc
 8002310:	af2a      	add	r7, sp, #168	; 0xa8
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002316:	687c      	ldr	r4, [r7, #4]
 8002318:	2302      	movs	r3, #2
 800231a:	9329      	str	r3, [sp, #164]	; 0xa4
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	9328      	str	r3, [sp, #160]	; 0xa0
 8002322:	2324      	movs	r3, #36	; 0x24
 8002324:	9327      	str	r3, [sp, #156]	; 0x9c
 8002326:	4668      	mov	r0, sp
 8002328:	f104 0310 	add.w	r3, r4, #16
 800232c:	229c      	movs	r2, #156	; 0x9c
 800232e:	4619      	mov	r1, r3
 8002330:	f008 faad 	bl	800a88e <memcpy>
 8002334:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002338:	f000 fb35 	bl	80029a6 <bno055_read_regs>
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <bno055_quaternion_y+0x3e>
        return err;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	e014      	b.n	8002374 <bno055_quaternion_y+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800234a:	7b7b      	ldrb	r3, [r7, #13]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	b21a      	sxth	r2, r3
 8002350:	7b3b      	ldrb	r3, [r7, #12]
 8002352:	b21b      	sxth	r3, r3
 8002354:	4313      	orrs	r3, r2
 8002356:	b21b      	sxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fcbf 	bl	8000cdc <__aeabi_i2f>
 800235e:	4603      	mov	r3, r0
 8002360:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fdc1 	bl	8000eec <__aeabi_fdiv>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bd90      	pop	{r4, r7, pc}

0800237c <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b0af      	sub	sp, #188	; 0xbc
 8002380:	af2a      	add	r7, sp, #168	; 0xa8
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002386:	687c      	ldr	r4, [r7, #4]
 8002388:	2302      	movs	r3, #2
 800238a:	9329      	str	r3, [sp, #164]	; 0xa4
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	9328      	str	r3, [sp, #160]	; 0xa0
 8002392:	2326      	movs	r3, #38	; 0x26
 8002394:	9327      	str	r3, [sp, #156]	; 0x9c
 8002396:	4668      	mov	r0, sp
 8002398:	f104 0310 	add.w	r3, r4, #16
 800239c:	229c      	movs	r2, #156	; 0x9c
 800239e:	4619      	mov	r1, r3
 80023a0:	f008 fa75 	bl	800a88e <memcpy>
 80023a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023a8:	f000 fafd 	bl	80029a6 <bno055_read_regs>
 80023ac:	4603      	mov	r3, r0
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <bno055_quaternion_z+0x3e>
        return err;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	e014      	b.n	80023e4 <bno055_quaternion_z+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80023ba:	7b7b      	ldrb	r3, [r7, #13]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	b21a      	sxth	r2, r3
 80023c0:	7b3b      	ldrb	r3, [r7, #12]
 80023c2:	b21b      	sxth	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fc87 	bl	8000cdc <__aeabi_i2f>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fd89 	bl	8000eec <__aeabi_fdiv>
 80023da:	4603      	mov	r3, r0
 80023dc:	461a      	mov	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd90      	pop	{r4, r7, pc}

080023ec <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b0b1      	sub	sp, #196	; 0xc4
 80023f0:	af2a      	add	r7, sp, #168	; 0xa8
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 80023f6:	687c      	ldr	r4, [r7, #4]
 80023f8:	2308      	movs	r3, #8
 80023fa:	9329      	str	r3, [sp, #164]	; 0xa4
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	9328      	str	r3, [sp, #160]	; 0xa0
 8002402:	2320      	movs	r3, #32
 8002404:	9327      	str	r3, [sp, #156]	; 0x9c
 8002406:	4668      	mov	r0, sp
 8002408:	f104 0310 	add.w	r3, r4, #16
 800240c:	229c      	movs	r2, #156	; 0x9c
 800240e:	4619      	mov	r1, r3
 8002410:	f008 fa3d 	bl	800a88e <memcpy>
 8002414:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002418:	f000 fac5 	bl	80029a6 <bno055_read_regs>
 800241c:	4603      	mov	r3, r0
 800241e:	75fb      	strb	r3, [r7, #23]
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <bno055_quaternion+0x3e>
        return err;
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	e050      	b.n	80024cc <bno055_quaternion+0xe0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800242a:	7b7b      	ldrb	r3, [r7, #13]
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	b21a      	sxth	r2, r3
 8002430:	7b3b      	ldrb	r3, [r7, #12]
 8002432:	b21b      	sxth	r3, r3
 8002434:	4313      	orrs	r3, r2
 8002436:	b21b      	sxth	r3, r3
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fc4f 	bl	8000cdc <__aeabi_i2f>
 800243e:	4603      	mov	r3, r0
 8002440:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fd51 	bl	8000eec <__aeabi_fdiv>
 800244a:	4603      	mov	r3, r0
 800244c:	461a      	mov	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	60da      	str	r2, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	b21a      	sxth	r2, r3
 8002458:	7bbb      	ldrb	r3, [r7, #14]
 800245a:	b21b      	sxth	r3, r3
 800245c:	4313      	orrs	r3, r2
 800245e:	b21b      	sxth	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fc3b 	bl	8000cdc <__aeabi_i2f>
 8002466:	4603      	mov	r3, r0
 8002468:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fd3d 	bl	8000eec <__aeabi_fdiv>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	601a      	str	r2, [r3, #0]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 800247a:	7c7b      	ldrb	r3, [r7, #17]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	b21a      	sxth	r2, r3
 8002480:	7c3b      	ldrb	r3, [r7, #16]
 8002482:	b21b      	sxth	r3, r3
 8002484:	4313      	orrs	r3, r2
 8002486:	b21b      	sxth	r3, r3
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fc27 	bl	8000cdc <__aeabi_i2f>
 800248e:	4603      	mov	r3, r0
 8002490:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fd29 	bl	8000eec <__aeabi_fdiv>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	605a      	str	r2, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 80024a2:	7cfb      	ldrb	r3, [r7, #19]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	b21a      	sxth	r2, r3
 80024a8:	7cbb      	ldrb	r3, [r7, #18]
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe fc13 	bl	8000cdc <__aeabi_i2f>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fd15 	bl	8000eec <__aeabi_fdiv>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461a      	mov	r2, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	609a      	str	r2, [r3, #8]
    return BNO_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd90      	pop	{r4, r7, pc}

080024d4 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b0af      	sub	sp, #188	; 0xbc
 80024d8:	af2a      	add	r7, sp, #168	; 0xa8
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	70fb      	strb	r3, [r7, #3]
 80024e6:	460b      	mov	r3, r1
 80024e8:	70bb      	strb	r3, [r7, #2]
 80024ea:	4613      	mov	r3, r2
 80024ec:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80024ee:	2101      	movs	r1, #1
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fabb 	bl	8002a6c <bno055_set_page>
 80024f6:	4603      	mov	r3, r0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <bno055_acc_conf+0x30>
        return err;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	e04b      	b.n	800259c <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002504:	2100      	movs	r1, #0
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f91b 	bl	8002742 <bno055_set_opmode>
 800250c:	4603      	mov	r3, r0
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <bno055_acc_conf+0x46>
        return err;
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	e040      	b.n	800259c <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800251a:	200c      	movs	r0, #12
 800251c:	f001 f8a6 	bl	800366c <HAL_Delay>
    u8 config = range | bandwidth | mode;
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	78bb      	ldrb	r3, [r7, #2]
 8002524:	4313      	orrs	r3, r2
 8002526:	b2da      	uxtb	r2, r3
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	4313      	orrs	r3, r2
 800252c:	b2db      	uxtb	r3, r3
 800252e:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8002530:	687c      	ldr	r4, [r7, #4]
 8002532:	2301      	movs	r3, #1
 8002534:	9329      	str	r3, [sp, #164]	; 0xa4
 8002536:	f107 030e 	add.w	r3, r7, #14
 800253a:	9328      	str	r3, [sp, #160]	; 0xa0
 800253c:	2308      	movs	r3, #8
 800253e:	9327      	str	r3, [sp, #156]	; 0x9c
 8002540:	4668      	mov	r0, sp
 8002542:	f104 0310 	add.w	r3, r4, #16
 8002546:	229c      	movs	r2, #156	; 0x9c
 8002548:	4619      	mov	r1, r3
 800254a:	f008 f9a0 	bl	800a88e <memcpy>
 800254e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002552:	f000 fa5e 	bl	8002a12 <bno055_write_regs>
 8002556:	4603      	mov	r3, r0
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <bno055_acc_conf+0x90>
        return err;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	e01b      	b.n	800259c <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	791b      	ldrb	r3, [r3, #4]
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f8e9 	bl	8002742 <bno055_set_opmode>
 8002570:	4603      	mov	r3, r0
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <bno055_acc_conf+0xaa>
        return err;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	e00e      	b.n	800259c <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800257e:	2018      	movs	r0, #24
 8002580:	f001 f874 	bl	800366c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002584:	2100      	movs	r1, #0
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fa70 	bl	8002a6c <bno055_set_page>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <bno055_acc_conf+0xc6>
        return err;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	e000      	b.n	800259c <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}

080025a4 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b0af      	sub	sp, #188	; 0xbc
 80025a8:	af2a      	add	r7, sp, #168	; 0xa8
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	461a      	mov	r2, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	70fb      	strb	r3, [r7, #3]
 80025b6:	460b      	mov	r3, r1
 80025b8:	70bb      	strb	r3, [r7, #2]
 80025ba:	4613      	mov	r3, r2
 80025bc:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80025be:	2101      	movs	r1, #1
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fa53 	bl	8002a6c <bno055_set_page>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <bno055_gyr_conf+0x30>
        return err;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	e04a      	b.n	800266a <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80025d4:	2100      	movs	r1, #0
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8b3 	bl	8002742 <bno055_set_opmode>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <bno055_gyr_conf+0x46>
        return err;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	e03f      	b.n	800266a <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80025ea:	200c      	movs	r0, #12
 80025ec:	f001 f83e 	bl	800366c <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	78bb      	ldrb	r3, [r7, #2]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	733b      	strb	r3, [r7, #12]
 80025fa:	787b      	ldrb	r3, [r7, #1]
 80025fc:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80025fe:	687c      	ldr	r4, [r7, #4]
 8002600:	2302      	movs	r3, #2
 8002602:	9329      	str	r3, [sp, #164]	; 0xa4
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	9328      	str	r3, [sp, #160]	; 0xa0
 800260a:	230a      	movs	r3, #10
 800260c:	9327      	str	r3, [sp, #156]	; 0x9c
 800260e:	4668      	mov	r0, sp
 8002610:	f104 0310 	add.w	r3, r4, #16
 8002614:	229c      	movs	r2, #156	; 0x9c
 8002616:	4619      	mov	r1, r3
 8002618:	f008 f939 	bl	800a88e <memcpy>
 800261c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002620:	f000 f9f7 	bl	8002a12 <bno055_write_regs>
 8002624:	4603      	mov	r3, r0
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	e01b      	b.n	800266a <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	791b      	ldrb	r3, [r3, #4]
 8002636:	4619      	mov	r1, r3
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f882 	bl	8002742 <bno055_set_opmode>
 800263e:	4603      	mov	r3, r0
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <bno055_gyr_conf+0xa8>
        return err;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	e00e      	b.n	800266a <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800264c:	2018      	movs	r0, #24
 800264e:	f001 f80d 	bl	800366c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002652:	2100      	movs	r1, #0
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fa09 	bl	8002a6c <bno055_set_page>
 800265a:	4603      	mov	r3, r0
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <bno055_gyr_conf+0xc4>
        return err;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	e000      	b.n	800266a <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bd90      	pop	{r4, r7, pc}

08002672 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8002672:	b590      	push	{r4, r7, lr}
 8002674:	b0af      	sub	sp, #188	; 0xbc
 8002676:	af2a      	add	r7, sp, #168	; 0xa8
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	4608      	mov	r0, r1
 800267c:	4611      	mov	r1, r2
 800267e:	461a      	mov	r2, r3
 8002680:	4603      	mov	r3, r0
 8002682:	70fb      	strb	r3, [r7, #3]
 8002684:	460b      	mov	r3, r1
 8002686:	70bb      	strb	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800268c:	2101      	movs	r1, #1
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f9ec 	bl	8002a6c <bno055_set_page>
 8002694:	4603      	mov	r3, r0
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <bno055_mag_conf+0x30>
        return err;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	e04b      	b.n	800273a <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80026a2:	2100      	movs	r1, #0
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f84c 	bl	8002742 <bno055_set_opmode>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <bno055_mag_conf+0x46>
        return err;
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	e040      	b.n	800273a <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80026b8:	200c      	movs	r0, #12
 80026ba:	f000 ffd7 	bl	800366c <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	78bb      	ldrb	r3, [r7, #2]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	787b      	ldrb	r3, [r7, #1]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 80026ce:	687c      	ldr	r4, [r7, #4]
 80026d0:	2301      	movs	r3, #1
 80026d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80026d4:	f107 030e 	add.w	r3, r7, #14
 80026d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80026da:	2309      	movs	r3, #9
 80026dc:	9327      	str	r3, [sp, #156]	; 0x9c
 80026de:	4668      	mov	r0, sp
 80026e0:	f104 0310 	add.w	r3, r4, #16
 80026e4:	229c      	movs	r2, #156	; 0x9c
 80026e6:	4619      	mov	r1, r3
 80026e8:	f008 f8d1 	bl	800a88e <memcpy>
 80026ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026f0:	f000 f98f 	bl	8002a12 <bno055_write_regs>
 80026f4:	4603      	mov	r3, r0
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <bno055_mag_conf+0x90>
        return err;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	e01b      	b.n	800273a <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	791b      	ldrb	r3, [r3, #4]
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f81a 	bl	8002742 <bno055_set_opmode>
 800270e:	4603      	mov	r3, r0
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <bno055_mag_conf+0xaa>
        return err;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	e00e      	b.n	800273a <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 800271c:	2018      	movs	r0, #24
 800271e:	f000 ffa5 	bl	800366c <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8002722:	2100      	movs	r1, #0
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f9a1 	bl	8002a6c <bno055_set_page>
 800272a:	4603      	mov	r3, r0
 800272c:	73fb      	strb	r3, [r7, #15]
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <bno055_mag_conf+0xc6>
        return err;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	e000      	b.n	800273a <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bd90      	pop	{r4, r7, pc}

08002742 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8002742:	b590      	push	{r4, r7, lr}
 8002744:	b0af      	sub	sp, #188	; 0xbc
 8002746:	af2a      	add	r7, sp, #168	; 0xa8
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 800274e:	687c      	ldr	r4, [r7, #4]
 8002750:	2301      	movs	r3, #1
 8002752:	9329      	str	r3, [sp, #164]	; 0xa4
 8002754:	1cfb      	adds	r3, r7, #3
 8002756:	9328      	str	r3, [sp, #160]	; 0xa0
 8002758:	233d      	movs	r3, #61	; 0x3d
 800275a:	9327      	str	r3, [sp, #156]	; 0x9c
 800275c:	4668      	mov	r0, sp
 800275e:	f104 0310 	add.w	r3, r4, #16
 8002762:	229c      	movs	r2, #156	; 0x9c
 8002764:	4619      	mov	r1, r3
 8002766:	f008 f892 	bl	800a88e <memcpy>
 800276a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800276e:	f000 f950 	bl	8002a12 <bno055_write_regs>
 8002772:	4603      	mov	r3, r0
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	e003      	b.n	8002788 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002780:	2018      	movs	r0, #24
 8002782:	f000 ff73 	bl	800366c <HAL_Delay>
    return BNO_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bd90      	pop	{r4, r7, pc}

08002790 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b0af      	sub	sp, #188	; 0xbc
 8002794:	af2a      	add	r7, sp, #168	; 0xa8
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	70fb      	strb	r3, [r7, #3]
 80027a2:	460b      	mov	r3, r1
 80027a4:	70bb      	strb	r3, [r7, #2]
 80027a6:	4613      	mov	r3, r2
 80027a8:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80027aa:	2100      	movs	r1, #0
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ffc8 	bl	8002742 <bno055_set_opmode>
 80027b2:	4603      	mov	r3, r0
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <bno055_set_unit+0x30>
        return err;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	e04b      	b.n	8002858 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80027c0:	2100      	movs	r1, #0
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f952 	bl	8002a6c <bno055_set_page>
 80027c8:	4603      	mov	r3, r0
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <bno055_set_unit+0x46>
        return err;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	e040      	b.n	8002858 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	78bb      	ldrb	r3, [r7, #2]
 80027da:	4313      	orrs	r3, r2
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	787b      	ldrb	r3, [r7, #1]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 80027ee:	687c      	ldr	r4, [r7, #4]
 80027f0:	2301      	movs	r3, #1
 80027f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80027f4:	f107 030e 	add.w	r3, r7, #14
 80027f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80027fa:	233b      	movs	r3, #59	; 0x3b
 80027fc:	9327      	str	r3, [sp, #156]	; 0x9c
 80027fe:	4668      	mov	r0, sp
 8002800:	f104 0310 	add.w	r3, r4, #16
 8002804:	229c      	movs	r2, #156	; 0x9c
 8002806:	4619      	mov	r1, r3
 8002808:	f008 f841 	bl	800a88e <memcpy>
 800280c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002810:	f000 f8ff 	bl	8002a12 <bno055_write_regs>
 8002814:	4603      	mov	r3, r0
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <bno055_set_unit+0x92>
        return err;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	e01a      	b.n	8002858 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	78ba      	ldrb	r2, [r7, #2]
 8002826:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	787a      	ldrb	r2, [r7, #1]
 800282c:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002834:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	791b      	ldrb	r3, [r3, #4]
 8002840:	4619      	mov	r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff7d 	bl	8002742 <bno055_set_opmode>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <bno055_set_unit+0xc6>
        return err;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	e000      	b.n	8002858 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}

08002860 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b0af      	sub	sp, #188	; 0xbc
 8002864:	af2a      	add	r7, sp, #168	; 0xa8
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8002872:	2304      	movs	r3, #4
 8002874:	e04d      	b.n	8002912 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8002876:	2100      	movs	r1, #0
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff62 	bl	8002742 <bno055_set_opmode>
 800287e:	4603      	mov	r3, r0
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <bno055_set_pwr_mode+0x2c>
        return err;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	e042      	b.n	8002912 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800288c:	2100      	movs	r1, #0
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8ec 	bl	8002a6c <bno055_set_page>
 8002894:	4603      	mov	r3, r0
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <bno055_set_pwr_mode+0x42>
        return err;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	e037      	b.n	8002912 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 80028a2:	687c      	ldr	r4, [r7, #4]
 80028a4:	2301      	movs	r3, #1
 80028a6:	9329      	str	r3, [sp, #164]	; 0xa4
 80028a8:	1cfb      	adds	r3, r7, #3
 80028aa:	9328      	str	r3, [sp, #160]	; 0xa0
 80028ac:	233e      	movs	r3, #62	; 0x3e
 80028ae:	9327      	str	r3, [sp, #156]	; 0x9c
 80028b0:	4668      	mov	r0, sp
 80028b2:	f104 0310 	add.w	r3, r4, #16
 80028b6:	229c      	movs	r2, #156	; 0x9c
 80028b8:	4619      	mov	r1, r3
 80028ba:	f007 ffe8 	bl	800a88e <memcpy>
 80028be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028c2:	f000 f8a6 	bl	8002a12 <bno055_write_regs>
 80028c6:	4603      	mov	r3, r0
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	e01e      	b.n	8002912 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80028da:	2100      	movs	r1, #0
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8c5 	bl	8002a6c <bno055_set_page>
 80028e2:	4603      	mov	r3, r0
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <bno055_set_pwr_mode+0x90>
        return err;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	e010      	b.n	8002912 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	791b      	ldrb	r3, [r3, #4]
 80028f4:	4619      	mov	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ff23 	bl	8002742 <bno055_set_opmode>
 80028fc:	4603      	mov	r3, r0
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <bno055_set_pwr_mode+0xaa>
        return err;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	e003      	b.n	8002912 <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 800290a:	2002      	movs	r0, #2
 800290c:	f000 feae 	bl	800366c <HAL_Delay>
    return BNO_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}

0800291a <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 800291a:	b590      	push	{r4, r7, lr}
 800291c:	b0af      	sub	sp, #188	; 0xbc
 800291e:	af2a      	add	r7, sp, #168	; 0xa8
 8002920:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8002922:	2320      	movs	r3, #32
 8002924:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8002926:	687c      	ldr	r4, [r7, #4]
 8002928:	2301      	movs	r3, #1
 800292a:	9329      	str	r3, [sp, #164]	; 0xa4
 800292c:	f107 030f 	add.w	r3, r7, #15
 8002930:	9328      	str	r3, [sp, #160]	; 0xa0
 8002932:	233f      	movs	r3, #63	; 0x3f
 8002934:	9327      	str	r3, [sp, #156]	; 0x9c
 8002936:	4668      	mov	r0, sp
 8002938:	f104 0310 	add.w	r3, r4, #16
 800293c:	229c      	movs	r2, #156	; 0x9c
 800293e:	4619      	mov	r1, r3
 8002940:	f007 ffa5 	bl	800a88e <memcpy>
 8002944:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002948:	f000 f863 	bl	8002a12 <bno055_write_regs>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}

08002960 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b0af      	sub	sp, #188	; 0xbc
 8002964:	af2a      	add	r7, sp, #168	; 0xa8
 8002966:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 800296c:	687c      	ldr	r4, [r7, #4]
 800296e:	2301      	movs	r3, #1
 8002970:	9329      	str	r3, [sp, #164]	; 0xa4
 8002972:	f107 030f 	add.w	r3, r7, #15
 8002976:	9328      	str	r3, [sp, #160]	; 0xa0
 8002978:	233f      	movs	r3, #63	; 0x3f
 800297a:	9327      	str	r3, [sp, #156]	; 0x9c
 800297c:	4668      	mov	r0, sp
 800297e:	f104 0310 	add.w	r3, r4, #16
 8002982:	229c      	movs	r2, #156	; 0x9c
 8002984:	4619      	mov	r1, r3
 8002986:	f007 ff82 	bl	800a88e <memcpy>
 800298a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800298e:	f000 f840 	bl	8002a12 <bno055_write_regs>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <bno055_on+0x3e>
    }
    return BNO_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd90      	pop	{r4, r7, pc}

080029a6 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 80029a6:	b084      	sub	sp, #16
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	f107 0c10 	add.w	ip, r7, #16
 80029b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 80029b6:	6938      	ldr	r0, [r7, #16]
 80029b8:	7dbb      	ldrb	r3, [r7, #22]
 80029ba:	b299      	uxth	r1, r3
 80029bc:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2301      	movs	r3, #1
 80029c8:	f002 f88e 	bl	8004ae8 <HAL_I2C_Master_Transmit>
 80029cc:	4603      	mov	r3, r0
 80029ce:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e014      	b.n	8002a04 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 80029da:	6938      	ldr	r0, [r7, #16]
 80029dc:	7dbb      	ldrb	r3, [r7, #22]
 80029de:	b299      	uxth	r1, r3
 80029e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f04f 32ff 	mov.w	r2, #4294967295
 80029ea:	9200      	str	r2, [sp, #0]
 80029ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029f0:	f002 f978 	bl	8004ce4 <HAL_I2C_Master_Receive>
 80029f4:	4603      	mov	r3, r0
 80029f6:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a0e:	b004      	add	sp, #16
 8002a10:	4770      	bx	lr

08002a12 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8002a12:	b084      	sub	sp, #16
 8002a14:	b5b0      	push	{r4, r5, r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af04      	add	r7, sp, #16
 8002a1a:	f107 0418 	add.w	r4, r7, #24
 8002a1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8002a22:	69b8      	ldr	r0, [r7, #24]
 8002a24:	7fbb      	ldrb	r3, [r7, #30]
 8002a26:	b299      	uxth	r1, r3
 8002a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a32:	b29c      	uxth	r4, r3
 8002a34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f04f 35ff 	mov.w	r5, #4294967295
 8002a3e:	9502      	str	r5, [sp, #8]
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4623      	mov	r3, r4
 8002a4a:	f002 fbb7 	bl	80051bc <HAL_I2C_Mem_Write>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002a68:	b004      	add	sp, #16
 8002a6a:	4770      	bx	lr

08002a6c <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b0af      	sub	sp, #188	; 0xbc
 8002a70:	af2a      	add	r7, sp, #168	; 0xa8
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7b5a      	ldrb	r2, [r3, #13]
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d001      	beq.n	8002a86 <bno055_set_page+0x1a>
        return BNO_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e024      	b.n	8002ad0 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d901      	bls.n	8002a90 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e01f      	b.n	8002ad0 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8002a90:	687c      	ldr	r4, [r7, #4]
 8002a92:	2301      	movs	r3, #1
 8002a94:	9329      	str	r3, [sp, #164]	; 0xa4
 8002a96:	1cfb      	adds	r3, r7, #3
 8002a98:	9328      	str	r3, [sp, #160]	; 0xa0
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	9327      	str	r3, [sp, #156]	; 0x9c
 8002a9e:	4668      	mov	r0, sp
 8002aa0:	f104 0310 	add.w	r3, r4, #16
 8002aa4:	229c      	movs	r2, #156	; 0x9c
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f007 fef1 	bl	800a88e <memcpy>
 8002aac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ab0:	f7ff ffaf 	bl	8002a12 <bno055_write_regs>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <bno055_set_page+0x56>
        return err;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	e006      	b.n	8002ad0 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f000 fdcf 	bl	800366c <HAL_Delay>
    return BNO_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd90      	pop	{r4, r7, pc}

08002ad8 <bno055_err_str>:

char* bno055_err_str(const error_bno err) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
    switch (err) {
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	2b06      	cmp	r3, #6
 8002ae6:	d81f      	bhi.n	8002b28 <bno055_err_str+0x50>
 8002ae8:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <bno055_err_str+0x18>)
 8002aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aee:	bf00      	nop
 8002af0:	08002b0d 	.word	0x08002b0d
 8002af4:	08002b11 	.word	0x08002b11
 8002af8:	08002b15 	.word	0x08002b15
 8002afc:	08002b21 	.word	0x08002b21
 8002b00:	08002b19 	.word	0x08002b19
 8002b04:	08002b1d 	.word	0x08002b1d
 8002b08:	08002b25 	.word	0x08002b25
        case BNO_OK:
            return "[BNO] Ok!";
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <bno055_err_str+0x5c>)
 8002b0e:	e00c      	b.n	8002b2a <bno055_err_str+0x52>
        case BNO_ERR_I2C:
            return "[BNO] I2C error!";
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <bno055_err_str+0x60>)
 8002b12:	e00a      	b.n	8002b2a <bno055_err_str+0x52>
        case BNO_ERR_PAGE_TOO_HIGH:
            return "[BNO] Page setting to high.";
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <bno055_err_str+0x64>)
 8002b16:	e008      	b.n	8002b2a <bno055_err_str+0x52>
        case BNO_ERR_NULL_PTR:
            return "[BNO] BNO struct is nullpointer.";
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <bno055_err_str+0x68>)
 8002b1a:	e006      	b.n	8002b2a <bno055_err_str+0x52>
        case BNO_ERR_AXIS_REMAP:
            return "[BNO] Axis remap error!";
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <bno055_err_str+0x6c>)
 8002b1e:	e004      	b.n	8002b2a <bno055_err_str+0x52>
        case BNO_ERR_SETTING_PAGE:
            return "[BNO] TODO";
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <bno055_err_str+0x70>)
 8002b22:	e002      	b.n	8002b2a <bno055_err_str+0x52>
        case BNO_ERR_WRONG_CHIP_ID:
            return "[BNO] Wrong Chip ID.";
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <bno055_err_str+0x74>)
 8002b26:	e000      	b.n	8002b2a <bno055_err_str+0x52>
    }
    return "[BNO] Ok!";
 8002b28:	4b02      	ldr	r3, [pc, #8]	; (8002b34 <bno055_err_str+0x5c>)
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	0800dea8 	.word	0x0800dea8
 8002b38:	0800deb4 	.word	0x0800deb4
 8002b3c:	0800dec8 	.word	0x0800dec8
 8002b40:	0800dee4 	.word	0x0800dee4
 8002b44:	0800df08 	.word	0x0800df08
 8002b48:	0800df20 	.word	0x0800df20
 8002b4c:	0800df2c 	.word	0x0800df2c

08002b50 <CAN_HandleSenđata>:
CAN_RxHeaderTypeDef Rxheader;
uint8_t rcdata[8];
volatile uint8_t Can_RecFlag=0;

void CAN_HandleSenđata(const uint32_t arbitration_id,
                           const uint8_t* data, const uint8_t size) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08c      	sub	sp, #48	; 0x30
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef Txheader;
	uint32_t TxMailbox;
	Txheader.DLC=size;
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
	Txheader.IDE= CAN_ID_STD;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
	Txheader.RTR= CAN_RTR_DATA;
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
	Txheader.StdId= arbitration_id;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
	if(HAL_CAN_AddTxMessage(&hcan, &Txheader, data, &TxMailbox)!=HAL_OK){
 8002b6e:	f107 0314 	add.w	r3, r7, #20
 8002b72:	f107 0118 	add.w	r1, r7, #24
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4808      	ldr	r0, [pc, #32]	; (8002b9c <CAN_HandleSenđata+0x4c>)
 8002b7a:	f000 ffa3 	bl	8003ac4 <HAL_CAN_AddTxMessage>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <CAN_HandleSenđata+0x44>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b88:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <CAN_HandleSenđata+0x50>)
 8002b8a:	f001 fe4f 	bl	800482c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002b8e:	2064      	movs	r0, #100	; 0x64
 8002b90:	f000 fd6c 	bl	800366c <HAL_Delay>
	}
}
 8002b94:	bf00      	nop
 8002b96:	3730      	adds	r7, #48	; 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	2000021c 	.word	0x2000021c
 8002ba0:	40011000 	.word	0x40011000

08002ba4 <CAN_Config_filtering>:
void CAN_Config_filtering(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation=ENABLE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterBank=0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterFIFOAssignment=CAN_RX_FIFO0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdHigh=0x0000;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	603b      	str	r3, [r7, #0]
	Can_filter_init.FilterIdLow= 0x0000;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
	Can_filter_init.FilterMaskIdHigh= 0x0000;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
	Can_filter_init.FilterMaskIdLow= 0x0000;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61fb      	str	r3, [r7, #28]
	if(HAL_CAN_ConfigFilter(&hcan,&Can_filter_init)!=HAL_OK)
 8002bce:	463b      	mov	r3, r7
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4806      	ldr	r0, [pc, #24]	; (8002bec <CAN_Config_filtering+0x48>)
 8002bd4:	f000 fe69 	bl	80038aa <HAL_CAN_ConfigFilter>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <CAN_Config_filtering+0x3e>
	{
		Error_Handler();
 8002bde:	f000 fac9 	bl	8003174 <Error_Handler>
	}
}
 8002be2:	bf00      	nop
 8002be4:	3728      	adds	r7, #40	; 0x28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	2000021c 	.word	0x2000021c

08002bf0 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback (CAN_HandleTypeDef *hcan){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rxheader, rcdata)==HAL_OK){
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8002bfa:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f001 f82f 	bl	8003c62 <HAL_CAN_GetRxMessage>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		Can_RecFlag=1;
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
	}
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000210 	.word	0x20000210
 8002c1c:	200001f4 	.word	0x200001f4
 8002c20:	20000218 	.word	0x20000218

08002c24 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <MX_CAN_Init+0x68>)
 8002c2c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002c2e:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c30:	2204      	movs	r2, #4
 8002c32:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c42:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002c46:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c4e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002c74:	4804      	ldr	r0, [pc, #16]	; (8002c88 <MX_CAN_Init+0x64>)
 8002c76:	f000 fd1d 	bl	80036b4 <HAL_CAN_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002c80:	f000 fa78 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2000021c 	.word	0x2000021c
 8002c8c:	40006400 	.word	0x40006400

08002c90 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 0310 	add.w	r3, r7, #16
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <HAL_CAN_MspInit+0xac>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d141      	bne.n	8002d34 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002cb0:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <HAL_CAN_MspInit+0xb0>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <HAL_CAN_MspInit+0xb0>)
 8002cb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cba:	61d3      	str	r3, [r2, #28]
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_CAN_MspInit+0xb0>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_CAN_MspInit+0xb0>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_CAN_MspInit+0xb0>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	6193      	str	r3, [r2, #24]
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_CAN_MspInit+0xb0>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ce4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cee:	f107 0310 	add.w	r3, r7, #16
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4813      	ldr	r0, [pc, #76]	; (8002d44 <HAL_CAN_MspInit+0xb4>)
 8002cf6:	f001 fbfd 	bl	80044f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	480d      	ldr	r0, [pc, #52]	; (8002d44 <HAL_CAN_MspInit+0xb4>)
 8002d10:	f001 fbf0 	bl	80044f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8002d14:	2200      	movs	r2, #0
 8002d16:	2105      	movs	r1, #5
 8002d18:	2013      	movs	r0, #19
 8002d1a:	f001 fbc0 	bl	800449e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8002d1e:	2013      	movs	r0, #19
 8002d20:	f001 fbd9 	bl	80044d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2105      	movs	r1, #5
 8002d28:	2014      	movs	r0, #20
 8002d2a:	f001 fbb8 	bl	800449e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002d2e:	2014      	movs	r0, #20
 8002d30:	f001 fbd1 	bl	80044d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002d34:	bf00      	nop
 8002d36:	3720      	adds	r7, #32
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40006400 	.word	0x40006400
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40010800 	.word	0x40010800

08002d48 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b0ae      	sub	sp, #184	; 0xb8
 8002d4c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
	bno = (bno055_t ) { .i2c = &hi2c1, .addr = BNO_ADDR, .mode = BNO_MODE_IMU,
 8002d4e:	4b33      	ldr	r3, [pc, #204]	; (8002e1c <MX_FREERTOS_Init+0xd4>)
 8002d50:	4618      	mov	r0, r3
 8002d52:	23ac      	movs	r3, #172	; 0xac
 8002d54:	461a      	mov	r2, r3
 8002d56:	2100      	movs	r1, #0
 8002d58:	f007 fd0c 	bl	800a774 <memset>
 8002d5c:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <MX_FREERTOS_Init+0xd4>)
 8002d5e:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <MX_FREERTOS_Init+0xd8>)
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <MX_FREERTOS_Init+0xd4>)
 8002d64:	2208      	movs	r2, #8
 8002d66:	711a      	strb	r2, [r3, #4]
 8002d68:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <MX_FREERTOS_Init+0xd4>)
 8002d6a:	2229      	movs	r2, #41	; 0x29
 8002d6c:	719a      	strb	r2, [r3, #6]
								._temp_unit = 0,
						// .ptr = &bno,
						};
		if ((err = bno055_init(&bno)) == BNO_OK) {
 8002d6e:	482b      	ldr	r0, [pc, #172]	; (8002e1c <MX_FREERTOS_Init+0xd4>)
 8002d70:	f7fe fa16 	bl	80011a0 <bno055_init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <MX_FREERTOS_Init+0xdc>)
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <MX_FREERTOS_Init+0xdc>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d106      	bne.n	8002d92 <MX_FREERTOS_Init+0x4a>
			printf("BNO055 success\r\n");
 8002d84:	4828      	ldr	r0, [pc, #160]	; (8002e28 <MX_FREERTOS_Init+0xe0>)
 8002d86:	f007 fbf5 	bl	800a574 <puts>
			osDelay (100);
 8002d8a:	2064      	movs	r0, #100	; 0x64
 8002d8c:	f004 f896 	bl	8006ebc <osDelay>
 8002d90:	e00d      	b.n	8002dae <MX_FREERTOS_Init+0x66>
		} else {
			printf("[!] BNO055 failed\r\n");
 8002d92:	4826      	ldr	r0, [pc, #152]	; (8002e2c <MX_FREERTOS_Init+0xe4>)
 8002d94:	f007 fbee 	bl	800a574 <puts>
			printf("%s\n", bno055_err_str(err));
 8002d98:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <MX_FREERTOS_Init+0xdc>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fe9b 	bl	8002ad8 <bno055_err_str>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f007 fbe5 	bl	800a574 <puts>
			Error_Handler();
 8002daa:	f000 f9e3 	bl	8003174 <Error_Handler>
		}
		err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 8002dae:	2300      	movs	r3, #0
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2300      	movs	r3, #0
 8002db4:	2200      	movs	r2, #0
 8002db6:	2100      	movs	r1, #0
 8002db8:	4818      	ldr	r0, [pc, #96]	; (8002e1c <MX_FREERTOS_Init+0xd4>)
 8002dba:	f7ff fce9 	bl	8002790 <bno055_set_unit>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <MX_FREERTOS_Init+0xdc>)
 8002dc4:	701a      	strb	r2, [r3, #0]
				BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
		if (err != BNO_OK) {
 8002dc6:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <MX_FREERTOS_Init+0xdc>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <MX_FREERTOS_Init+0x94>
			printf("[BNO] Failed to set units. Err: %d\r\n", err);
 8002dce:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <MX_FREERTOS_Init+0xdc>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4816      	ldr	r0, [pc, #88]	; (8002e30 <MX_FREERTOS_Init+0xe8>)
 8002dd6:	f007 fb67 	bl	800a4a8 <iprintf>
 8002dda:	e002      	b.n	8002de2 <MX_FREERTOS_Init+0x9a>
		} else {
			printf("[BNO] Unit selection success\r\n");
 8002ddc:	4815      	ldr	r0, [pc, #84]	; (8002e34 <MX_FREERTOS_Init+0xec>)
 8002dde:	f007 fbc9 	bl	800a574 <puts>
		}
		osDelay (100);
 8002de2:	2064      	movs	r0, #100	; 0x64
 8002de4:	f004 f86a 	bl	8006ebc <osDelay>
		Euler_Calibration(&bno, &eul, &Eulcalib);
 8002de8:	4a13      	ldr	r2, [pc, #76]	; (8002e38 <MX_FREERTOS_Init+0xf0>)
 8002dea:	4914      	ldr	r1, [pc, #80]	; (8002e3c <MX_FREERTOS_Init+0xf4>)
 8002dec:	480b      	ldr	r0, [pc, #44]	; (8002e1c <MX_FREERTOS_Init+0xd4>)
 8002dee:	f7fe f951 	bl	8001094 <Euler_Calibration>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mReadBNO */
  mReadBNOHandle = osThreadNew(ReadBNO, NULL, &mReadBNO_attributes);
 8002df2:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <MX_FREERTOS_Init+0xf8>)
 8002df4:	2100      	movs	r1, #0
 8002df6:	4813      	ldr	r0, [pc, #76]	; (8002e44 <MX_FREERTOS_Init+0xfc>)
 8002df8:	f003 ffb6 	bl	8006d68 <osThreadNew>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <MX_FREERTOS_Init+0x100>)
 8002e00:	6013      	str	r3, [r2, #0]

  /* creation of mySend_CAN */
  mySend_CANHandle = osThreadNew(Send_CAN, NULL, &mySend_CAN_attributes);
 8002e02:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <MX_FREERTOS_Init+0x104>)
 8002e04:	2100      	movs	r1, #0
 8002e06:	4812      	ldr	r0, [pc, #72]	; (8002e50 <MX_FREERTOS_Init+0x108>)
 8002e08:	f003 ffae 	bl	8006d68 <osThreadNew>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <MX_FREERTOS_Init+0x10c>)
 8002e10:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002e12:	bf00      	nop
 8002e14:	37b0      	adds	r7, #176	; 0xb0
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000250 	.word	0x20000250
 8002e20:	20000314 	.word	0x20000314
 8002e24:	200002fc 	.word	0x200002fc
 8002e28:	0800df5c 	.word	0x0800df5c
 8002e2c:	0800df6c 	.word	0x0800df6c
 8002e30:	0800df80 	.word	0x0800df80
 8002e34:	0800dfa8 	.word	0x0800dfa8
 8002e38:	20000300 	.word	0x20000300
 8002e3c:	20000244 	.word	0x20000244
 8002e40:	0800e018 	.word	0x0800e018
 8002e44:	08002e59 	.word	0x08002e59
 8002e48:	2000030c 	.word	0x2000030c
 8002e4c:	0800e03c 	.word	0x0800e03c
 8002e50:	08002ea5 	.word	0x08002ea5
 8002e54:	20000310 	.word	0x20000310

08002e58 <ReadBNO>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadBNO */
void ReadBNO(void *argument)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadBNO */
  /* Infinite loop */
  for(;;)
  {
			Euler_getData(&eul, &bno, &Eulcalib);
 8002e60:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <ReadBNO+0x38>)
 8002e62:	490c      	ldr	r1, [pc, #48]	; (8002e94 <ReadBNO+0x3c>)
 8002e64:	480c      	ldr	r0, [pc, #48]	; (8002e98 <ReadBNO+0x40>)
 8002e66:	f7fe f967 	bl	8001138 <Euler_getData>
			printf("Y %+2.2f\r\n",eul.yaw);
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <ReadBNO+0x40>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fada 	bl	8000428 <__aeabi_f2d>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4808      	ldr	r0, [pc, #32]	; (8002e9c <ReadBNO+0x44>)
 8002e7a:	f007 fb15 	bl	800a4a8 <iprintf>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e82:	4807      	ldr	r0, [pc, #28]	; (8002ea0 <ReadBNO+0x48>)
 8002e84:	f001 fcd2 	bl	800482c <HAL_GPIO_TogglePin>
			osDelay(1);
 8002e88:	2001      	movs	r0, #1
 8002e8a:	f004 f817 	bl	8006ebc <osDelay>
			Euler_getData(&eul, &bno, &Eulcalib);
 8002e8e:	e7e7      	b.n	8002e60 <ReadBNO+0x8>
 8002e90:	20000300 	.word	0x20000300
 8002e94:	20000250 	.word	0x20000250
 8002e98:	20000244 	.word	0x20000244
 8002e9c:	0800dfc8 	.word	0x0800dfc8
 8002ea0:	40011000 	.word	0x40011000

08002ea4 <Send_CAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Send_CAN */
void Send_CAN(void *argument)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Send_CAN */
	uint32_t ID =0x65;
 8002eac:	2365      	movs	r3, #101	; 0x65
 8002eae:	617b      	str	r3, [r7, #20]
	uint8_t Data[8]={1,2,3,4,5,6,7,8};
 8002eb0:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <Send_CAN+0x34>)
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eba:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size =0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	74fb      	strb	r3, [r7, #19]
  /* Infinite loop */
  for(;;)
  {
	CAN_HandleSenđata(ID,Data,size);
 8002ec2:	7cfa      	ldrb	r2, [r7, #19]
 8002ec4:	f107 0308 	add.w	r3, r7, #8
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f7ff fe40 	bl	8002b50 <CAN_HandleSenđata>
    osDelay(50);
 8002ed0:	2032      	movs	r0, #50	; 0x32
 8002ed2:	f003 fff3 	bl	8006ebc <osDelay>
	CAN_HandleSenđata(ID,Data,size);
 8002ed6:	e7f4      	b.n	8002ec2 <Send_CAN+0x1e>
 8002ed8:	0800dfd4 	.word	0x0800dfd4

08002edc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee2:	f107 0310 	add.w	r3, r7, #16
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef0:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	4a23      	ldr	r2, [pc, #140]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002ef6:	f043 0310 	orr.w	r3, r3, #16
 8002efa:	6193      	str	r3, [r2, #24]
 8002efc:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002f0e:	f043 0320 	orr.w	r3, r3, #32
 8002f12:	6193      	str	r3, [r2, #24]
 8002f14:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	6193      	str	r3, [r2, #24]
 8002f2c:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f38:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002f3e:	f043 0308 	orr.w	r3, r3, #8
 8002f42:	6193      	str	r3, [r2, #24]
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <MX_GPIO_Init+0xa8>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f56:	480c      	ldr	r0, [pc, #48]	; (8002f88 <MX_GPIO_Init+0xac>)
 8002f58:	f001 fc50 	bl	80047fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f62:	2301      	movs	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f6e:	f107 0310 	add.w	r3, r7, #16
 8002f72:	4619      	mov	r1, r3
 8002f74:	4804      	ldr	r0, [pc, #16]	; (8002f88 <MX_GPIO_Init+0xac>)
 8002f76:	f001 fabd 	bl	80044f4 <HAL_GPIO_Init>

}
 8002f7a:	bf00      	nop
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40011000 	.word	0x40011000

08002f8c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002f92:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <MX_I2C1_Init+0x54>)
 8002f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002f98:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <MX_I2C1_Init+0x58>)
 8002f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fc8:	4804      	ldr	r0, [pc, #16]	; (8002fdc <MX_I2C1_Init+0x50>)
 8002fca:	f001 fc49 	bl	8004860 <HAL_I2C_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fd4:	f000 f8ce 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000314 	.word	0x20000314
 8002fe0:	40005400 	.word	0x40005400
 8002fe4:	000186a0 	.word	0x000186a0

08002fe8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 0310 	add.w	r3, r7, #16
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a15      	ldr	r2, [pc, #84]	; (8003058 <HAL_I2C_MspInit+0x70>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d123      	bne.n	8003050 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <HAL_I2C_MspInit+0x74>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	4a13      	ldr	r2, [pc, #76]	; (800305c <HAL_I2C_MspInit+0x74>)
 800300e:	f043 0308 	orr.w	r3, r3, #8
 8003012:	6193      	str	r3, [r2, #24]
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_I2C_MspInit+0x74>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003020:	23c0      	movs	r3, #192	; 0xc0
 8003022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003024:	2312      	movs	r3, #18
 8003026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003028:	2303      	movs	r3, #3
 800302a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302c:	f107 0310 	add.w	r3, r7, #16
 8003030:	4619      	mov	r1, r3
 8003032:	480b      	ldr	r0, [pc, #44]	; (8003060 <HAL_I2C_MspInit+0x78>)
 8003034:	f001 fa5e 	bl	80044f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <HAL_I2C_MspInit+0x74>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4a07      	ldr	r2, [pc, #28]	; (800305c <HAL_I2C_MspInit+0x74>)
 800303e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003042:	61d3      	str	r3, [r2, #28]
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_I2C_MspInit+0x74>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003050:	bf00      	nop
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40005400 	.word	0x40005400
 800305c:	40021000 	.word	0x40021000
 8003060:	40010c00 	.word	0x40010c00

08003064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003068:	f000 face 	bl	8003608 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800306c:	f000 f82a 	bl	80030c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003070:	f7ff ff34 	bl	8002edc <MX_GPIO_Init>
  MX_I2C1_Init();
 8003074:	f7ff ff8a 	bl	8002f8c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003078:	f000 fa16 	bl	80034a8 <MX_USART1_UART_Init>
  MX_CAN_Init();
 800307c:	f7ff fdd2 	bl	8002c24 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config_filtering();
 8003080:	f7ff fd90 	bl	8002ba4 <CAN_Config_filtering>
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK){
 8003084:	2103      	movs	r1, #3
 8003086:	480c      	ldr	r0, [pc, #48]	; (80030b8 <main+0x54>)
 8003088:	f000 ff0c 	bl	8003ea4 <HAL_CAN_ActivateNotification>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <main+0x34>
  	 printf("Start CAN IT Error");
 8003092:	480a      	ldr	r0, [pc, #40]	; (80030bc <main+0x58>)
 8003094:	f007 fa08 	bl	800a4a8 <iprintf>
   }
    if(HAL_CAN_Start(&hcan)!=HAL_OK){
 8003098:	4807      	ldr	r0, [pc, #28]	; (80030b8 <main+0x54>)
 800309a:	f000 fccf 	bl	8003a3c <HAL_CAN_Start>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <main+0x46>
  	 printf("Start CAN Error");
 80030a4:	4806      	ldr	r0, [pc, #24]	; (80030c0 <main+0x5c>)
 80030a6:	f007 f9ff 	bl	800a4a8 <iprintf>
//	bno055_euler_t eul = { 0, 0, 0 };
//	bno055_vec4_t qua = { 0, 0, 0 };
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80030aa:	f003 fdf7 	bl	8006c9c <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80030ae:	f7ff fe4b 	bl	8002d48 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80030b2:	f003 fe25 	bl	8006d00 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//Euler_Calibration(&bno, &eul, &Eulcalib);
//ACC_Calibration(&bno, &acc, &AcceCalib);
	while (1) {
 80030b6:	e7fe      	b.n	80030b6 <main+0x52>
 80030b8:	2000021c 	.word	0x2000021c
 80030bc:	0800dfdc 	.word	0x0800dfdc
 80030c0:	0800dff0 	.word	0x0800dff0

080030c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b090      	sub	sp, #64	; 0x40
 80030c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030ca:	f107 0318 	add.w	r3, r7, #24
 80030ce:	2228      	movs	r2, #40	; 0x28
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f007 fb4e 	bl	800a774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	60da      	str	r2, [r3, #12]
 80030e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030f0:	2300      	movs	r3, #0
 80030f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030f4:	2301      	movs	r3, #1
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030f8:	2302      	movs	r3, #2
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003100:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003102:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003108:	f107 0318 	add.w	r3, r7, #24
 800310c:	4618      	mov	r0, r3
 800310e:	f002 fd6b 	bl	8005be8 <HAL_RCC_OscConfig>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003118:	f000 f82c 	bl	8003174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800311c:	230f      	movs	r3, #15
 800311e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003120:	2302      	movs	r3, #2
 8003122:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800312c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	2102      	movs	r1, #2
 8003136:	4618      	mov	r0, r3
 8003138:	f002 ffd8 	bl	80060ec <HAL_RCC_ClockConfig>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003142:	f000 f817 	bl	8003174 <Error_Handler>
  }
}
 8003146:	bf00      	nop
 8003148:	3740      	adds	r7, #64	; 0x40
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003162:	f000 fa67 	bl	8003634 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40000400 	.word	0x40000400

08003174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003178:	b672      	cpsid	i
}
 800317a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800317c:	e7fe      	b.n	800317c <Error_Handler+0x8>
	...

08003180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003186:	4b18      	ldr	r3, [pc, #96]	; (80031e8 <HAL_MspInit+0x68>)
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_MspInit+0x68>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6193      	str	r3, [r2, #24]
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_MspInit+0x68>)
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_MspInit+0x68>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <HAL_MspInit+0x68>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	61d3      	str	r3, [r2, #28]
 80031aa:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_MspInit+0x68>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	210f      	movs	r1, #15
 80031ba:	f06f 0001 	mvn.w	r0, #1
 80031be:	f001 f96e 	bl	800449e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <HAL_MspInit+0x6c>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_MspInit+0x6c>)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40010000 	.word	0x40010000

080031f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08e      	sub	sp, #56	; 0x38
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003206:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <HAL_InitTick+0xe8>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	4a33      	ldr	r2, [pc, #204]	; (80032d8 <HAL_InitTick+0xe8>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	61d3      	str	r3, [r2, #28]
 8003212:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_InitTick+0xe8>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800321e:	f107 0210 	add.w	r2, r7, #16
 8003222:	f107 0314 	add.w	r3, r7, #20
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f003 f8cf 	bl	80063cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003238:	f003 f8a0 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 800323c:	6378      	str	r0, [r7, #52]	; 0x34
 800323e:	e004      	b.n	800324a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003240:	f003 f89c 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 8003244:	4603      	mov	r3, r0
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324c:	4a23      	ldr	r2, [pc, #140]	; (80032dc <HAL_InitTick+0xec>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0c9b      	lsrs	r3, r3, #18
 8003254:	3b01      	subs	r3, #1
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <HAL_InitTick+0xf0>)
 800325a:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_InitTick+0xf4>)
 800325c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_InitTick+0xf0>)
 8003260:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003264:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003266:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <HAL_InitTick+0xf0>)
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <HAL_InitTick+0xf0>)
 800326e:	2200      	movs	r2, #0
 8003270:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003272:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_InitTick+0xf0>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <HAL_InitTick+0xf0>)
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800327e:	4818      	ldr	r0, [pc, #96]	; (80032e0 <HAL_InitTick+0xf0>)
 8003280:	f003 f8f2 	bl	8006468 <HAL_TIM_Base_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800328a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800328e:	2b00      	cmp	r3, #0
 8003290:	d11b      	bne.n	80032ca <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8003292:	4813      	ldr	r0, [pc, #76]	; (80032e0 <HAL_InitTick+0xf0>)
 8003294:	f003 f940 	bl	8006518 <HAL_TIM_Base_Start_IT>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800329e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d111      	bne.n	80032ca <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032a6:	201d      	movs	r0, #29
 80032a8:	f001 f915 	bl	80044d6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	d808      	bhi.n	80032c4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80032b2:	2200      	movs	r2, #0
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	201d      	movs	r0, #29
 80032b8:	f001 f8f1 	bl	800449e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032bc:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_InitTick+0xf8>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e002      	b.n	80032ca <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80032ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3738      	adds	r7, #56	; 0x38
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
 80032dc:	431bde83 	.word	0x431bde83
 80032e0:	20000368 	.word	0x20000368
 80032e4:	40000400 	.word	0x40000400
 80032e8:	20000004 	.word	0x20000004

080032ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032f0:	e7fe      	b.n	80032f0 <NMI_Handler+0x4>

080032f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f6:	e7fe      	b.n	80032f6 <HardFault_Handler+0x4>

080032f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032fc:	e7fe      	b.n	80032fc <MemManage_Handler+0x4>

080032fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003302:	e7fe      	b.n	8003302 <BusFault_Handler+0x4>

08003304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003308:	e7fe      	b.n	8003308 <UsageFault_Handler+0x4>

0800330a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
	...

08003318 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800331c:	4802      	ldr	r0, [pc, #8]	; (8003328 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800331e:	f000 fde6 	bl	8003eee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	2000021c 	.word	0x2000021c

0800332c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003330:	4802      	ldr	r0, [pc, #8]	; (800333c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003332:	f000 fddc 	bl	8003eee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	2000021c 	.word	0x2000021c

08003340 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003344:	4802      	ldr	r0, [pc, #8]	; (8003350 <TIM3_IRQHandler+0x10>)
 8003346:	f003 f939 	bl	80065bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000368 	.word	0x20000368

08003354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return 1;
 8003358:	2301      	movs	r3, #1
}
 800335a:	4618      	mov	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <_kill>:

int _kill(int pid, int sig)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800336c:	f007 fa54 	bl	800a818 <__errno>
 8003370:	4603      	mov	r3, r0
 8003372:	2216      	movs	r2, #22
 8003374:	601a      	str	r2, [r3, #0]
  return -1;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <_exit>:

void _exit (int status)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800338a:	f04f 31ff 	mov.w	r1, #4294967295
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffe7 	bl	8003362 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003394:	e7fe      	b.n	8003394 <_exit+0x12>

08003396 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e00a      	b.n	80033be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033a8:	f3af 8000 	nop.w
 80033ac:	4601      	mov	r1, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	60ba      	str	r2, [r7, #8]
 80033b4:	b2ca      	uxtb	r2, r1
 80033b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	3301      	adds	r3, #1
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	dbf0      	blt.n	80033a8 <_read+0x12>
  }

  return len;
 80033c6:	687b      	ldr	r3, [r7, #4]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033f6:	605a      	str	r2, [r3, #4]
  return 0;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <_isatty>:

int _isatty(int file)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800340c:	2301      	movs	r3, #1
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003438:	4a14      	ldr	r2, [pc, #80]	; (800348c <_sbrk+0x5c>)
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <_sbrk+0x60>)
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003444:	4b13      	ldr	r3, [pc, #76]	; (8003494 <_sbrk+0x64>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <_sbrk+0x64>)
 800344e:	4a12      	ldr	r2, [pc, #72]	; (8003498 <_sbrk+0x68>)
 8003450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <_sbrk+0x64>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	429a      	cmp	r2, r3
 800345e:	d207      	bcs.n	8003470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003460:	f007 f9da 	bl	800a818 <__errno>
 8003464:	4603      	mov	r3, r0
 8003466:	220c      	movs	r2, #12
 8003468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	e009      	b.n	8003484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <_sbrk+0x64>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <_sbrk+0x64>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	4a05      	ldr	r2, [pc, #20]	; (8003494 <_sbrk+0x64>)
 8003480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20005000 	.word	0x20005000
 8003490:	00000400 	.word	0x00000400
 8003494:	200003b0 	.word	0x200003b0
 8003498:	20001e98 	.word	0x20001e98

0800349c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034ae:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <MX_USART1_UART_Init+0x50>)
 80034b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034ce:	220c      	movs	r2, #12
 80034d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034de:	4805      	ldr	r0, [pc, #20]	; (80034f4 <MX_USART1_UART_Init+0x4c>)
 80034e0:	f003 fa0c 	bl	80068fc <HAL_UART_Init>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034ea:	f7ff fe43 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	200003b4 	.word	0x200003b4
 80034f8:	40013800 	.word	0x40013800

080034fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 0310 	add.w	r3, r7, #16
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <HAL_UART_MspInit+0x8c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d131      	bne.n	8003580 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_UART_MspInit+0x90>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_UART_MspInit+0x90>)
 8003522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003526:	6193      	str	r3, [r2, #24]
 8003528:	4b18      	ldr	r3, [pc, #96]	; (800358c <HAL_UART_MspInit+0x90>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003534:	4b15      	ldr	r3, [pc, #84]	; (800358c <HAL_UART_MspInit+0x90>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <HAL_UART_MspInit+0x90>)
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	6193      	str	r3, [r2, #24]
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_UART_MspInit+0x90>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800354c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003550:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	2302      	movs	r3, #2
 8003554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003556:	2303      	movs	r3, #3
 8003558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	f107 0310 	add.w	r3, r7, #16
 800355e:	4619      	mov	r1, r3
 8003560:	480b      	ldr	r0, [pc, #44]	; (8003590 <HAL_UART_MspInit+0x94>)
 8003562:	f000 ffc7 	bl	80044f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800356a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	4619      	mov	r1, r3
 800357a:	4805      	ldr	r0, [pc, #20]	; (8003590 <HAL_UART_MspInit+0x94>)
 800357c:	f000 ffba 	bl	80044f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003580:	bf00      	nop
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40013800 	.word	0x40013800
 800358c:	40021000 	.word	0x40021000
 8003590:	40010800 	.word	0x40010800

08003594 <_write>:
}

/* USER CODE BEGIN 1 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, UART_Delay);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	230a      	movs	r3, #10
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	4803      	ldr	r0, [pc, #12]	; (80035b8 <_write+0x24>)
 80035aa:	f003 f9f7 	bl	800699c <HAL_UART_Transmit>
  return len;
 80035ae:	687b      	ldr	r3, [r7, #4]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200003b4 	.word	0x200003b4

080035bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035bc:	f7ff ff6e 	bl	800349c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035c0:	480b      	ldr	r0, [pc, #44]	; (80035f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80035c2:	490c      	ldr	r1, [pc, #48]	; (80035f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80035c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c8:	e002      	b.n	80035d0 <LoopCopyDataInit>

080035ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ce:	3304      	adds	r3, #4

080035d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d4:	d3f9      	bcc.n	80035ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80035d8:	4c09      	ldr	r4, [pc, #36]	; (8003600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035dc:	e001      	b.n	80035e2 <LoopFillZerobss>

080035de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e0:	3204      	adds	r2, #4

080035e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e4:	d3fb      	bcc.n	80035de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035e6:	f007 f91d 	bl	800a824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035ea:	f7ff fd3b 	bl	8003064 <main>
  bx lr
 80035ee:	4770      	bx	lr
  ldr r0, =_sdata
 80035f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80035f8:	0800e4c0 	.word	0x0800e4c0
  ldr r2, =_sbss
 80035fc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003600:	20001e94 	.word	0x20001e94

08003604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003604:	e7fe      	b.n	8003604 <ADC1_2_IRQHandler>
	...

08003608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800360c:	4b08      	ldr	r3, [pc, #32]	; (8003630 <HAL_Init+0x28>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a07      	ldr	r2, [pc, #28]	; (8003630 <HAL_Init+0x28>)
 8003612:	f043 0310 	orr.w	r3, r3, #16
 8003616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003618:	2003      	movs	r0, #3
 800361a:	f000 ff35 	bl	8004488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800361e:	200f      	movs	r0, #15
 8003620:	f7ff fde6 	bl	80031f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003624:	f7ff fdac 	bl	8003180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40022000 	.word	0x40022000

08003634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <HAL_IncTick+0x1c>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_IncTick+0x20>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4413      	add	r3, r2
 8003644:	4a03      	ldr	r2, [pc, #12]	; (8003654 <HAL_IncTick+0x20>)
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	20000008 	.word	0x20000008
 8003654:	200003fc 	.word	0x200003fc

08003658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return uwTick;
 800365c:	4b02      	ldr	r3, [pc, #8]	; (8003668 <HAL_GetTick+0x10>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	200003fc 	.word	0x200003fc

0800366c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003674:	f7ff fff0 	bl	8003658 <HAL_GetTick>
 8003678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d005      	beq.n	8003692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <HAL_Delay+0x44>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003692:	bf00      	nop
 8003694:	f7ff ffe0 	bl	8003658 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d8f7      	bhi.n	8003694 <HAL_Delay+0x28>
  {
  }
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000008 	.word	0x20000008

080036b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0ed      	b.n	80038a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fadc 	bl	8002c90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036e8:	f7ff ffb6 	bl	8003658 <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036ee:	e012      	b.n	8003716 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036f0:	f7ff ffb2 	bl	8003658 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b0a      	cmp	r3, #10
 80036fc:	d90b      	bls.n	8003716 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2205      	movs	r2, #5
 800370e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e0c5      	b.n	80038a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0e5      	beq.n	80036f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0202 	bic.w	r2, r2, #2
 8003732:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003734:	f7ff ff90 	bl	8003658 <HAL_GetTick>
 8003738:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800373a:	e012      	b.n	8003762 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800373c:	f7ff ff8c 	bl	8003658 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b0a      	cmp	r3, #10
 8003748:	d90b      	bls.n	8003762 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2205      	movs	r2, #5
 800375a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e09f      	b.n	80038a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	7e1b      	ldrb	r3, [r3, #24]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d108      	bne.n	800378a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	e007      	b.n	800379a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003798:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	7e5b      	ldrb	r3, [r3, #25]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d108      	bne.n	80037b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e007      	b.n	80037c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	7e9b      	ldrb	r3, [r3, #26]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d108      	bne.n	80037de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0220 	orr.w	r2, r2, #32
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e007      	b.n	80037ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0220 	bic.w	r2, r2, #32
 80037ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7edb      	ldrb	r3, [r3, #27]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d108      	bne.n	8003808 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0210 	bic.w	r2, r2, #16
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e007      	b.n	8003818 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0210 	orr.w	r2, r2, #16
 8003816:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	7f1b      	ldrb	r3, [r3, #28]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d108      	bne.n	8003832 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0208 	orr.w	r2, r2, #8
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e007      	b.n	8003842 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0208 	bic.w	r2, r2, #8
 8003840:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7f5b      	ldrb	r3, [r3, #29]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d108      	bne.n	800385c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0204 	orr.w	r2, r2, #4
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e007      	b.n	800386c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	ea42 0103 	orr.w	r1, r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b087      	sub	sp, #28
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038c0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d003      	beq.n	80038d0 <HAL_CAN_ConfigFilter+0x26>
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	f040 80aa 	bne.w	8003a24 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038d6:	f043 0201 	orr.w	r2, r3, #1
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	2201      	movs	r2, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	401a      	ands	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d123      	bne.n	8003952 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	43db      	mvns	r3, r3
 8003914:	401a      	ands	r2, r3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800392c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	3248      	adds	r2, #72	; 0x48
 8003932:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003946:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003948:	6979      	ldr	r1, [r7, #20]
 800394a:	3348      	adds	r3, #72	; 0x48
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	440b      	add	r3, r1
 8003950:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d122      	bne.n	80039a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	431a      	orrs	r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800397a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	3248      	adds	r2, #72	; 0x48
 8003980:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003994:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003996:	6979      	ldr	r1, [r7, #20]
 8003998:	3348      	adds	r3, #72	; 0x48
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	440b      	add	r3, r1
 800399e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80039ba:	e007      	b.n	80039cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	43db      	mvns	r3, r3
 80039de:	401a      	ands	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80039e6:	e007      	b.n	80039f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d107      	bne.n	8003a10 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a16:	f023 0201 	bic.w	r2, r3, #1
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e006      	b.n	8003a32 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d12e      	bne.n	8003aae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a68:	f7ff fdf6 	bl	8003658 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a6e:	e012      	b.n	8003a96 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a70:	f7ff fdf2 	bl	8003658 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b0a      	cmp	r3, #10
 8003a7c:	d90b      	bls.n	8003a96 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2205      	movs	r2, #5
 8003a8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e012      	b.n	8003abc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e5      	bne.n	8003a70 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e006      	b.n	8003abc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
  }
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ae2:	7ffb      	ldrb	r3, [r7, #31]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d003      	beq.n	8003af0 <HAL_CAN_AddTxMessage+0x2c>
 8003ae8:	7ffb      	ldrb	r3, [r7, #31]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	f040 80ad 	bne.w	8003c4a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8095 	beq.w	8003c3a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	0e1b      	lsrs	r3, r3, #24
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	6809      	ldr	r1, [r1, #0]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3318      	adds	r3, #24
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	440b      	add	r3, r1
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e00f      	b.n	8003b68 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b52:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b58:	68f9      	ldr	r1, [r7, #12]
 8003b5a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003b5c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	3318      	adds	r3, #24
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	440b      	add	r3, r1
 8003b66:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3318      	adds	r3, #24
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	440b      	add	r3, r1
 8003b78:	3304      	adds	r3, #4
 8003b7a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	7d1b      	ldrb	r3, [r3, #20]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d111      	bne.n	8003ba8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	4413      	add	r3, r2
 8003b90:	3304      	adds	r3, #4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	6811      	ldr	r1, [r2, #0]
 8003b98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	3318      	adds	r3, #24
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3307      	adds	r3, #7
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	061a      	lsls	r2, r3, #24
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3306      	adds	r3, #6
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3305      	adds	r3, #5
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	3204      	adds	r2, #4
 8003bc8:	7812      	ldrb	r2, [r2, #0]
 8003bca:	4610      	mov	r0, r2
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	6811      	ldr	r1, [r2, #0]
 8003bd0:	ea43 0200 	orr.w	r2, r3, r0
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	440b      	add	r3, r1
 8003bda:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003bde:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3303      	adds	r3, #3
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	061a      	lsls	r2, r3, #24
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3302      	adds	r3, #2
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	041b      	lsls	r3, r3, #16
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	7812      	ldrb	r2, [r2, #0]
 8003c00:	4610      	mov	r0, r2
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	6811      	ldr	r1, [r2, #0]
 8003c06:	ea43 0200 	orr.w	r2, r3, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	440b      	add	r3, r1
 8003c10:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003c14:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	3318      	adds	r3, #24
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	4413      	add	r3, r2
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	6811      	ldr	r1, [r2, #0]
 8003c28:	f043 0201 	orr.w	r2, r3, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3318      	adds	r3, #24
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	440b      	add	r3, r1
 8003c34:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e00e      	b.n	8003c58 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e006      	b.n	8003c58 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3724      	adds	r7, #36	; 0x24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003c62:	b480      	push	{r7}
 8003c64:	b087      	sub	sp, #28
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c76:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d003      	beq.n	8003c86 <HAL_CAN_GetRxMessage+0x24>
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	f040 8103 	bne.w	8003e8c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10e      	bne.n	8003caa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d116      	bne.n	8003cc8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0f7      	b.n	8003e9a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d107      	bne.n	8003cc8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0e8      	b.n	8003e9a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	331b      	adds	r3, #27
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	4413      	add	r3, r2
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0204 	and.w	r2, r3, #4
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10c      	bne.n	8003d00 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	331b      	adds	r3, #27
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	4413      	add	r3, r2
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	0d5b      	lsrs	r3, r3, #21
 8003cf6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e00b      	b.n	8003d18 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	331b      	adds	r3, #27
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	4413      	add	r3, r2
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	08db      	lsrs	r3, r3, #3
 8003d10:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	331b      	adds	r3, #27
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	4413      	add	r3, r2
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0202 	and.w	r2, r3, #2
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	331b      	adds	r3, #27
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	4413      	add	r3, r2
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	611a      	str	r2, [r3, #16]
 8003d4c:	e00b      	b.n	8003d66 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	331b      	adds	r3, #27
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	4413      	add	r3, r2
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 020f 	and.w	r2, r3, #15
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	331b      	adds	r3, #27
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	4413      	add	r3, r2
 8003d72:	3304      	adds	r3, #4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	331b      	adds	r3, #27
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	4413      	add	r3, r2
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	0a1a      	lsrs	r2, r3, #8
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	0c1a      	lsrs	r2, r3, #16
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	3302      	adds	r3, #2
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	0e1a      	lsrs	r2, r3, #24
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	3303      	adds	r3, #3
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	0a1a      	lsrs	r2, r3, #8
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	3305      	adds	r3, #5
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0c1a      	lsrs	r2, r3, #16
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	3306      	adds	r3, #6
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0e1a      	lsrs	r2, r3, #24
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	3307      	adds	r3, #7
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d108      	bne.n	8003e78 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0220 	orr.w	r2, r2, #32
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	e007      	b.n	8003e88 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0220 	orr.w	r2, r2, #32
 8003e86:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e006      	b.n	8003e9a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
  }
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eb4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d002      	beq.n	8003ec2 <HAL_CAN_ActivateNotification+0x1e>
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d109      	bne.n	8003ed6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6959      	ldr	r1, [r3, #20]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e006      	b.n	8003ee4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
  }
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b08a      	sub	sp, #40	; 0x28
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d07c      	beq.n	800402e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d023      	beq.n	8003f86 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2201      	movs	r2, #1
 8003f44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f983 	bl	800425c <HAL_CAN_TxMailbox0CompleteCallback>
 8003f56:	e016      	b.n	8003f86 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	e00c      	b.n	8003f86 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	e002      	b.n	8003f86 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f986 	bl	8004292 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d024      	beq.n	8003fda <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f962 	bl	800426e <HAL_CAN_TxMailbox1CompleteCallback>
 8003faa:	e016      	b.n	8003fda <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbe:	e00c      	b.n	8003fda <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd2:	e002      	b.n	8003fda <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f965 	bl	80042a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d024      	beq.n	800402e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f941 	bl	8004280 <HAL_CAN_TxMailbox2CompleteCallback>
 8003ffe:	e016      	b.n	800402e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
 8004012:	e00c      	b.n	800402e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
 8004026:	e002      	b.n	800402e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f944 	bl	80042b6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00c      	beq.n	8004052 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 0310 	and.w	r3, r3, #16
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004048:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2210      	movs	r2, #16
 8004050:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b00      	cmp	r3, #0
 8004064:	d006      	beq.n	8004074 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2208      	movs	r2, #8
 800406c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f92a 	bl	80042c8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7fe fdaf 	bl	8002bf0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00c      	beq.n	80040b6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2210      	movs	r2, #16
 80040b4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00b      	beq.n	80040d8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d006      	beq.n	80040d8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2208      	movs	r2, #8
 80040d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f90a 	bl	80042ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f8f2 	bl	80042da <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00b      	beq.n	8004118 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2210      	movs	r2, #16
 8004110:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f8f3 	bl	80042fe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d006      	beq.n	800413a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2208      	movs	r2, #8
 8004132:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8eb 	bl	8004310 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d07b      	beq.n	800423c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d072      	beq.n	8004234 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d043      	beq.n	8004234 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d03e      	beq.n	8004234 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041bc:	2b60      	cmp	r3, #96	; 0x60
 80041be:	d02b      	beq.n	8004218 <HAL_CAN_IRQHandler+0x32a>
 80041c0:	2b60      	cmp	r3, #96	; 0x60
 80041c2:	d82e      	bhi.n	8004222 <HAL_CAN_IRQHandler+0x334>
 80041c4:	2b50      	cmp	r3, #80	; 0x50
 80041c6:	d022      	beq.n	800420e <HAL_CAN_IRQHandler+0x320>
 80041c8:	2b50      	cmp	r3, #80	; 0x50
 80041ca:	d82a      	bhi.n	8004222 <HAL_CAN_IRQHandler+0x334>
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	d019      	beq.n	8004204 <HAL_CAN_IRQHandler+0x316>
 80041d0:	2b40      	cmp	r3, #64	; 0x40
 80041d2:	d826      	bhi.n	8004222 <HAL_CAN_IRQHandler+0x334>
 80041d4:	2b30      	cmp	r3, #48	; 0x30
 80041d6:	d010      	beq.n	80041fa <HAL_CAN_IRQHandler+0x30c>
 80041d8:	2b30      	cmp	r3, #48	; 0x30
 80041da:	d822      	bhi.n	8004222 <HAL_CAN_IRQHandler+0x334>
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d002      	beq.n	80041e6 <HAL_CAN_IRQHandler+0x2f8>
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d005      	beq.n	80041f0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80041e4:	e01d      	b.n	8004222 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	f043 0308 	orr.w	r3, r3, #8
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041ee:	e019      	b.n	8004224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	f043 0310 	orr.w	r3, r3, #16
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041f8:	e014      	b.n	8004224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	f043 0320 	orr.w	r3, r3, #32
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004202:	e00f      	b.n	8004224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800420c:	e00a      	b.n	8004224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004216:	e005      	b.n	8004224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004220:	e000      	b.n	8004224 <HAL_CAN_IRQHandler+0x336>
            break;
 8004222:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004232:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2204      	movs	r2, #4
 800423a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f867 	bl	8004322 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004254:	bf00      	nop
 8004256:	3728      	adds	r7, #40	; 0x28
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr

0800426e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr

080042da <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004350:	4013      	ands	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800435c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004366:	4a04      	ldr	r2, [pc, #16]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	60d3      	str	r3, [r2, #12]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <__NVIC_GetPriorityGrouping+0x18>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	f003 0307 	and.w	r3, r3, #7
}
 800438a:	4618      	mov	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db0b      	blt.n	80043c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	4906      	ldr	r1, [pc, #24]	; (80043cc <__NVIC_EnableIRQ+0x34>)
 80043b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2001      	movs	r0, #1
 80043ba:	fa00 f202 	lsl.w	r2, r0, r2
 80043be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	e000e100 	.word	0xe000e100

080043d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	db0a      	blt.n	80043fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	490c      	ldr	r1, [pc, #48]	; (800441c <__NVIC_SetPriority+0x4c>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	0112      	lsls	r2, r2, #4
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	440b      	add	r3, r1
 80043f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043f8:	e00a      	b.n	8004410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4908      	ldr	r1, [pc, #32]	; (8004420 <__NVIC_SetPriority+0x50>)
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	3b04      	subs	r3, #4
 8004408:	0112      	lsls	r2, r2, #4
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	440b      	add	r3, r1
 800440e:	761a      	strb	r2, [r3, #24]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000e100 	.word	0xe000e100
 8004420:	e000ed00 	.word	0xe000ed00

08004424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f1c3 0307 	rsb	r3, r3, #7
 800443e:	2b04      	cmp	r3, #4
 8004440:	bf28      	it	cs
 8004442:	2304      	movcs	r3, #4
 8004444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3304      	adds	r3, #4
 800444a:	2b06      	cmp	r3, #6
 800444c:	d902      	bls.n	8004454 <NVIC_EncodePriority+0x30>
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3b03      	subs	r3, #3
 8004452:	e000      	b.n	8004456 <NVIC_EncodePriority+0x32>
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004458:	f04f 32ff 	mov.w	r2, #4294967295
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43da      	mvns	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	401a      	ands	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800446c:	f04f 31ff 	mov.w	r1, #4294967295
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	43d9      	mvns	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800447c:	4313      	orrs	r3, r2
         );
}
 800447e:	4618      	mov	r0, r3
 8004480:	3724      	adds	r7, #36	; 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ff4f 	bl	8004334 <__NVIC_SetPriorityGrouping>
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	4603      	mov	r3, r0
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b0:	f7ff ff64 	bl	800437c <__NVIC_GetPriorityGrouping>
 80044b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	6978      	ldr	r0, [r7, #20]
 80044bc:	f7ff ffb2 	bl	8004424 <NVIC_EncodePriority>
 80044c0:	4602      	mov	r2, r0
 80044c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c6:	4611      	mov	r1, r2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff81 	bl	80043d0 <__NVIC_SetPriority>
}
 80044ce:	bf00      	nop
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	4603      	mov	r3, r0
 80044de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff ff57 	bl	8004398 <__NVIC_EnableIRQ>
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b08b      	sub	sp, #44	; 0x2c
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044fe:	2300      	movs	r3, #0
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004502:	2300      	movs	r3, #0
 8004504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004506:	e169      	b.n	80047dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004508:	2201      	movs	r2, #1
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	429a      	cmp	r2, r3
 8004522:	f040 8158 	bne.w	80047d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4a9a      	ldr	r2, [pc, #616]	; (8004794 <HAL_GPIO_Init+0x2a0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d05e      	beq.n	80045ee <HAL_GPIO_Init+0xfa>
 8004530:	4a98      	ldr	r2, [pc, #608]	; (8004794 <HAL_GPIO_Init+0x2a0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d875      	bhi.n	8004622 <HAL_GPIO_Init+0x12e>
 8004536:	4a98      	ldr	r2, [pc, #608]	; (8004798 <HAL_GPIO_Init+0x2a4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d058      	beq.n	80045ee <HAL_GPIO_Init+0xfa>
 800453c:	4a96      	ldr	r2, [pc, #600]	; (8004798 <HAL_GPIO_Init+0x2a4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d86f      	bhi.n	8004622 <HAL_GPIO_Init+0x12e>
 8004542:	4a96      	ldr	r2, [pc, #600]	; (800479c <HAL_GPIO_Init+0x2a8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d052      	beq.n	80045ee <HAL_GPIO_Init+0xfa>
 8004548:	4a94      	ldr	r2, [pc, #592]	; (800479c <HAL_GPIO_Init+0x2a8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d869      	bhi.n	8004622 <HAL_GPIO_Init+0x12e>
 800454e:	4a94      	ldr	r2, [pc, #592]	; (80047a0 <HAL_GPIO_Init+0x2ac>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d04c      	beq.n	80045ee <HAL_GPIO_Init+0xfa>
 8004554:	4a92      	ldr	r2, [pc, #584]	; (80047a0 <HAL_GPIO_Init+0x2ac>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d863      	bhi.n	8004622 <HAL_GPIO_Init+0x12e>
 800455a:	4a92      	ldr	r2, [pc, #584]	; (80047a4 <HAL_GPIO_Init+0x2b0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d046      	beq.n	80045ee <HAL_GPIO_Init+0xfa>
 8004560:	4a90      	ldr	r2, [pc, #576]	; (80047a4 <HAL_GPIO_Init+0x2b0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d85d      	bhi.n	8004622 <HAL_GPIO_Init+0x12e>
 8004566:	2b12      	cmp	r3, #18
 8004568:	d82a      	bhi.n	80045c0 <HAL_GPIO_Init+0xcc>
 800456a:	2b12      	cmp	r3, #18
 800456c:	d859      	bhi.n	8004622 <HAL_GPIO_Init+0x12e>
 800456e:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <HAL_GPIO_Init+0x80>)
 8004570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004574:	080045ef 	.word	0x080045ef
 8004578:	080045c9 	.word	0x080045c9
 800457c:	080045db 	.word	0x080045db
 8004580:	0800461d 	.word	0x0800461d
 8004584:	08004623 	.word	0x08004623
 8004588:	08004623 	.word	0x08004623
 800458c:	08004623 	.word	0x08004623
 8004590:	08004623 	.word	0x08004623
 8004594:	08004623 	.word	0x08004623
 8004598:	08004623 	.word	0x08004623
 800459c:	08004623 	.word	0x08004623
 80045a0:	08004623 	.word	0x08004623
 80045a4:	08004623 	.word	0x08004623
 80045a8:	08004623 	.word	0x08004623
 80045ac:	08004623 	.word	0x08004623
 80045b0:	08004623 	.word	0x08004623
 80045b4:	08004623 	.word	0x08004623
 80045b8:	080045d1 	.word	0x080045d1
 80045bc:	080045e5 	.word	0x080045e5
 80045c0:	4a79      	ldr	r2, [pc, #484]	; (80047a8 <HAL_GPIO_Init+0x2b4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045c6:	e02c      	b.n	8004622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	623b      	str	r3, [r7, #32]
          break;
 80045ce:	e029      	b.n	8004624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	3304      	adds	r3, #4
 80045d6:	623b      	str	r3, [r7, #32]
          break;
 80045d8:	e024      	b.n	8004624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	3308      	adds	r3, #8
 80045e0:	623b      	str	r3, [r7, #32]
          break;
 80045e2:	e01f      	b.n	8004624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	330c      	adds	r3, #12
 80045ea:	623b      	str	r3, [r7, #32]
          break;
 80045ec:	e01a      	b.n	8004624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d102      	bne.n	80045fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045f6:	2304      	movs	r3, #4
 80045f8:	623b      	str	r3, [r7, #32]
          break;
 80045fa:	e013      	b.n	8004624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d105      	bne.n	8004610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004604:	2308      	movs	r3, #8
 8004606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	611a      	str	r2, [r3, #16]
          break;
 800460e:	e009      	b.n	8004624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004610:	2308      	movs	r3, #8
 8004612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	615a      	str	r2, [r3, #20]
          break;
 800461a:	e003      	b.n	8004624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800461c:	2300      	movs	r3, #0
 800461e:	623b      	str	r3, [r7, #32]
          break;
 8004620:	e000      	b.n	8004624 <HAL_GPIO_Init+0x130>
          break;
 8004622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2bff      	cmp	r3, #255	; 0xff
 8004628:	d801      	bhi.n	800462e <HAL_GPIO_Init+0x13a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	e001      	b.n	8004632 <HAL_GPIO_Init+0x13e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2bff      	cmp	r3, #255	; 0xff
 8004638:	d802      	bhi.n	8004640 <HAL_GPIO_Init+0x14c>
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	e002      	b.n	8004646 <HAL_GPIO_Init+0x152>
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	3b08      	subs	r3, #8
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	210f      	movs	r1, #15
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	401a      	ands	r2, r3
 8004658:	6a39      	ldr	r1, [r7, #32]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	fa01 f303 	lsl.w	r3, r1, r3
 8004660:	431a      	orrs	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 80b1 	beq.w	80047d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004674:	4b4d      	ldr	r3, [pc, #308]	; (80047ac <HAL_GPIO_Init+0x2b8>)
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	4a4c      	ldr	r2, [pc, #304]	; (80047ac <HAL_GPIO_Init+0x2b8>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	6193      	str	r3, [r2, #24]
 8004680:	4b4a      	ldr	r3, [pc, #296]	; (80047ac <HAL_GPIO_Init+0x2b8>)
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800468c:	4a48      	ldr	r2, [pc, #288]	; (80047b0 <HAL_GPIO_Init+0x2bc>)
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	3302      	adds	r3, #2
 8004694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	220f      	movs	r2, #15
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4013      	ands	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a40      	ldr	r2, [pc, #256]	; (80047b4 <HAL_GPIO_Init+0x2c0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <HAL_GPIO_Init+0x1ec>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3f      	ldr	r2, [pc, #252]	; (80047b8 <HAL_GPIO_Init+0x2c4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00d      	beq.n	80046dc <HAL_GPIO_Init+0x1e8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a3e      	ldr	r2, [pc, #248]	; (80047bc <HAL_GPIO_Init+0x2c8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <HAL_GPIO_Init+0x1e4>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a3d      	ldr	r2, [pc, #244]	; (80047c0 <HAL_GPIO_Init+0x2cc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d101      	bne.n	80046d4 <HAL_GPIO_Init+0x1e0>
 80046d0:	2303      	movs	r3, #3
 80046d2:	e006      	b.n	80046e2 <HAL_GPIO_Init+0x1ee>
 80046d4:	2304      	movs	r3, #4
 80046d6:	e004      	b.n	80046e2 <HAL_GPIO_Init+0x1ee>
 80046d8:	2302      	movs	r3, #2
 80046da:	e002      	b.n	80046e2 <HAL_GPIO_Init+0x1ee>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <HAL_GPIO_Init+0x1ee>
 80046e0:	2300      	movs	r3, #0
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	f002 0203 	and.w	r2, r2, #3
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	4093      	lsls	r3, r2
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046f2:	492f      	ldr	r1, [pc, #188]	; (80047b0 <HAL_GPIO_Init+0x2bc>)
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	3302      	adds	r3, #2
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d006      	beq.n	800471a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800470c:	4b2d      	ldr	r3, [pc, #180]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	492c      	ldr	r1, [pc, #176]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	4313      	orrs	r3, r2
 8004716:	608b      	str	r3, [r1, #8]
 8004718:	e006      	b.n	8004728 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800471a:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	43db      	mvns	r3, r3
 8004722:	4928      	ldr	r1, [pc, #160]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 8004724:	4013      	ands	r3, r2
 8004726:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d006      	beq.n	8004742 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004734:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	4922      	ldr	r1, [pc, #136]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	4313      	orrs	r3, r2
 800473e:	60cb      	str	r3, [r1, #12]
 8004740:	e006      	b.n	8004750 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004742:	4b20      	ldr	r3, [pc, #128]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	43db      	mvns	r3, r3
 800474a:	491e      	ldr	r1, [pc, #120]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 800474c:	4013      	ands	r3, r2
 800474e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d006      	beq.n	800476a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800475c:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	4918      	ldr	r1, [pc, #96]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	e006      	b.n	8004778 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800476a:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	43db      	mvns	r3, r3
 8004772:	4914      	ldr	r1, [pc, #80]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 8004774:	4013      	ands	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d021      	beq.n	80047c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	490e      	ldr	r1, [pc, #56]	; (80047c4 <HAL_GPIO_Init+0x2d0>)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	4313      	orrs	r3, r2
 800478e:	600b      	str	r3, [r1, #0]
 8004790:	e021      	b.n	80047d6 <HAL_GPIO_Init+0x2e2>
 8004792:	bf00      	nop
 8004794:	10320000 	.word	0x10320000
 8004798:	10310000 	.word	0x10310000
 800479c:	10220000 	.word	0x10220000
 80047a0:	10210000 	.word	0x10210000
 80047a4:	10120000 	.word	0x10120000
 80047a8:	10110000 	.word	0x10110000
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40010000 	.word	0x40010000
 80047b4:	40010800 	.word	0x40010800
 80047b8:	40010c00 	.word	0x40010c00
 80047bc:	40011000 	.word	0x40011000
 80047c0:	40011400 	.word	0x40011400
 80047c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80047c8:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <HAL_GPIO_Init+0x304>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	4909      	ldr	r1, [pc, #36]	; (80047f8 <HAL_GPIO_Init+0x304>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	3301      	adds	r3, #1
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f47f ae8e 	bne.w	8004508 <HAL_GPIO_Init+0x14>
  }
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	372c      	adds	r7, #44	; 0x2c
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr
 80047f8:	40010400 	.word	0x40010400

080047fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
 8004808:	4613      	mov	r3, r2
 800480a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800480c:	787b      	ldrb	r3, [r7, #1]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004818:	e003      	b.n	8004822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800481a:	887b      	ldrh	r3, [r7, #2]
 800481c:	041a      	lsls	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	611a      	str	r2, [r3, #16]
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800483e:	887a      	ldrh	r2, [r7, #2]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4013      	ands	r3, r2
 8004844:	041a      	lsls	r2, r3, #16
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	43d9      	mvns	r1, r3
 800484a:	887b      	ldrh	r3, [r7, #2]
 800484c:	400b      	ands	r3, r1
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	611a      	str	r2, [r3, #16]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr
	...

08004860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e12b      	b.n	8004aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fe fbae 	bl	8002fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2224      	movs	r2, #36	; 0x24
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0201 	bic.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048c4:	f001 fd5a 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 80048c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4a81      	ldr	r2, [pc, #516]	; (8004ad4 <HAL_I2C_Init+0x274>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d807      	bhi.n	80048e4 <HAL_I2C_Init+0x84>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a80      	ldr	r2, [pc, #512]	; (8004ad8 <HAL_I2C_Init+0x278>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	bf94      	ite	ls
 80048dc:	2301      	movls	r3, #1
 80048de:	2300      	movhi	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e006      	b.n	80048f2 <HAL_I2C_Init+0x92>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a7d      	ldr	r2, [pc, #500]	; (8004adc <HAL_I2C_Init+0x27c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	bf94      	ite	ls
 80048ec:	2301      	movls	r3, #1
 80048ee:	2300      	movhi	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0e7      	b.n	8004aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a78      	ldr	r2, [pc, #480]	; (8004ae0 <HAL_I2C_Init+0x280>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0c9b      	lsrs	r3, r3, #18
 8004904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4a6a      	ldr	r2, [pc, #424]	; (8004ad4 <HAL_I2C_Init+0x274>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d802      	bhi.n	8004934 <HAL_I2C_Init+0xd4>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	3301      	adds	r3, #1
 8004932:	e009      	b.n	8004948 <HAL_I2C_Init+0xe8>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	4a69      	ldr	r2, [pc, #420]	; (8004ae4 <HAL_I2C_Init+0x284>)
 8004940:	fba2 2303 	umull	r2, r3, r2, r3
 8004944:	099b      	lsrs	r3, r3, #6
 8004946:	3301      	adds	r3, #1
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	430b      	orrs	r3, r1
 800494e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800495a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	495c      	ldr	r1, [pc, #368]	; (8004ad4 <HAL_I2C_Init+0x274>)
 8004964:	428b      	cmp	r3, r1
 8004966:	d819      	bhi.n	800499c <HAL_I2C_Init+0x13c>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	1e59      	subs	r1, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	fbb1 f3f3 	udiv	r3, r1, r3
 8004976:	1c59      	adds	r1, r3, #1
 8004978:	f640 73fc 	movw	r3, #4092	; 0xffc
 800497c:	400b      	ands	r3, r1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_I2C_Init+0x138>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1e59      	subs	r1, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004990:	3301      	adds	r3, #1
 8004992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004996:	e051      	b.n	8004a3c <HAL_I2C_Init+0x1dc>
 8004998:	2304      	movs	r3, #4
 800499a:	e04f      	b.n	8004a3c <HAL_I2C_Init+0x1dc>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d111      	bne.n	80049c8 <HAL_I2C_Init+0x168>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1e58      	subs	r0, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6859      	ldr	r1, [r3, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	440b      	add	r3, r1
 80049b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b6:	3301      	adds	r3, #1
 80049b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e012      	b.n	80049ee <HAL_I2C_Init+0x18e>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	1e58      	subs	r0, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6859      	ldr	r1, [r3, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	0099      	lsls	r1, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	fbb0 f3f3 	udiv	r3, r0, r3
 80049de:	3301      	adds	r3, #1
 80049e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_I2C_Init+0x196>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e022      	b.n	8004a3c <HAL_I2C_Init+0x1dc>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10e      	bne.n	8004a1c <HAL_I2C_Init+0x1bc>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1e58      	subs	r0, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6859      	ldr	r1, [r3, #4]
 8004a06:	460b      	mov	r3, r1
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	440b      	add	r3, r1
 8004a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a10:	3301      	adds	r3, #1
 8004a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1a:	e00f      	b.n	8004a3c <HAL_I2C_Init+0x1dc>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	1e58      	subs	r0, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6859      	ldr	r1, [r3, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	0099      	lsls	r1, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a32:	3301      	adds	r3, #1
 8004a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	6809      	ldr	r1, [r1, #0]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69da      	ldr	r2, [r3, #28]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6911      	ldr	r1, [r2, #16]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68d2      	ldr	r2, [r2, #12]
 8004a76:	4311      	orrs	r1, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	000186a0 	.word	0x000186a0
 8004ad8:	001e847f 	.word	0x001e847f
 8004adc:	003d08ff 	.word	0x003d08ff
 8004ae0:	431bde83 	.word	0x431bde83
 8004ae4:	10624dd3 	.word	0x10624dd3

08004ae8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	461a      	mov	r2, r3
 8004af4:	460b      	mov	r3, r1
 8004af6:	817b      	strh	r3, [r7, #10]
 8004af8:	4613      	mov	r3, r2
 8004afa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004afc:	f7fe fdac 	bl	8003658 <HAL_GetTick>
 8004b00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	f040 80e0 	bne.w	8004cd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2319      	movs	r3, #25
 8004b16:	2201      	movs	r2, #1
 8004b18:	4970      	ldr	r1, [pc, #448]	; (8004cdc <HAL_I2C_Master_Transmit+0x1f4>)
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fe2e 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
 8004b28:	e0d3      	b.n	8004cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_I2C_Master_Transmit+0x50>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e0cc      	b.n	8004cd2 <HAL_I2C_Master_Transmit+0x1ea>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d007      	beq.n	8004b5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2221      	movs	r2, #33	; 0x21
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2210      	movs	r2, #16
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	893a      	ldrh	r2, [r7, #8]
 8004b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4a50      	ldr	r2, [pc, #320]	; (8004ce0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ba0:	8979      	ldrh	r1, [r7, #10]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fc02 	bl	80053b0 <I2C_MasterRequestWrite>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e08d      	b.n	8004cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004bcc:	e066      	b.n	8004c9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	6a39      	ldr	r1, [r7, #32]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 feec 	bl	80059b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00d      	beq.n	8004bfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d107      	bne.n	8004bf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e06b      	b.n	8004cd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	781a      	ldrb	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d11b      	bne.n	8004c70 <HAL_I2C_Master_Transmit+0x188>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d017      	beq.n	8004c70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	6a39      	ldr	r1, [r7, #32]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 fee3 	bl	8005a40 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d107      	bne.n	8004c98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e01a      	b.n	8004cd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d194      	bne.n	8004bce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e000      	b.n	8004cd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	00100002 	.word	0x00100002
 8004ce0:	ffff0000 	.word	0xffff0000

08004ce4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08c      	sub	sp, #48	; 0x30
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	607a      	str	r2, [r7, #4]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	817b      	strh	r3, [r7, #10]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cfc:	f7fe fcac 	bl	8003658 <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	f040 824b 	bne.w	80051a6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2319      	movs	r3, #25
 8004d16:	2201      	movs	r2, #1
 8004d18:	497f      	ldr	r1, [pc, #508]	; (8004f18 <HAL_I2C_Master_Receive+0x234>)
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fd2e 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
 8004d28:	e23e      	b.n	80051a8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_I2C_Master_Receive+0x54>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e237      	b.n	80051a8 <HAL_I2C_Master_Receive+0x4c4>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d007      	beq.n	8004d5e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2222      	movs	r2, #34	; 0x22
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2210      	movs	r2, #16
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	893a      	ldrh	r2, [r7, #8]
 8004d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4a5f      	ldr	r2, [pc, #380]	; (8004f1c <HAL_I2C_Master_Receive+0x238>)
 8004d9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004da0:	8979      	ldrh	r1, [r7, #10]
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fb84 	bl	80054b4 <I2C_MasterRequestRead>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e1f8      	b.n	80051a8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d113      	bne.n	8004de6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e1cc      	b.n	8005180 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d11e      	bne.n	8004e2c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dfe:	b672      	cpsid	i
}
 8004e00:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e28:	b662      	cpsie	i
}
 8004e2a:	e035      	b.n	8004e98 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d11e      	bne.n	8004e72 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e44:	b672      	cpsid	i
}
 8004e46:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e6e:	b662      	cpsie	i
}
 8004e70:	e012      	b.n	8004e98 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e98:	e172      	b.n	8005180 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	f200 811f 	bhi.w	80050e2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d123      	bne.n	8004ef4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fe0d 	bl	8005ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e173      	b.n	80051a8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ef2:	e145      	b.n	8005180 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d152      	bne.n	8004fa2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	2200      	movs	r2, #0
 8004f04:	4906      	ldr	r1, [pc, #24]	; (8004f20 <HAL_I2C_Master_Receive+0x23c>)
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fc38 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d008      	beq.n	8004f24 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e148      	b.n	80051a8 <HAL_I2C_Master_Receive+0x4c4>
 8004f16:	bf00      	nop
 8004f18:	00100002 	.word	0x00100002
 8004f1c:	ffff0000 	.word	0xffff0000
 8004f20:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004f24:	b672      	cpsid	i
}
 8004f26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f6a:	b662      	cpsie	i
}
 8004f6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fa0:	e0ee      	b.n	8005180 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	2200      	movs	r2, #0
 8004faa:	4981      	ldr	r1, [pc, #516]	; (80051b0 <HAL_I2C_Master_Receive+0x4cc>)
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fbe5 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e0f5      	b.n	80051a8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004fcc:	b672      	cpsid	i
}
 8004fce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005002:	4b6c      	ldr	r3, [pc, #432]	; (80051b4 <HAL_I2C_Master_Receive+0x4d0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	08db      	lsrs	r3, r3, #3
 8005008:	4a6b      	ldr	r2, [pc, #428]	; (80051b8 <HAL_I2C_Master_Receive+0x4d4>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	0a1a      	lsrs	r2, r3, #8
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	00da      	lsls	r2, r3, #3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	3b01      	subs	r3, #1
 8005020:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d118      	bne.n	800505a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800504a:	b662      	cpsie	i
}
 800504c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0a6      	b.n	80051a8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b04      	cmp	r3, #4
 8005066:	d1d9      	bne.n	800501c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80050aa:	b662      	cpsie	i
}
 80050ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050e0:	e04e      	b.n	8005180 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 fcf2 	bl	8005ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e058      	b.n	80051a8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b04      	cmp	r3, #4
 8005134:	d124      	bne.n	8005180 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	2b03      	cmp	r3, #3
 800513c:	d107      	bne.n	800514e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	2b00      	cmp	r3, #0
 8005186:	f47f ae88 	bne.w	8004e9a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e000      	b.n	80051a8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80051a6:	2302      	movs	r3, #2
  }
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3728      	adds	r7, #40	; 0x28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	00010004 	.word	0x00010004
 80051b4:	20000000 	.word	0x20000000
 80051b8:	14f8b589 	.word	0x14f8b589

080051bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	4608      	mov	r0, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	461a      	mov	r2, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	817b      	strh	r3, [r7, #10]
 80051ce:	460b      	mov	r3, r1
 80051d0:	813b      	strh	r3, [r7, #8]
 80051d2:	4613      	mov	r3, r2
 80051d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051d6:	f7fe fa3f 	bl	8003658 <HAL_GetTick>
 80051da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	f040 80d9 	bne.w	800539c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	2319      	movs	r3, #25
 80051f0:	2201      	movs	r2, #1
 80051f2:	496d      	ldr	r1, [pc, #436]	; (80053a8 <HAL_I2C_Mem_Write+0x1ec>)
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 fac1 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005200:	2302      	movs	r3, #2
 8005202:	e0cc      	b.n	800539e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_I2C_Mem_Write+0x56>
 800520e:	2302      	movs	r3, #2
 8005210:	e0c5      	b.n	800539e <HAL_I2C_Mem_Write+0x1e2>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b01      	cmp	r3, #1
 8005226:	d007      	beq.n	8005238 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005246:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2221      	movs	r2, #33	; 0x21
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2240      	movs	r2, #64	; 0x40
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a3a      	ldr	r2, [r7, #32]
 8005262:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005268:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a4d      	ldr	r2, [pc, #308]	; (80053ac <HAL_I2C_Mem_Write+0x1f0>)
 8005278:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800527a:	88f8      	ldrh	r0, [r7, #6]
 800527c:	893a      	ldrh	r2, [r7, #8]
 800527e:	8979      	ldrh	r1, [r7, #10]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	4603      	mov	r3, r0
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f9e0 	bl	8005650 <I2C_RequestMemoryWrite>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d052      	beq.n	800533c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e081      	b.n	800539e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fb86 	bl	80059b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00d      	beq.n	80052c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d107      	bne.n	80052c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e06b      	b.n	800539e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	781a      	ldrb	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b04      	cmp	r3, #4
 8005302:	d11b      	bne.n	800533c <HAL_I2C_Mem_Write+0x180>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005308:	2b00      	cmp	r3, #0
 800530a:	d017      	beq.n	800533c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	781a      	ldrb	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1aa      	bne.n	800529a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fb79 	bl	8005a40 <I2C_WaitOnBTFFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00d      	beq.n	8005370 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	2b04      	cmp	r3, #4
 800535a:	d107      	bne.n	800536c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e016      	b.n	800539e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800537e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	e000      	b.n	800539e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800539c:	2302      	movs	r3, #2
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	00100002 	.word	0x00100002
 80053ac:	ffff0000 	.word	0xffff0000

080053b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	460b      	mov	r3, r1
 80053be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d006      	beq.n	80053da <I2C_MasterRequestWrite+0x2a>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d003      	beq.n	80053da <I2C_MasterRequestWrite+0x2a>
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053d8:	d108      	bne.n	80053ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e00b      	b.n	8005404 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	2b12      	cmp	r3, #18
 80053f2:	d107      	bne.n	8005404 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005402:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f9b3 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00d      	beq.n	8005438 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542a:	d103      	bne.n	8005434 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e035      	b.n	80054a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005440:	d108      	bne.n	8005454 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005442:	897b      	ldrh	r3, [r7, #10]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005450:	611a      	str	r2, [r3, #16]
 8005452:	e01b      	b.n	800548c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005454:	897b      	ldrh	r3, [r7, #10]
 8005456:	11db      	asrs	r3, r3, #7
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f003 0306 	and.w	r3, r3, #6
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f063 030f 	orn	r3, r3, #15
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	490e      	ldr	r1, [pc, #56]	; (80054ac <I2C_MasterRequestWrite+0xfc>)
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f9fc 	bl	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e010      	b.n	80054a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005482:	897b      	ldrh	r3, [r7, #10]
 8005484:	b2da      	uxtb	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	4907      	ldr	r1, [pc, #28]	; (80054b0 <I2C_MasterRequestWrite+0x100>)
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 f9ec 	bl	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	00010008 	.word	0x00010008
 80054b0:	00010002 	.word	0x00010002

080054b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	460b      	mov	r3, r1
 80054c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d006      	beq.n	80054ee <I2C_MasterRequestRead+0x3a>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d003      	beq.n	80054ee <I2C_MasterRequestRead+0x3a>
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054ec:	d108      	bne.n	8005500 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e00b      	b.n	8005518 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	2b11      	cmp	r3, #17
 8005506:	d107      	bne.n	8005518 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f929 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553e:	d103      	bne.n	8005548 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e079      	b.n	8005640 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005554:	d108      	bne.n	8005568 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005556:	897b      	ldrh	r3, [r7, #10]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	611a      	str	r2, [r3, #16]
 8005566:	e05f      	b.n	8005628 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005568:	897b      	ldrh	r3, [r7, #10]
 800556a:	11db      	asrs	r3, r3, #7
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f003 0306 	and.w	r3, r3, #6
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f063 030f 	orn	r3, r3, #15
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4930      	ldr	r1, [pc, #192]	; (8005648 <I2C_MasterRequestRead+0x194>)
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f972 	bl	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e054      	b.n	8005640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005596:	897b      	ldrh	r3, [r7, #10]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4929      	ldr	r1, [pc, #164]	; (800564c <I2C_MasterRequestRead+0x198>)
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 f962 	bl	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e044      	b.n	8005640 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f8c7 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00d      	beq.n	8005610 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005602:	d103      	bne.n	800560c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e017      	b.n	8005640 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005610:	897b      	ldrh	r3, [r7, #10]
 8005612:	11db      	asrs	r3, r3, #7
 8005614:	b2db      	uxtb	r3, r3
 8005616:	f003 0306 	and.w	r3, r3, #6
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f063 030e 	orn	r3, r3, #14
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	4907      	ldr	r1, [pc, #28]	; (800564c <I2C_MasterRequestRead+0x198>)
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f91e 	bl	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	00010008 	.word	0x00010008
 800564c:	00010002 	.word	0x00010002

08005650 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	461a      	mov	r2, r3
 800565e:	4603      	mov	r3, r0
 8005660:	817b      	strh	r3, [r7, #10]
 8005662:	460b      	mov	r3, r1
 8005664:	813b      	strh	r3, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005678:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	2200      	movs	r2, #0
 8005682:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f878 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a0:	d103      	bne.n	80056aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e05f      	b.n	800576e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056ae:	897b      	ldrh	r3, [r7, #10]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	6a3a      	ldr	r2, [r7, #32]
 80056c2:	492d      	ldr	r1, [pc, #180]	; (8005778 <I2C_RequestMemoryWrite+0x128>)
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f8d3 	bl	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e04c      	b.n	800576e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ec:	6a39      	ldr	r1, [r7, #32]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f95e 	bl	80059b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00d      	beq.n	8005716 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d107      	bne.n	8005712 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005710:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e02b      	b.n	800576e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d105      	bne.n	8005728 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800571c:	893b      	ldrh	r3, [r7, #8]
 800571e:	b2da      	uxtb	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	611a      	str	r2, [r3, #16]
 8005726:	e021      	b.n	800576c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005728:	893b      	ldrh	r3, [r7, #8]
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	b29b      	uxth	r3, r3
 800572e:	b2da      	uxtb	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005738:	6a39      	ldr	r1, [r7, #32]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f938 	bl	80059b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00d      	beq.n	8005762 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	2b04      	cmp	r3, #4
 800574c:	d107      	bne.n	800575e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800575c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e005      	b.n	800576e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005762:	893b      	ldrh	r3, [r7, #8]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	00010002 	.word	0x00010002

0800577c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800578c:	e048      	b.n	8005820 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d044      	beq.n	8005820 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005796:	f7fd ff5f 	bl	8003658 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d302      	bcc.n	80057ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d139      	bne.n	8005820 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	0c1b      	lsrs	r3, r3, #16
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10d      	bne.n	80057d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	43da      	mvns	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4013      	ands	r3, r2
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	e00c      	b.n	80057ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	43da      	mvns	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	4013      	ands	r3, r2
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bf0c      	ite	eq
 80057e4:	2301      	moveq	r3, #1
 80057e6:	2300      	movne	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d116      	bne.n	8005820 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f043 0220 	orr.w	r2, r3, #32
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e023      	b.n	8005868 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	0c1b      	lsrs	r3, r3, #16
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b01      	cmp	r3, #1
 8005828:	d10d      	bne.n	8005846 <I2C_WaitOnFlagUntilTimeout+0xca>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	43da      	mvns	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4013      	ands	r3, r2
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	bf0c      	ite	eq
 800583c:	2301      	moveq	r3, #1
 800583e:	2300      	movne	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	e00c      	b.n	8005860 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	43da      	mvns	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4013      	ands	r3, r2
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	429a      	cmp	r2, r3
 8005864:	d093      	beq.n	800578e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800587e:	e071      	b.n	8005964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800588a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588e:	d123      	bne.n	80058d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800589e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	f043 0204 	orr.w	r2, r3, #4
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e067      	b.n	80059a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d041      	beq.n	8005964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e0:	f7fd feba 	bl	8003658 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d302      	bcc.n	80058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d136      	bne.n	8005964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	0c1b      	lsrs	r3, r3, #16
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d10c      	bne.n	800591a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	43da      	mvns	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4013      	ands	r3, r2
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	bf14      	ite	ne
 8005912:	2301      	movne	r3, #1
 8005914:	2300      	moveq	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	e00b      	b.n	8005932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	43da      	mvns	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4013      	ands	r3, r2
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	bf14      	ite	ne
 800592c:	2301      	movne	r3, #1
 800592e:	2300      	moveq	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d016      	beq.n	8005964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e021      	b.n	80059a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	0c1b      	lsrs	r3, r3, #16
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b01      	cmp	r3, #1
 800596c:	d10c      	bne.n	8005988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	43da      	mvns	r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	4013      	ands	r3, r2
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	e00b      	b.n	80059a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	43da      	mvns	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4013      	ands	r3, r2
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf14      	ite	ne
 800599a:	2301      	movne	r3, #1
 800599c:	2300      	moveq	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f47f af6d 	bne.w	8005880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059bc:	e034      	b.n	8005a28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f8e3 	bl	8005b8a <I2C_IsAcknowledgeFailed>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e034      	b.n	8005a38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d4:	d028      	beq.n	8005a28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d6:	f7fd fe3f 	bl	8003658 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d302      	bcc.n	80059ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d11d      	bne.n	8005a28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d016      	beq.n	8005a28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e007      	b.n	8005a38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a32:	2b80      	cmp	r3, #128	; 0x80
 8005a34:	d1c3      	bne.n	80059be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a4c:	e034      	b.n	8005ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f89b 	bl	8005b8a <I2C_IsAcknowledgeFailed>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e034      	b.n	8005ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d028      	beq.n	8005ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a66:	f7fd fdf7 	bl	8003658 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d302      	bcc.n	8005a7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11d      	bne.n	8005ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d016      	beq.n	8005ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	f043 0220 	orr.w	r2, r3, #32
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e007      	b.n	8005ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d1c3      	bne.n	8005a4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005adc:	e049      	b.n	8005b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d119      	bne.n	8005b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0210 	mvn.w	r2, #16
 8005af4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e030      	b.n	8005b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b20:	f7fd fd9a 	bl	8003658 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d302      	bcc.n	8005b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d11d      	bne.n	8005b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d016      	beq.n	8005b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	f043 0220 	orr.w	r2, r3, #32
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e007      	b.n	8005b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7c:	2b40      	cmp	r3, #64	; 0x40
 8005b7e:	d1ae      	bne.n	8005ade <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba0:	d11b      	bne.n	8005bda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005baa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f043 0204 	orr.w	r2, r3, #4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr
	...

08005be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e272      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8087 	beq.w	8005d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c08:	4b92      	ldr	r3, [pc, #584]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f003 030c 	and.w	r3, r3, #12
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d00c      	beq.n	8005c2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c14:	4b8f      	ldr	r3, [pc, #572]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 030c 	and.w	r3, r3, #12
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d112      	bne.n	8005c46 <HAL_RCC_OscConfig+0x5e>
 8005c20:	4b8c      	ldr	r3, [pc, #560]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2c:	d10b      	bne.n	8005c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c2e:	4b89      	ldr	r3, [pc, #548]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d06c      	beq.n	8005d14 <HAL_RCC_OscConfig+0x12c>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d168      	bne.n	8005d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e24c      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCC_OscConfig+0x76>
 8005c50:	4b80      	ldr	r3, [pc, #512]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a7f      	ldr	r2, [pc, #508]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	e02e      	b.n	8005cbc <HAL_RCC_OscConfig+0xd4>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10c      	bne.n	8005c80 <HAL_RCC_OscConfig+0x98>
 8005c66:	4b7b      	ldr	r3, [pc, #492]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a7a      	ldr	r2, [pc, #488]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	4b78      	ldr	r3, [pc, #480]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a77      	ldr	r2, [pc, #476]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e01d      	b.n	8005cbc <HAL_RCC_OscConfig+0xd4>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c88:	d10c      	bne.n	8005ca4 <HAL_RCC_OscConfig+0xbc>
 8005c8a:	4b72      	ldr	r3, [pc, #456]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a71      	ldr	r2, [pc, #452]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	4b6f      	ldr	r3, [pc, #444]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a6e      	ldr	r2, [pc, #440]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e00b      	b.n	8005cbc <HAL_RCC_OscConfig+0xd4>
 8005ca4:	4b6b      	ldr	r3, [pc, #428]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a6a      	ldr	r2, [pc, #424]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b68      	ldr	r3, [pc, #416]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a67      	ldr	r2, [pc, #412]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d013      	beq.n	8005cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc4:	f7fd fcc8 	bl	8003658 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ccc:	f7fd fcc4 	bl	8003658 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	; 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e200      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cde:	4b5d      	ldr	r3, [pc, #372]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0xe4>
 8005cea:	e014      	b.n	8005d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cec:	f7fd fcb4 	bl	8003658 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf4:	f7fd fcb0 	bl	8003658 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b64      	cmp	r3, #100	; 0x64
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e1ec      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d06:	4b53      	ldr	r3, [pc, #332]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x10c>
 8005d12:	e000      	b.n	8005d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d063      	beq.n	8005dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d22:	4b4c      	ldr	r3, [pc, #304]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f003 030c 	and.w	r3, r3, #12
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00b      	beq.n	8005d46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d2e:	4b49      	ldr	r3, [pc, #292]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d11c      	bne.n	8005d74 <HAL_RCC_OscConfig+0x18c>
 8005d3a:	4b46      	ldr	r3, [pc, #280]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d116      	bne.n	8005d74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d46:	4b43      	ldr	r3, [pc, #268]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <HAL_RCC_OscConfig+0x176>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d001      	beq.n	8005d5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e1c0      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d5e:	4b3d      	ldr	r3, [pc, #244]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4939      	ldr	r1, [pc, #228]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d72:	e03a      	b.n	8005dea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d020      	beq.n	8005dbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d7c:	4b36      	ldr	r3, [pc, #216]	; (8005e58 <HAL_RCC_OscConfig+0x270>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d82:	f7fd fc69 	bl	8003658 <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d88:	e008      	b.n	8005d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d8a:	f7fd fc65 	bl	8003658 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e1a1      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d9c:	4b2d      	ldr	r3, [pc, #180]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0f0      	beq.n	8005d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da8:	4b2a      	ldr	r3, [pc, #168]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4927      	ldr	r1, [pc, #156]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	600b      	str	r3, [r1, #0]
 8005dbc:	e015      	b.n	8005dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dbe:	4b26      	ldr	r3, [pc, #152]	; (8005e58 <HAL_RCC_OscConfig+0x270>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc4:	f7fd fc48 	bl	8003658 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dcc:	f7fd fc44 	bl	8003658 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e180      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dde:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f0      	bne.n	8005dcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d03a      	beq.n	8005e6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d019      	beq.n	8005e32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dfe:	4b17      	ldr	r3, [pc, #92]	; (8005e5c <HAL_RCC_OscConfig+0x274>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e04:	f7fd fc28 	bl	8003658 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e0c:	f7fd fc24 	bl	8003658 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e160      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <HAL_RCC_OscConfig+0x26c>)
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f0      	beq.n	8005e0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	f000 fafe 	bl	800642c <RCC_Delay>
 8005e30:	e01c      	b.n	8005e6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e32:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <HAL_RCC_OscConfig+0x274>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e38:	f7fd fc0e 	bl	8003658 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e3e:	e00f      	b.n	8005e60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e40:	f7fd fc0a 	bl	8003658 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d908      	bls.n	8005e60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e146      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
 8005e52:	bf00      	nop
 8005e54:	40021000 	.word	0x40021000
 8005e58:	42420000 	.word	0x42420000
 8005e5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e60:	4b92      	ldr	r3, [pc, #584]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e9      	bne.n	8005e40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80a6 	beq.w	8005fc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7e:	4b8b      	ldr	r3, [pc, #556]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10d      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e8a:	4b88      	ldr	r3, [pc, #544]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	4a87      	ldr	r2, [pc, #540]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e94:	61d3      	str	r3, [r2, #28]
 8005e96:	4b85      	ldr	r3, [pc, #532]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	60bb      	str	r3, [r7, #8]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea6:	4b82      	ldr	r3, [pc, #520]	; (80060b0 <HAL_RCC_OscConfig+0x4c8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d118      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eb2:	4b7f      	ldr	r3, [pc, #508]	; (80060b0 <HAL_RCC_OscConfig+0x4c8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a7e      	ldr	r2, [pc, #504]	; (80060b0 <HAL_RCC_OscConfig+0x4c8>)
 8005eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ebe:	f7fd fbcb 	bl	8003658 <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec6:	f7fd fbc7 	bl	8003658 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b64      	cmp	r3, #100	; 0x64
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e103      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed8:	4b75      	ldr	r3, [pc, #468]	; (80060b0 <HAL_RCC_OscConfig+0x4c8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f0      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d106      	bne.n	8005efa <HAL_RCC_OscConfig+0x312>
 8005eec:	4b6f      	ldr	r3, [pc, #444]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	4a6e      	ldr	r2, [pc, #440]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005ef2:	f043 0301 	orr.w	r3, r3, #1
 8005ef6:	6213      	str	r3, [r2, #32]
 8005ef8:	e02d      	b.n	8005f56 <HAL_RCC_OscConfig+0x36e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10c      	bne.n	8005f1c <HAL_RCC_OscConfig+0x334>
 8005f02:	4b6a      	ldr	r3, [pc, #424]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	4a69      	ldr	r2, [pc, #420]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	6213      	str	r3, [r2, #32]
 8005f0e:	4b67      	ldr	r3, [pc, #412]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	4a66      	ldr	r2, [pc, #408]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f14:	f023 0304 	bic.w	r3, r3, #4
 8005f18:	6213      	str	r3, [r2, #32]
 8005f1a:	e01c      	b.n	8005f56 <HAL_RCC_OscConfig+0x36e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	2b05      	cmp	r3, #5
 8005f22:	d10c      	bne.n	8005f3e <HAL_RCC_OscConfig+0x356>
 8005f24:	4b61      	ldr	r3, [pc, #388]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	4a60      	ldr	r2, [pc, #384]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f2a:	f043 0304 	orr.w	r3, r3, #4
 8005f2e:	6213      	str	r3, [r2, #32]
 8005f30:	4b5e      	ldr	r3, [pc, #376]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	4a5d      	ldr	r2, [pc, #372]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	6213      	str	r3, [r2, #32]
 8005f3c:	e00b      	b.n	8005f56 <HAL_RCC_OscConfig+0x36e>
 8005f3e:	4b5b      	ldr	r3, [pc, #364]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	4a5a      	ldr	r2, [pc, #360]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f44:	f023 0301 	bic.w	r3, r3, #1
 8005f48:	6213      	str	r3, [r2, #32]
 8005f4a:	4b58      	ldr	r3, [pc, #352]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	4a57      	ldr	r2, [pc, #348]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f50:	f023 0304 	bic.w	r3, r3, #4
 8005f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d015      	beq.n	8005f8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f5e:	f7fd fb7b 	bl	8003658 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f64:	e00a      	b.n	8005f7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f66:	f7fd fb77 	bl	8003658 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e0b1      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7c:	4b4b      	ldr	r3, [pc, #300]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0ee      	beq.n	8005f66 <HAL_RCC_OscConfig+0x37e>
 8005f88:	e014      	b.n	8005fb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f8a:	f7fd fb65 	bl	8003658 <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f90:	e00a      	b.n	8005fa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f92:	f7fd fb61 	bl	8003658 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e09b      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa8:	4b40      	ldr	r3, [pc, #256]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1ee      	bne.n	8005f92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d105      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fba:	4b3c      	ldr	r3, [pc, #240]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	4a3b      	ldr	r2, [pc, #236]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8087 	beq.w	80060de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fd0:	4b36      	ldr	r3, [pc, #216]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f003 030c 	and.w	r3, r3, #12
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d061      	beq.n	80060a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d146      	bne.n	8006072 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe4:	4b33      	ldr	r3, [pc, #204]	; (80060b4 <HAL_RCC_OscConfig+0x4cc>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fea:	f7fd fb35 	bl	8003658 <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff2:	f7fd fb31 	bl	8003658 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e06d      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006004:	4b29      	ldr	r3, [pc, #164]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f0      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006018:	d108      	bne.n	800602c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800601a:	4b24      	ldr	r3, [pc, #144]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	4921      	ldr	r1, [pc, #132]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8006028:	4313      	orrs	r3, r2
 800602a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800602c:	4b1f      	ldr	r3, [pc, #124]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a19      	ldr	r1, [r3, #32]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	430b      	orrs	r3, r1
 800603e:	491b      	ldr	r1, [pc, #108]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8006040:	4313      	orrs	r3, r2
 8006042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006044:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <HAL_RCC_OscConfig+0x4cc>)
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604a:	f7fd fb05 	bl	8003658 <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006050:	e008      	b.n	8006064 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006052:	f7fd fb01 	bl	8003658 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e03d      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006064:	4b11      	ldr	r3, [pc, #68]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f0      	beq.n	8006052 <HAL_RCC_OscConfig+0x46a>
 8006070:	e035      	b.n	80060de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <HAL_RCC_OscConfig+0x4cc>)
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006078:	f7fd faee 	bl	8003658 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006080:	f7fd faea 	bl	8003658 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e026      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <HAL_RCC_OscConfig+0x4c4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCC_OscConfig+0x498>
 800609e:	e01e      	b.n	80060de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d107      	bne.n	80060b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e019      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
 80060ac:	40021000 	.word	0x40021000
 80060b0:	40007000 	.word	0x40007000
 80060b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060b8:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <HAL_RCC_OscConfig+0x500>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d106      	bne.n	80060da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d001      	beq.n	80060de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40021000 	.word	0x40021000

080060ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e0d0      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006100:	4b6a      	ldr	r3, [pc, #424]	; (80062ac <HAL_RCC_ClockConfig+0x1c0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d910      	bls.n	8006130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800610e:	4b67      	ldr	r3, [pc, #412]	; (80062ac <HAL_RCC_ClockConfig+0x1c0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f023 0207 	bic.w	r2, r3, #7
 8006116:	4965      	ldr	r1, [pc, #404]	; (80062ac <HAL_RCC_ClockConfig+0x1c0>)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	4313      	orrs	r3, r2
 800611c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800611e:	4b63      	ldr	r3, [pc, #396]	; (80062ac <HAL_RCC_ClockConfig+0x1c0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d001      	beq.n	8006130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e0b8      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d020      	beq.n	800617e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006148:	4b59      	ldr	r3, [pc, #356]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	4a58      	ldr	r2, [pc, #352]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 800614e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006160:	4b53      	ldr	r3, [pc, #332]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4a52      	ldr	r2, [pc, #328]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006166:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800616a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800616c:	4b50      	ldr	r3, [pc, #320]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	494d      	ldr	r1, [pc, #308]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 800617a:	4313      	orrs	r3, r2
 800617c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d040      	beq.n	800620c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d107      	bne.n	80061a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006192:	4b47      	ldr	r3, [pc, #284]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d115      	bne.n	80061ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e07f      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d107      	bne.n	80061ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061aa:	4b41      	ldr	r3, [pc, #260]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e073      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ba:	4b3d      	ldr	r3, [pc, #244]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e06b      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061ca:	4b39      	ldr	r3, [pc, #228]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f023 0203 	bic.w	r2, r3, #3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	4936      	ldr	r1, [pc, #216]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061dc:	f7fd fa3c 	bl	8003658 <HAL_GetTick>
 80061e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e2:	e00a      	b.n	80061fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e4:	f7fd fa38 	bl	8003658 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e053      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fa:	4b2d      	ldr	r3, [pc, #180]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f003 020c 	and.w	r2, r3, #12
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	429a      	cmp	r2, r3
 800620a:	d1eb      	bne.n	80061e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800620c:	4b27      	ldr	r3, [pc, #156]	; (80062ac <HAL_RCC_ClockConfig+0x1c0>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d210      	bcs.n	800623c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621a:	4b24      	ldr	r3, [pc, #144]	; (80062ac <HAL_RCC_ClockConfig+0x1c0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f023 0207 	bic.w	r2, r3, #7
 8006222:	4922      	ldr	r1, [pc, #136]	; (80062ac <HAL_RCC_ClockConfig+0x1c0>)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	4313      	orrs	r3, r2
 8006228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800622a:	4b20      	ldr	r3, [pc, #128]	; (80062ac <HAL_RCC_ClockConfig+0x1c0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d001      	beq.n	800623c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e032      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006248:	4b19      	ldr	r3, [pc, #100]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4916      	ldr	r1, [pc, #88]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006256:	4313      	orrs	r3, r2
 8006258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006266:	4b12      	ldr	r3, [pc, #72]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	490e      	ldr	r1, [pc, #56]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006276:	4313      	orrs	r3, r2
 8006278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800627a:	f000 f821 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 800627e:	4602      	mov	r2, r0
 8006280:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	091b      	lsrs	r3, r3, #4
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	490a      	ldr	r1, [pc, #40]	; (80062b4 <HAL_RCC_ClockConfig+0x1c8>)
 800628c:	5ccb      	ldrb	r3, [r1, r3]
 800628e:	fa22 f303 	lsr.w	r3, r2, r3
 8006292:	4a09      	ldr	r2, [pc, #36]	; (80062b8 <HAL_RCC_ClockConfig+0x1cc>)
 8006294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006296:	4b09      	ldr	r3, [pc, #36]	; (80062bc <HAL_RCC_ClockConfig+0x1d0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f7fc ffa8 	bl	80031f0 <HAL_InitTick>

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40022000 	.word	0x40022000
 80062b0:	40021000 	.word	0x40021000
 80062b4:	0800e060 	.word	0x0800e060
 80062b8:	20000000 	.word	0x20000000
 80062bc:	20000004 	.word	0x20000004

080062c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	2300      	movs	r3, #0
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	2300      	movs	r3, #0
 80062d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80062da:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <HAL_RCC_GetSysClockFreq+0x94>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f003 030c 	and.w	r3, r3, #12
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d002      	beq.n	80062f0 <HAL_RCC_GetSysClockFreq+0x30>
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d003      	beq.n	80062f6 <HAL_RCC_GetSysClockFreq+0x36>
 80062ee:	e027      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80062f0:	4b19      	ldr	r3, [pc, #100]	; (8006358 <HAL_RCC_GetSysClockFreq+0x98>)
 80062f2:	613b      	str	r3, [r7, #16]
      break;
 80062f4:	e027      	b.n	8006346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	0c9b      	lsrs	r3, r3, #18
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	4a17      	ldr	r2, [pc, #92]	; (800635c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006300:	5cd3      	ldrb	r3, [r2, r3]
 8006302:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d010      	beq.n	8006330 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800630e:	4b11      	ldr	r3, [pc, #68]	; (8006354 <HAL_RCC_GetSysClockFreq+0x94>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	0c5b      	lsrs	r3, r3, #17
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	4a11      	ldr	r2, [pc, #68]	; (8006360 <HAL_RCC_GetSysClockFreq+0xa0>)
 800631a:	5cd3      	ldrb	r3, [r2, r3]
 800631c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a0d      	ldr	r2, [pc, #52]	; (8006358 <HAL_RCC_GetSysClockFreq+0x98>)
 8006322:	fb03 f202 	mul.w	r2, r3, r2
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	fbb2 f3f3 	udiv	r3, r2, r3
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	e004      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a0c      	ldr	r2, [pc, #48]	; (8006364 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006334:	fb02 f303 	mul.w	r3, r2, r3
 8006338:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	613b      	str	r3, [r7, #16]
      break;
 800633e:	e002      	b.n	8006346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006340:	4b05      	ldr	r3, [pc, #20]	; (8006358 <HAL_RCC_GetSysClockFreq+0x98>)
 8006342:	613b      	str	r3, [r7, #16]
      break;
 8006344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006346:	693b      	ldr	r3, [r7, #16]
}
 8006348:	4618      	mov	r0, r3
 800634a:	371c      	adds	r7, #28
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40021000 	.word	0x40021000
 8006358:	007a1200 	.word	0x007a1200
 800635c:	0800e078 	.word	0x0800e078
 8006360:	0800e088 	.word	0x0800e088
 8006364:	003d0900 	.word	0x003d0900

08006368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800636c:	4b02      	ldr	r3, [pc, #8]	; (8006378 <HAL_RCC_GetHCLKFreq+0x10>)
 800636e:	681b      	ldr	r3, [r3, #0]
}
 8006370:	4618      	mov	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr
 8006378:	20000000 	.word	0x20000000

0800637c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006380:	f7ff fff2 	bl	8006368 <HAL_RCC_GetHCLKFreq>
 8006384:	4602      	mov	r2, r0
 8006386:	4b05      	ldr	r3, [pc, #20]	; (800639c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	0a1b      	lsrs	r3, r3, #8
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	4903      	ldr	r1, [pc, #12]	; (80063a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006392:	5ccb      	ldrb	r3, [r1, r3]
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006398:	4618      	mov	r0, r3
 800639a:	bd80      	pop	{r7, pc}
 800639c:	40021000 	.word	0x40021000
 80063a0:	0800e070 	.word	0x0800e070

080063a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063a8:	f7ff ffde 	bl	8006368 <HAL_RCC_GetHCLKFreq>
 80063ac:	4602      	mov	r2, r0
 80063ae:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	0adb      	lsrs	r3, r3, #11
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	4903      	ldr	r1, [pc, #12]	; (80063c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063ba:	5ccb      	ldrb	r3, [r1, r3]
 80063bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	40021000 	.word	0x40021000
 80063c8:	0800e070 	.word	0x0800e070

080063cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	220f      	movs	r2, #15
 80063da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063dc:	4b11      	ldr	r3, [pc, #68]	; (8006424 <HAL_RCC_GetClockConfig+0x58>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 0203 	and.w	r2, r3, #3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063e8:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <HAL_RCC_GetClockConfig+0x58>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <HAL_RCC_GetClockConfig+0x58>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006400:	4b08      	ldr	r3, [pc, #32]	; (8006424 <HAL_RCC_GetClockConfig+0x58>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	08db      	lsrs	r3, r3, #3
 8006406:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <HAL_RCC_GetClockConfig+0x5c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0207 	and.w	r2, r3, #7
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	bc80      	pop	{r7}
 8006422:	4770      	bx	lr
 8006424:	40021000 	.word	0x40021000
 8006428:	40022000 	.word	0x40022000

0800642c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <RCC_Delay+0x34>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a0a      	ldr	r2, [pc, #40]	; (8006464 <RCC_Delay+0x38>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	0a5b      	lsrs	r3, r3, #9
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	fb02 f303 	mul.w	r3, r2, r3
 8006446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006448:	bf00      	nop
  }
  while (Delay --);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1e5a      	subs	r2, r3, #1
 800644e:	60fa      	str	r2, [r7, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f9      	bne.n	8006448 <RCC_Delay+0x1c>
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr
 8006460:	20000000 	.word	0x20000000
 8006464:	10624dd3 	.word	0x10624dd3

08006468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e041      	b.n	80064fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f839 	bl	8006506 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4619      	mov	r1, r3
 80064a6:	4610      	mov	r0, r2
 80064a8:	f000 f9b4 	bl	8006814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr

08006518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b01      	cmp	r3, #1
 800652a:	d001      	beq.n	8006530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e03a      	b.n	80065a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0201 	orr.w	r2, r2, #1
 8006546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <HAL_TIM_Base_Start_IT+0x98>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x58>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655a:	d009      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x58>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a14      	ldr	r2, [pc, #80]	; (80065b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_TIM_Base_Start_IT+0x58>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d111      	bne.n	8006594 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b06      	cmp	r3, #6
 8006580:	d010      	beq.n	80065a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f042 0201 	orr.w	r2, r2, #1
 8006590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006592:	e007      	b.n	80065a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40000400 	.word	0x40000400
 80065b8:	40000800 	.word	0x40000800

080065bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d122      	bne.n	8006618 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d11b      	bne.n	8006618 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0202 	mvn.w	r2, #2
 80065e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f8ed 	bl	80067de <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f8e0 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f8ef 	bl	80067f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b04      	cmp	r3, #4
 8006624:	d122      	bne.n	800666c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b04      	cmp	r3, #4
 8006632:	d11b      	bne.n	800666c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0204 	mvn.w	r2, #4
 800663c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2202      	movs	r2, #2
 8006642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8c3 	bl	80067de <HAL_TIM_IC_CaptureCallback>
 8006658:	e005      	b.n	8006666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f8b6 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f8c5 	bl	80067f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b08      	cmp	r3, #8
 8006678:	d122      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b08      	cmp	r3, #8
 8006686:	d11b      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0208 	mvn.w	r2, #8
 8006690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2204      	movs	r2, #4
 8006696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f899 	bl	80067de <HAL_TIM_IC_CaptureCallback>
 80066ac:	e005      	b.n	80066ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f88c 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f89b 	bl	80067f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0310 	and.w	r3, r3, #16
 80066ca:	2b10      	cmp	r3, #16
 80066cc:	d122      	bne.n	8006714 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b10      	cmp	r3, #16
 80066da:	d11b      	bne.n	8006714 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0210 	mvn.w	r2, #16
 80066e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2208      	movs	r2, #8
 80066ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f86f 	bl	80067de <HAL_TIM_IC_CaptureCallback>
 8006700:	e005      	b.n	800670e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f862 	bl	80067cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f871 	bl	80067f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b01      	cmp	r3, #1
 8006720:	d10e      	bne.n	8006740 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b01      	cmp	r3, #1
 800672e:	d107      	bne.n	8006740 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f06f 0201 	mvn.w	r2, #1
 8006738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fc fd08 	bl	8003150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674a:	2b80      	cmp	r3, #128	; 0x80
 800674c:	d10e      	bne.n	800676c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006758:	2b80      	cmp	r3, #128	; 0x80
 800675a:	d107      	bne.n	800676c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f8bf 	bl	80068ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d10e      	bne.n	8006798 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	d107      	bne.n	8006798 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f835 	bl	8006802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d10e      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0320 	and.w	r3, r3, #32
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	d107      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0220 	mvn.w	r2, #32
 80067bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f88a 	bl	80068d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr

080067de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr

080067f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr

08006802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr

08006814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a29      	ldr	r2, [pc, #164]	; (80068cc <TIM_Base_SetConfig+0xb8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00b      	beq.n	8006844 <TIM_Base_SetConfig+0x30>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006832:	d007      	beq.n	8006844 <TIM_Base_SetConfig+0x30>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a26      	ldr	r2, [pc, #152]	; (80068d0 <TIM_Base_SetConfig+0xbc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_Base_SetConfig+0x30>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a25      	ldr	r2, [pc, #148]	; (80068d4 <TIM_Base_SetConfig+0xc0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d108      	bne.n	8006856 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a1c      	ldr	r2, [pc, #112]	; (80068cc <TIM_Base_SetConfig+0xb8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00b      	beq.n	8006876 <TIM_Base_SetConfig+0x62>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006864:	d007      	beq.n	8006876 <TIM_Base_SetConfig+0x62>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a19      	ldr	r2, [pc, #100]	; (80068d0 <TIM_Base_SetConfig+0xbc>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d003      	beq.n	8006876 <TIM_Base_SetConfig+0x62>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a18      	ldr	r2, [pc, #96]	; (80068d4 <TIM_Base_SetConfig+0xc0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d108      	bne.n	8006888 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800687c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a07      	ldr	r2, [pc, #28]	; (80068cc <TIM_Base_SetConfig+0xb8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d103      	bne.n	80068bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	615a      	str	r2, [r3, #20]
}
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr
 80068cc:	40012c00 	.word	0x40012c00
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800

080068d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr

080068ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr

080068fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e042      	b.n	8006994 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fc fdea 	bl	80034fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2224      	movs	r2, #36	; 0x24
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800693e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f91d 	bl	8006b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	695a      	ldr	r2, [r3, #20]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d16d      	bne.n	8006a98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <HAL_UART_Transmit+0x2c>
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e066      	b.n	8006a9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2221      	movs	r2, #33	; 0x21
 80069d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069da:	f7fc fe3d 	bl	8003658 <HAL_GetTick>
 80069de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	88fa      	ldrh	r2, [r7, #6]
 80069e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	88fa      	ldrh	r2, [r7, #6]
 80069ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f4:	d108      	bne.n	8006a08 <HAL_UART_Transmit+0x6c>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d104      	bne.n	8006a08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	e003      	b.n	8006a10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a10:	e02a      	b.n	8006a68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2180      	movs	r1, #128	; 0x80
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 f840 	bl	8006aa2 <UART_WaitOnFlagUntilTimeout>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e036      	b.n	8006a9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10b      	bne.n	8006a4a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	3302      	adds	r3, #2
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	e007      	b.n	8006a5a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	781a      	ldrb	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	3301      	adds	r3, #1
 8006a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1cf      	bne.n	8006a12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2140      	movs	r1, #64	; 0x40
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f810 	bl	8006aa2 <UART_WaitOnFlagUntilTimeout>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e006      	b.n	8006a9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	e000      	b.n	8006a9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006a98:	2302      	movs	r3, #2
  }
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3720      	adds	r7, #32
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b090      	sub	sp, #64	; 0x40
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab2:	e050      	b.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d04c      	beq.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ac2:	f7fc fdc9 	bl	8003658 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d241      	bcs.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	330c      	adds	r3, #12
 8006af0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006af2:	637a      	str	r2, [r7, #52]	; 0x34
 8006af4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e5      	bne.n	8006ad2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	613b      	str	r3, [r7, #16]
   return(result);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3314      	adds	r3, #20
 8006b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b26:	623a      	str	r2, [r7, #32]
 8006b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	69f9      	ldr	r1, [r7, #28]
 8006b2c:	6a3a      	ldr	r2, [r7, #32]
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e5      	bne.n	8006b06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e00f      	b.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	bf0c      	ite	eq
 8006b66:	2301      	moveq	r3, #1
 8006b68:	2300      	movne	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	79fb      	ldrb	r3, [r7, #7]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d09f      	beq.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3740      	adds	r7, #64	; 0x40
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006bba:	f023 030c 	bic.w	r3, r3, #12
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a2c      	ldr	r2, [pc, #176]	; (8006c94 <UART_SetConfig+0x114>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d103      	bne.n	8006bf0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006be8:	f7ff fbdc 	bl	80063a4 <HAL_RCC_GetPCLK2Freq>
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	e002      	b.n	8006bf6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006bf0:	f7ff fbc4 	bl	800637c <HAL_RCC_GetPCLK1Freq>
 8006bf4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009a      	lsls	r2, r3, #2
 8006c00:	441a      	add	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0c:	4a22      	ldr	r2, [pc, #136]	; (8006c98 <UART_SetConfig+0x118>)
 8006c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	0119      	lsls	r1, r3, #4
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009a      	lsls	r2, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c2c:	4b1a      	ldr	r3, [pc, #104]	; (8006c98 <UART_SetConfig+0x118>)
 8006c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	2064      	movs	r0, #100	; 0x64
 8006c36:	fb00 f303 	mul.w	r3, r0, r3
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	3332      	adds	r3, #50	; 0x32
 8006c40:	4a15      	ldr	r2, [pc, #84]	; (8006c98 <UART_SetConfig+0x118>)
 8006c42:	fba2 2303 	umull	r2, r3, r2, r3
 8006c46:	095b      	lsrs	r3, r3, #5
 8006c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c4c:	4419      	add	r1, r3
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	009a      	lsls	r2, r3, #2
 8006c58:	441a      	add	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c64:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <UART_SetConfig+0x118>)
 8006c66:	fba3 0302 	umull	r0, r3, r3, r2
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	2064      	movs	r0, #100	; 0x64
 8006c6e:	fb00 f303 	mul.w	r3, r0, r3
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	3332      	adds	r3, #50	; 0x32
 8006c78:	4a07      	ldr	r2, [pc, #28]	; (8006c98 <UART_SetConfig+0x118>)
 8006c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7e:	095b      	lsrs	r3, r3, #5
 8006c80:	f003 020f 	and.w	r2, r3, #15
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	440a      	add	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40013800 	.word	0x40013800
 8006c98:	51eb851f 	.word	0x51eb851f

08006c9c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ca2:	f3ef 8305 	mrs	r3, IPSR
 8006ca6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10f      	bne.n	8006cce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cae:	f3ef 8310 	mrs	r3, PRIMASK
 8006cb2:	607b      	str	r3, [r7, #4]
  return(result);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <osKernelInitialize+0x32>
 8006cba:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <osKernelInitialize+0x60>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d109      	bne.n	8006cd6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cc6:	603b      	str	r3, [r7, #0]
  return(result);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006cce:	f06f 0305 	mvn.w	r3, #5
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e00c      	b.n	8006cf0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006cd6:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <osKernelInitialize+0x60>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d105      	bne.n	8006cea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006cde:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <osKernelInitialize+0x60>)
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e002      	b.n	8006cf0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006cea:	f04f 33ff 	mov.w	r3, #4294967295
 8006cee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr
 8006cfc:	20000400 	.word	0x20000400

08006d00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d06:	f3ef 8305 	mrs	r3, IPSR
 8006d0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10f      	bne.n	8006d32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d12:	f3ef 8310 	mrs	r3, PRIMASK
 8006d16:	607b      	str	r3, [r7, #4]
  return(result);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d109      	bne.n	8006d32 <osKernelStart+0x32>
 8006d1e:	4b11      	ldr	r3, [pc, #68]	; (8006d64 <osKernelStart+0x64>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d109      	bne.n	8006d3a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d26:	f3ef 8311 	mrs	r3, BASEPRI
 8006d2a:	603b      	str	r3, [r7, #0]
  return(result);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006d32:	f06f 0305 	mvn.w	r3, #5
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	e00e      	b.n	8006d58 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <osKernelStart+0x64>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d107      	bne.n	8006d52 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006d42:	4b08      	ldr	r3, [pc, #32]	; (8006d64 <osKernelStart+0x64>)
 8006d44:	2202      	movs	r2, #2
 8006d46:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006d48:	f001 f878 	bl	8007e3c <vTaskStartScheduler>
      stat = osOK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e002      	b.n	8006d58 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006d52:	f04f 33ff 	mov.w	r3, #4294967295
 8006d56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006d58:	68fb      	ldr	r3, [r7, #12]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000400 	.word	0x20000400

08006d68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b092      	sub	sp, #72	; 0x48
 8006d6c:	af04      	add	r7, sp, #16
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d78:	f3ef 8305 	mrs	r3, IPSR
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f040 8094 	bne.w	8006eae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d86:	f3ef 8310 	mrs	r3, PRIMASK
 8006d8a:	623b      	str	r3, [r7, #32]
  return(result);
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f040 808d 	bne.w	8006eae <osThreadNew+0x146>
 8006d94:	4b48      	ldr	r3, [pc, #288]	; (8006eb8 <osThreadNew+0x150>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d106      	bne.n	8006daa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006da0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f040 8082 	bne.w	8006eae <osThreadNew+0x146>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d07e      	beq.n	8006eae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006db0:	2380      	movs	r3, #128	; 0x80
 8006db2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006db4:	2318      	movs	r3, #24
 8006db6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006db8:	2300      	movs	r3, #0
 8006dba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006dbc:	f107 031b 	add.w	r3, r7, #27
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d045      	beq.n	8006e5a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <osThreadNew+0x74>
        name = attr->name;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d008      	beq.n	8006e02 <osThreadNew+0x9a>
 8006df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df2:	2b38      	cmp	r3, #56	; 0x38
 8006df4:	d805      	bhi.n	8006e02 <osThreadNew+0x9a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <osThreadNew+0x9e>
        return (NULL);
 8006e02:	2300      	movs	r3, #0
 8006e04:	e054      	b.n	8006eb0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	089b      	lsrs	r3, r3, #2
 8006e14:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00e      	beq.n	8006e3c <osThreadNew+0xd4>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	2b5b      	cmp	r3, #91	; 0x5b
 8006e24:	d90a      	bls.n	8006e3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d006      	beq.n	8006e3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <osThreadNew+0xd4>
        mem = 1;
 8006e36:	2301      	movs	r3, #1
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e3a:	e010      	b.n	8006e5e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10c      	bne.n	8006e5e <osThreadNew+0xf6>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d108      	bne.n	8006e5e <osThreadNew+0xf6>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <osThreadNew+0xf6>
          mem = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e58:	e001      	b.n	8006e5e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d110      	bne.n	8006e86 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e6c:	9202      	str	r2, [sp, #8]
 8006e6e:	9301      	str	r3, [sp, #4]
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 fe12 	bl	8007aa4 <xTaskCreateStatic>
 8006e80:	4603      	mov	r3, r0
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	e013      	b.n	8006eae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d110      	bne.n	8006eae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	f107 0314 	add.w	r3, r7, #20
 8006e94:	9301      	str	r3, [sp, #4]
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fe5c 	bl	8007b5c <xTaskCreate>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d001      	beq.n	8006eae <osThreadNew+0x146>
          hTask = NULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006eae:	697b      	ldr	r3, [r7, #20]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3738      	adds	r7, #56	; 0x38
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20000400 	.word	0x20000400

08006ebc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ec4:	f3ef 8305 	mrs	r3, IPSR
 8006ec8:	613b      	str	r3, [r7, #16]
  return(result);
 8006eca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10f      	bne.n	8006ef0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d109      	bne.n	8006ef0 <osDelay+0x34>
 8006edc:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <osDelay+0x58>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d109      	bne.n	8006ef8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ee4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ee8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <osDelay+0x3c>
    stat = osErrorISR;
 8006ef0:	f06f 0305 	mvn.w	r3, #5
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	e007      	b.n	8006f08 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 ff66 	bl	8007dd4 <vTaskDelay>
    }
  }

  return (stat);
 8006f08:	697b      	ldr	r3, [r7, #20]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000400 	.word	0x20000400

08006f18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4a06      	ldr	r2, [pc, #24]	; (8006f40 <vApplicationGetIdleTaskMemory+0x28>)
 8006f28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4a05      	ldr	r2, [pc, #20]	; (8006f44 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2280      	movs	r2, #128	; 0x80
 8006f34:	601a      	str	r2, [r3, #0]
}
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bc80      	pop	{r7}
 8006f3e:	4770      	bx	lr
 8006f40:	20000404 	.word	0x20000404
 8006f44:	20000460 	.word	0x20000460

08006f48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a07      	ldr	r2, [pc, #28]	; (8006f74 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4a06      	ldr	r2, [pc, #24]	; (8006f78 <vApplicationGetTimerTaskMemory+0x30>)
 8006f5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f66:	601a      	str	r2, [r3, #0]
}
 8006f68:	bf00      	nop
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000660 	.word	0x20000660
 8006f78:	200006bc 	.word	0x200006bc

08006f7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f103 0208 	add.w	r2, r3, #8
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f04f 32ff 	mov.w	r2, #4294967295
 8006f94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f103 0208 	add.w	r2, r3, #8
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f103 0208 	add.w	r2, r3, #8
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr

08006fba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bc80      	pop	{r7}
 8006fd0:	4770      	bx	lr

08006fd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	601a      	str	r2, [r3, #0]
}
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr

08007018 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702e:	d103      	bne.n	8007038 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	e00c      	b.n	8007052 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3308      	adds	r3, #8
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	e002      	b.n	8007046 <vListInsert+0x2e>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	429a      	cmp	r2, r3
 8007050:	d2f6      	bcs.n	8007040 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	601a      	str	r2, [r3, #0]
}
 800707e:	bf00      	nop
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6892      	ldr	r2, [r2, #8]
 800709e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6852      	ldr	r2, [r2, #4]
 80070a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d103      	bne.n	80070bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	1e5a      	subs	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr
	...

080070dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007106:	f001 ffc9 	bl	800909c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007116:	fb01 f303 	mul.w	r3, r1, r3
 800711a:	441a      	add	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	3b01      	subs	r3, #1
 8007138:	68f9      	ldr	r1, [r7, #12]
 800713a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800713c:	fb01 f303 	mul.w	r3, r1, r3
 8007140:	441a      	add	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	22ff      	movs	r2, #255	; 0xff
 800714a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	22ff      	movs	r2, #255	; 0xff
 8007152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d114      	bne.n	8007186 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01a      	beq.n	800719a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3310      	adds	r3, #16
 8007168:	4618      	mov	r0, r3
 800716a:	f001 f8f1 	bl	8008350 <xTaskRemoveFromEventList>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d012      	beq.n	800719a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007174:	4b0c      	ldr	r3, [pc, #48]	; (80071a8 <xQueueGenericReset+0xcc>)
 8007176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	f3bf 8f6f 	isb	sy
 8007184:	e009      	b.n	800719a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3310      	adds	r3, #16
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff fef6 	bl	8006f7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3324      	adds	r3, #36	; 0x24
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff fef1 	bl	8006f7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800719a:	f001 ffaf 	bl	80090fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800719e:	2301      	movs	r3, #1
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08e      	sub	sp, #56	; 0x38
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10a      	bne.n	80071d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <xQueueGenericCreateStatic+0x52>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <xQueueGenericCreateStatic+0x56>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <xQueueGenericCreateStatic+0x58>
 8007202:	2300      	movs	r3, #0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	623b      	str	r3, [r7, #32]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <xQueueGenericCreateStatic+0x7e>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <xQueueGenericCreateStatic+0x82>
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <xQueueGenericCreateStatic+0x84>
 800722e:	2300      	movs	r3, #0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	61fb      	str	r3, [r7, #28]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800724a:	2350      	movs	r3, #80	; 0x50
 800724c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b50      	cmp	r3, #80	; 0x50
 8007252:	d00a      	beq.n	800726a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	61bb      	str	r3, [r7, #24]
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00d      	beq.n	8007290 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800727c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4613      	mov	r3, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f805 	bl	800729a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007292:	4618      	mov	r0, r3
 8007294:	3730      	adds	r7, #48	; 0x30
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	e002      	b.n	80072bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072c8:	2101      	movs	r1, #1
 80072ca:	69b8      	ldr	r0, [r7, #24]
 80072cc:	f7ff ff06 	bl	80070dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	78fa      	ldrb	r2, [r7, #3]
 80072d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072d8:	bf00      	nop
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08e      	sub	sp, #56	; 0x38
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072ee:	2300      	movs	r3, #0
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xQueueGenericSend+0x32>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <xQueueGenericSend+0x40>
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <xQueueGenericSend+0x44>
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <xQueueGenericSend+0x46>
 8007324:	2300      	movs	r3, #0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <xQueueGenericSend+0x60>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800733c:	bf00      	nop
 800733e:	e7fe      	b.n	800733e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d103      	bne.n	800734e <xQueueGenericSend+0x6e>
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <xQueueGenericSend+0x72>
 800734e:	2301      	movs	r3, #1
 8007350:	e000      	b.n	8007354 <xQueueGenericSend+0x74>
 8007352:	2300      	movs	r3, #0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <xQueueGenericSend+0x8e>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	623b      	str	r3, [r7, #32]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800736e:	f001 f9b1 	bl	80086d4 <xTaskGetSchedulerState>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d102      	bne.n	800737e <xQueueGenericSend+0x9e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <xQueueGenericSend+0xa2>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <xQueueGenericSend+0xa4>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xQueueGenericSend+0xbe>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	61fb      	str	r3, [r7, #28]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800739e:	f001 fe7d 	bl	800909c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d302      	bcc.n	80073b4 <xQueueGenericSend+0xd4>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d129      	bne.n	8007408 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ba:	f000 fa07 	bl	80077cc <prvCopyDataToQueue>
 80073be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d010      	beq.n	80073ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	3324      	adds	r3, #36	; 0x24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 ffbf 	bl	8008350 <xTaskRemoveFromEventList>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d013      	beq.n	8007400 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073d8:	4b3f      	ldr	r3, [pc, #252]	; (80074d8 <xQueueGenericSend+0x1f8>)
 80073da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	e00a      	b.n	8007400 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073f0:	4b39      	ldr	r3, [pc, #228]	; (80074d8 <xQueueGenericSend+0x1f8>)
 80073f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007400:	f001 fe7c 	bl	80090fc <vPortExitCritical>
				return pdPASS;
 8007404:	2301      	movs	r3, #1
 8007406:	e063      	b.n	80074d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800740e:	f001 fe75 	bl	80090fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007412:	2300      	movs	r3, #0
 8007414:	e05c      	b.n	80074d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007418:	2b00      	cmp	r3, #0
 800741a:	d106      	bne.n	800742a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800741c:	f107 0314 	add.w	r3, r7, #20
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fff9 	bl	8008418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007426:	2301      	movs	r3, #1
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800742a:	f001 fe67 	bl	80090fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800742e:	f000 fd6b 	bl	8007f08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007432:	f001 fe33 	bl	800909c <vPortEnterCritical>
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800743c:	b25b      	sxtb	r3, r3
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	d103      	bne.n	800744c <xQueueGenericSend+0x16c>
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007452:	b25b      	sxtb	r3, r3
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007458:	d103      	bne.n	8007462 <xQueueGenericSend+0x182>
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007462:	f001 fe4b 	bl	80090fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007466:	1d3a      	adds	r2, r7, #4
 8007468:	f107 0314 	add.w	r3, r7, #20
 800746c:	4611      	mov	r1, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f000 ffe8 	bl	8008444 <xTaskCheckForTimeOut>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d124      	bne.n	80074c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800747a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800747c:	f000 fa9e 	bl	80079bc <prvIsQueueFull>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d018      	beq.n	80074b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	3310      	adds	r3, #16
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	4611      	mov	r1, r2
 800748e:	4618      	mov	r0, r3
 8007490:	f000 ff0e 	bl	80082b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007496:	f000 fa29 	bl	80078ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800749a:	f000 fd43 	bl	8007f24 <xTaskResumeAll>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f47f af7c 	bne.w	800739e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80074a6:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <xQueueGenericSend+0x1f8>)
 80074a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	e772      	b.n	800739e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ba:	f000 fa17 	bl	80078ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074be:	f000 fd31 	bl	8007f24 <xTaskResumeAll>
 80074c2:	e76c      	b.n	800739e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074c6:	f000 fa11 	bl	80078ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074ca:	f000 fd2b 	bl	8007f24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074ce:	2300      	movs	r3, #0
		}
	}
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3738      	adds	r7, #56	; 0x38
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	e000ed04 	.word	0xe000ed04

080074dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08e      	sub	sp, #56	; 0x38
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <xQueueGenericSendFromISR+0x3c>
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <xQueueGenericSendFromISR+0x40>
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <xQueueGenericSendFromISR+0x42>
 800751c:	2300      	movs	r3, #0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	623b      	str	r3, [r7, #32]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d103      	bne.n	8007546 <xQueueGenericSendFromISR+0x6a>
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <xQueueGenericSendFromISR+0x6e>
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <xQueueGenericSendFromISR+0x70>
 800754a:	2300      	movs	r3, #0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	61fb      	str	r3, [r7, #28]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007566:	f001 fe5b 	bl	8009220 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800756a:	f3ef 8211 	mrs	r2, BASEPRI
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	61ba      	str	r2, [r7, #24]
 8007580:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007582:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007584:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <xQueueGenericSendFromISR+0xbc>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d12c      	bne.n	80075f2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800759e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075a8:	f000 f910 	bl	80077cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b4:	d112      	bne.n	80075dc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d016      	beq.n	80075ec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	3324      	adds	r3, #36	; 0x24
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 fec4 	bl	8008350 <xTaskRemoveFromEventList>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00e      	beq.n	80075ec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	e007      	b.n	80075ec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075e0:	3301      	adds	r3, #1
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	b25a      	sxtb	r2, r3
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80075ec:	2301      	movs	r3, #1
 80075ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80075f0:	e001      	b.n	80075f6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
 80075f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007600:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007604:	4618      	mov	r0, r3
 8007606:	3738      	adds	r7, #56	; 0x38
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08c      	sub	sp, #48	; 0x30
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007618:	2300      	movs	r3, #0
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <xQueueReceive+0x30>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	623b      	str	r3, [r7, #32]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d103      	bne.n	800764a <xQueueReceive+0x3e>
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <xQueueReceive+0x42>
 800764a:	2301      	movs	r3, #1
 800764c:	e000      	b.n	8007650 <xQueueReceive+0x44>
 800764e:	2300      	movs	r3, #0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <xQueueReceive+0x5e>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	61fb      	str	r3, [r7, #28]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800766a:	f001 f833 	bl	80086d4 <xTaskGetSchedulerState>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <xQueueReceive+0x6e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <xQueueReceive+0x72>
 800767a:	2301      	movs	r3, #1
 800767c:	e000      	b.n	8007680 <xQueueReceive+0x74>
 800767e:	2300      	movs	r3, #0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <xQueueReceive+0x8e>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	61bb      	str	r3, [r7, #24]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800769a:	f001 fcff 	bl	800909c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d01f      	beq.n	80076ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ae:	f000 f8f7 	bl	80078a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	1e5a      	subs	r2, r3, #1
 80076b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00f      	beq.n	80076e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	3310      	adds	r3, #16
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fe42 	bl	8008350 <xTaskRemoveFromEventList>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d007      	beq.n	80076e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076d2:	4b3d      	ldr	r3, [pc, #244]	; (80077c8 <xQueueReceive+0x1bc>)
 80076d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076e2:	f001 fd0b 	bl	80090fc <vPortExitCritical>
				return pdPASS;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e069      	b.n	80077be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d103      	bne.n	80076f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076f0:	f001 fd04 	bl	80090fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076f4:	2300      	movs	r3, #0
 80076f6:	e062      	b.n	80077be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076fe:	f107 0310 	add.w	r3, r7, #16
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fe88 	bl	8008418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800770c:	f001 fcf6 	bl	80090fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007710:	f000 fbfa 	bl	8007f08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007714:	f001 fcc2 	bl	800909c <vPortEnterCritical>
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800771e:	b25b      	sxtb	r3, r3
 8007720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007724:	d103      	bne.n	800772e <xQueueReceive+0x122>
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007734:	b25b      	sxtb	r3, r3
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773a:	d103      	bne.n	8007744 <xQueueReceive+0x138>
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007744:	f001 fcda 	bl	80090fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007748:	1d3a      	adds	r2, r7, #4
 800774a:	f107 0310 	add.w	r3, r7, #16
 800774e:	4611      	mov	r1, r2
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fe77 	bl	8008444 <xTaskCheckForTimeOut>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d123      	bne.n	80077a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800775c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800775e:	f000 f917 	bl	8007990 <prvIsQueueEmpty>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d017      	beq.n	8007798 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776a:	3324      	adds	r3, #36	; 0x24
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	4611      	mov	r1, r2
 8007770:	4618      	mov	r0, r3
 8007772:	f000 fd9d 	bl	80082b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007778:	f000 f8b8 	bl	80078ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800777c:	f000 fbd2 	bl	8007f24 <xTaskResumeAll>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d189      	bne.n	800769a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007786:	4b10      	ldr	r3, [pc, #64]	; (80077c8 <xQueueReceive+0x1bc>)
 8007788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	e780      	b.n	800769a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800779a:	f000 f8a7 	bl	80078ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800779e:	f000 fbc1 	bl	8007f24 <xTaskResumeAll>
 80077a2:	e77a      	b.n	800769a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077a6:	f000 f8a1 	bl	80078ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077aa:	f000 fbbb 	bl	8007f24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077b0:	f000 f8ee 	bl	8007990 <prvIsQueueEmpty>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f43f af6f 	beq.w	800769a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3730      	adds	r7, #48	; 0x30
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10d      	bne.n	8007806 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d14d      	bne.n	800788e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 ff8a 	bl	8008710 <xTaskPriorityDisinherit>
 80077fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	605a      	str	r2, [r3, #4]
 8007804:	e043      	b.n	800788e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d119      	bne.n	8007840 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6898      	ldr	r0, [r3, #8]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007814:	461a      	mov	r2, r3
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	f003 f839 	bl	800a88e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007824:	441a      	add	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	429a      	cmp	r2, r3
 8007834:	d32b      	bcc.n	800788e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	609a      	str	r2, [r3, #8]
 800783e:	e026      	b.n	800788e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	68d8      	ldr	r0, [r3, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	461a      	mov	r2, r3
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	f003 f81f 	bl	800a88e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007858:	425b      	negs	r3, r3
 800785a:	441a      	add	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	68da      	ldr	r2, [r3, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d207      	bcs.n	800787c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	425b      	negs	r3, r3
 8007876:	441a      	add	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d105      	bne.n	800788e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	3b01      	subs	r3, #1
 800788c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007896:	697b      	ldr	r3, [r7, #20]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d018      	beq.n	80078e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	441a      	add	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d303      	bcc.n	80078d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68d9      	ldr	r1, [r3, #12]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	461a      	mov	r2, r3
 80078de:	6838      	ldr	r0, [r7, #0]
 80078e0:	f002 ffd5 	bl	800a88e <memcpy>
	}
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078f4:	f001 fbd2 	bl	800909c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007900:	e011      	b.n	8007926 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	2b00      	cmp	r3, #0
 8007908:	d012      	beq.n	8007930 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3324      	adds	r3, #36	; 0x24
 800790e:	4618      	mov	r0, r3
 8007910:	f000 fd1e 	bl	8008350 <xTaskRemoveFromEventList>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800791a:	f000 fdf5 	bl	8008508 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	3b01      	subs	r3, #1
 8007922:	b2db      	uxtb	r3, r3
 8007924:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800792a:	2b00      	cmp	r3, #0
 800792c:	dce9      	bgt.n	8007902 <prvUnlockQueue+0x16>
 800792e:	e000      	b.n	8007932 <prvUnlockQueue+0x46>
					break;
 8007930:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	22ff      	movs	r2, #255	; 0xff
 8007936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800793a:	f001 fbdf 	bl	80090fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800793e:	f001 fbad 	bl	800909c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007948:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800794a:	e011      	b.n	8007970 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d012      	beq.n	800797a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3310      	adds	r3, #16
 8007958:	4618      	mov	r0, r3
 800795a:	f000 fcf9 	bl	8008350 <xTaskRemoveFromEventList>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007964:	f000 fdd0 	bl	8008508 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	3b01      	subs	r3, #1
 800796c:	b2db      	uxtb	r3, r3
 800796e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007974:	2b00      	cmp	r3, #0
 8007976:	dce9      	bgt.n	800794c <prvUnlockQueue+0x60>
 8007978:	e000      	b.n	800797c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800797a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	22ff      	movs	r2, #255	; 0xff
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007984:	f001 fbba 	bl	80090fc <vPortExitCritical>
}
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007998:	f001 fb80 	bl	800909c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079a4:	2301      	movs	r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	e001      	b.n	80079ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079ae:	f001 fba5 	bl	80090fc <vPortExitCritical>

	return xReturn;
 80079b2:	68fb      	ldr	r3, [r7, #12]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079c4:	f001 fb6a 	bl	800909c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d102      	bne.n	80079da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079d4:	2301      	movs	r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	e001      	b.n	80079de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079da:	2300      	movs	r3, #0
 80079dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079de:	f001 fb8d 	bl	80090fc <vPortExitCritical>

	return xReturn;
 80079e2:	68fb      	ldr	r3, [r7, #12]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079f6:	2300      	movs	r3, #0
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	e014      	b.n	8007a26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079fc:	4a0e      	ldr	r2, [pc, #56]	; (8007a38 <vQueueAddToRegistry+0x4c>)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10b      	bne.n	8007a20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a08:	490b      	ldr	r1, [pc, #44]	; (8007a38 <vQueueAddToRegistry+0x4c>)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a12:	4a09      	ldr	r2, [pc, #36]	; (8007a38 <vQueueAddToRegistry+0x4c>)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	4413      	add	r3, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a1e:	e006      	b.n	8007a2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b07      	cmp	r3, #7
 8007a2a:	d9e7      	bls.n	80079fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a2c:	bf00      	nop
 8007a2e:	bf00      	nop
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr
 8007a38:	20000abc 	.word	0x20000abc

08007a3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a4c:	f001 fb26 	bl	800909c <vPortEnterCritical>
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a56:	b25b      	sxtb	r3, r3
 8007a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5c:	d103      	bne.n	8007a66 <vQueueWaitForMessageRestricted+0x2a>
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a6c:	b25b      	sxtb	r3, r3
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a72:	d103      	bne.n	8007a7c <vQueueWaitForMessageRestricted+0x40>
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a7c:	f001 fb3e 	bl	80090fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	3324      	adds	r3, #36	; 0x24
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	68b9      	ldr	r1, [r7, #8]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 fc31 	bl	80082f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a96:	6978      	ldr	r0, [r7, #20]
 8007a98:	f7ff ff28 	bl	80078ec <prvUnlockQueue>
	}
 8007a9c:	bf00      	nop
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08e      	sub	sp, #56	; 0x38
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10a      	bne.n	8007ace <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	623b      	str	r3, [r7, #32]
}
 8007aca:	bf00      	nop
 8007acc:	e7fe      	b.n	8007acc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10a      	bne.n	8007aea <xTaskCreateStatic+0x46>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	61fb      	str	r3, [r7, #28]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007aea:	235c      	movs	r3, #92	; 0x5c
 8007aec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2b5c      	cmp	r3, #92	; 0x5c
 8007af2:	d00a      	beq.n	8007b0a <xTaskCreateStatic+0x66>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	61bb      	str	r3, [r7, #24]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01e      	beq.n	8007b4e <xTaskCreateStatic+0xaa>
 8007b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01b      	beq.n	8007b4e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b28:	2300      	movs	r3, #0
 8007b2a:	9303      	str	r3, [sp, #12]
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	9302      	str	r3, [sp, #8]
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f850 	bl	8007be6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b48:	f000 f8d4 	bl	8007cf4 <prvAddNewTaskToReadyList>
 8007b4c:	e001      	b.n	8007b52 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b52:	697b      	ldr	r3, [r7, #20]
	}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3728      	adds	r7, #40	; 0x28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08c      	sub	sp, #48	; 0x30
 8007b60:	af04      	add	r7, sp, #16
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b6c:	88fb      	ldrh	r3, [r7, #6]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 fb93 	bl	800929c <pvPortMalloc>
 8007b76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00e      	beq.n	8007b9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007b7e:	205c      	movs	r0, #92	; 0x5c
 8007b80:	f001 fb8c 	bl	800929c <pvPortMalloc>
 8007b84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	631a      	str	r2, [r3, #48]	; 0x30
 8007b92:	e005      	b.n	8007ba0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b94:	6978      	ldr	r0, [r7, #20]
 8007b96:	f001 fc45 	bl	8009424 <vPortFree>
 8007b9a:	e001      	b.n	8007ba0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d017      	beq.n	8007bd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bae:	88fa      	ldrh	r2, [r7, #6]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	9303      	str	r3, [sp, #12]
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	9302      	str	r3, [sp, #8]
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	68b9      	ldr	r1, [r7, #8]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 f80e 	bl	8007be6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bca:	69f8      	ldr	r0, [r7, #28]
 8007bcc:	f000 f892 	bl	8007cf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	61bb      	str	r3, [r7, #24]
 8007bd4:	e002      	b.n	8007bdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bdc:	69bb      	ldr	r3, [r7, #24]
	}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3720      	adds	r7, #32
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b088      	sub	sp, #32
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	607a      	str	r2, [r7, #4]
 8007bf2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	21a5      	movs	r1, #165	; 0xa5
 8007c00:	f002 fdb8 	bl	800a774 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	f023 0307 	bic.w	r3, r3, #7
 8007c1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	f003 0307 	and.w	r3, r3, #7
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <prvInitialiseNewTask+0x58>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	617b      	str	r3, [r7, #20]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61fb      	str	r3, [r7, #28]
 8007c42:	e012      	b.n	8007c6a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	4413      	add	r3, r2
 8007c4a:	7819      	ldrb	r1, [r3, #0]
 8007c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	3334      	adds	r3, #52	; 0x34
 8007c54:	460a      	mov	r2, r1
 8007c56:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d006      	beq.n	8007c72 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	3301      	adds	r3, #1
 8007c68:	61fb      	str	r3, [r7, #28]
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	2b0f      	cmp	r3, #15
 8007c6e:	d9e9      	bls.n	8007c44 <prvInitialiseNewTask+0x5e>
 8007c70:	e000      	b.n	8007c74 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007c72:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	2b37      	cmp	r3, #55	; 0x37
 8007c80:	d901      	bls.n	8007c86 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c82:	2337      	movs	r3, #55	; 0x37
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c8a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	2200      	movs	r2, #0
 8007c96:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff f98c 	bl	8006fba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	3318      	adds	r3, #24
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff f987 	bl	8006fba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	68f9      	ldr	r1, [r7, #12]
 8007cd4:	69b8      	ldr	r0, [r7, #24]
 8007cd6:	f001 f8ef 	bl	8008eb8 <pxPortInitialiseStack>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cec:	bf00      	nop
 8007cee:	3720      	adds	r7, #32
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cfc:	f001 f9ce 	bl	800909c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d00:	4b2d      	ldr	r3, [pc, #180]	; (8007db8 <prvAddNewTaskToReadyList+0xc4>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3301      	adds	r3, #1
 8007d06:	4a2c      	ldr	r2, [pc, #176]	; (8007db8 <prvAddNewTaskToReadyList+0xc4>)
 8007d08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d0a:	4b2c      	ldr	r3, [pc, #176]	; (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d109      	bne.n	8007d26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d12:	4a2a      	ldr	r2, [pc, #168]	; (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d18:	4b27      	ldr	r3, [pc, #156]	; (8007db8 <prvAddNewTaskToReadyList+0xc4>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d110      	bne.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d20:	f000 fc16 	bl	8008550 <prvInitialiseTaskLists>
 8007d24:	e00d      	b.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d26:	4b26      	ldr	r3, [pc, #152]	; (8007dc0 <prvAddNewTaskToReadyList+0xcc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d109      	bne.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d2e:	4b23      	ldr	r3, [pc, #140]	; (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d802      	bhi.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d3c:	4a1f      	ldr	r2, [pc, #124]	; (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d42:	4b20      	ldr	r3, [pc, #128]	; (8007dc4 <prvAddNewTaskToReadyList+0xd0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3301      	adds	r3, #1
 8007d48:	4a1e      	ldr	r2, [pc, #120]	; (8007dc4 <prvAddNewTaskToReadyList+0xd0>)
 8007d4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d4c:	4b1d      	ldr	r3, [pc, #116]	; (8007dc4 <prvAddNewTaskToReadyList+0xd0>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d58:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <prvAddNewTaskToReadyList+0xd4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d903      	bls.n	8007d68 <prvAddNewTaskToReadyList+0x74>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d64:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <prvAddNewTaskToReadyList+0xd4>)
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4a15      	ldr	r2, [pc, #84]	; (8007dcc <prvAddNewTaskToReadyList+0xd8>)
 8007d76:	441a      	add	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4610      	mov	r0, r2
 8007d80:	f7ff f927 	bl	8006fd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d84:	f001 f9ba 	bl	80090fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <prvAddNewTaskToReadyList+0xcc>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00e      	beq.n	8007dae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d207      	bcs.n	8007dae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d9e:	4b0c      	ldr	r3, [pc, #48]	; (8007dd0 <prvAddNewTaskToReadyList+0xdc>)
 8007da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000fd0 	.word	0x20000fd0
 8007dbc:	20000afc 	.word	0x20000afc
 8007dc0:	20000fdc 	.word	0x20000fdc
 8007dc4:	20000fec 	.word	0x20000fec
 8007dc8:	20000fd8 	.word	0x20000fd8
 8007dcc:	20000b00 	.word	0x20000b00
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d017      	beq.n	8007e16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007de6:	4b13      	ldr	r3, [pc, #76]	; (8007e34 <vTaskDelay+0x60>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <vTaskDelay+0x30>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	60bb      	str	r3, [r7, #8]
}
 8007e00:	bf00      	nop
 8007e02:	e7fe      	b.n	8007e02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e04:	f000 f880 	bl	8007f08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e08:	2100      	movs	r1, #0
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fcee 	bl	80087ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e10:	f000 f888 	bl	8007f24 <xTaskResumeAll>
 8007e14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d107      	bne.n	8007e2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e1c:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <vTaskDelay+0x64>)
 8007e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e2c:	bf00      	nop
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20000ff8 	.word	0x20000ff8
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08a      	sub	sp, #40	; 0x28
 8007e40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e4a:	463a      	mov	r2, r7
 8007e4c:	1d39      	adds	r1, r7, #4
 8007e4e:	f107 0308 	add.w	r3, r7, #8
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff f860 	bl	8006f18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	9202      	str	r2, [sp, #8]
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	2300      	movs	r3, #0
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	2300      	movs	r3, #0
 8007e68:	460a      	mov	r2, r1
 8007e6a:	4921      	ldr	r1, [pc, #132]	; (8007ef0 <vTaskStartScheduler+0xb4>)
 8007e6c:	4821      	ldr	r0, [pc, #132]	; (8007ef4 <vTaskStartScheduler+0xb8>)
 8007e6e:	f7ff fe19 	bl	8007aa4 <xTaskCreateStatic>
 8007e72:	4603      	mov	r3, r0
 8007e74:	4a20      	ldr	r2, [pc, #128]	; (8007ef8 <vTaskStartScheduler+0xbc>)
 8007e76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e78:	4b1f      	ldr	r3, [pc, #124]	; (8007ef8 <vTaskStartScheduler+0xbc>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e80:	2301      	movs	r3, #1
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e001      	b.n	8007e8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d102      	bne.n	8007e96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007e90:	f000 fd00 	bl	8008894 <xTimerCreateTimerTask>
 8007e94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d116      	bne.n	8007eca <vTaskStartScheduler+0x8e>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	613b      	str	r3, [r7, #16]
}
 8007eae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007eb0:	4b12      	ldr	r3, [pc, #72]	; (8007efc <vTaskStartScheduler+0xc0>)
 8007eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007eb8:	4b11      	ldr	r3, [pc, #68]	; (8007f00 <vTaskStartScheduler+0xc4>)
 8007eba:	2201      	movs	r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007ebe:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <vTaskStartScheduler+0xc8>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ec4:	f001 f878 	bl	8008fb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ec8:	e00e      	b.n	8007ee8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed0:	d10a      	bne.n	8007ee8 <vTaskStartScheduler+0xac>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	60fb      	str	r3, [r7, #12]
}
 8007ee4:	bf00      	nop
 8007ee6:	e7fe      	b.n	8007ee6 <vTaskStartScheduler+0xaa>
}
 8007ee8:	bf00      	nop
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	0800e000 	.word	0x0800e000
 8007ef4:	08008521 	.word	0x08008521
 8007ef8:	20000ff4 	.word	0x20000ff4
 8007efc:	20000ff0 	.word	0x20000ff0
 8007f00:	20000fdc 	.word	0x20000fdc
 8007f04:	20000fd4 	.word	0x20000fd4

08007f08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f0c:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <vTaskSuspendAll+0x18>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3301      	adds	r3, #1
 8007f12:	4a03      	ldr	r2, [pc, #12]	; (8007f20 <vTaskSuspendAll+0x18>)
 8007f14:	6013      	str	r3, [r2, #0]
}
 8007f16:	bf00      	nop
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bc80      	pop	{r7}
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	20000ff8 	.word	0x20000ff8

08007f24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f32:	4b42      	ldr	r3, [pc, #264]	; (800803c <xTaskResumeAll+0x118>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10a      	bne.n	8007f50 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	603b      	str	r3, [r7, #0]
}
 8007f4c:	bf00      	nop
 8007f4e:	e7fe      	b.n	8007f4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f50:	f001 f8a4 	bl	800909c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f54:	4b39      	ldr	r3, [pc, #228]	; (800803c <xTaskResumeAll+0x118>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	4a38      	ldr	r2, [pc, #224]	; (800803c <xTaskResumeAll+0x118>)
 8007f5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f5e:	4b37      	ldr	r3, [pc, #220]	; (800803c <xTaskResumeAll+0x118>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d162      	bne.n	800802c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f66:	4b36      	ldr	r3, [pc, #216]	; (8008040 <xTaskResumeAll+0x11c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d05e      	beq.n	800802c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f6e:	e02f      	b.n	8007fd0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007f70:	4b34      	ldr	r3, [pc, #208]	; (8008044 <xTaskResumeAll+0x120>)
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3318      	adds	r3, #24
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff f883 	bl	8007088 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3304      	adds	r3, #4
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff f87e 	bl	8007088 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f90:	4b2d      	ldr	r3, [pc, #180]	; (8008048 <xTaskResumeAll+0x124>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d903      	bls.n	8007fa0 <xTaskResumeAll+0x7c>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	4a2a      	ldr	r2, [pc, #168]	; (8008048 <xTaskResumeAll+0x124>)
 8007f9e:	6013      	str	r3, [r2, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4a27      	ldr	r2, [pc, #156]	; (800804c <xTaskResumeAll+0x128>)
 8007fae:	441a      	add	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	f7ff f80b 	bl	8006fd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc0:	4b23      	ldr	r3, [pc, #140]	; (8008050 <xTaskResumeAll+0x12c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d302      	bcc.n	8007fd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007fca:	4b22      	ldr	r3, [pc, #136]	; (8008054 <xTaskResumeAll+0x130>)
 8007fcc:	2201      	movs	r2, #1
 8007fce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fd0:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <xTaskResumeAll+0x120>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1cb      	bne.n	8007f70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fde:	f000 fb55 	bl	800868c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007fe2:	4b1d      	ldr	r3, [pc, #116]	; (8008058 <xTaskResumeAll+0x134>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d010      	beq.n	8008010 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fee:	f000 f845 	bl	800807c <xTaskIncrementTick>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ff8:	4b16      	ldr	r3, [pc, #88]	; (8008054 <xTaskResumeAll+0x130>)
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3b01      	subs	r3, #1
 8008002:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f1      	bne.n	8007fee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800800a:	4b13      	ldr	r3, [pc, #76]	; (8008058 <xTaskResumeAll+0x134>)
 800800c:	2200      	movs	r2, #0
 800800e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008010:	4b10      	ldr	r3, [pc, #64]	; (8008054 <xTaskResumeAll+0x130>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d009      	beq.n	800802c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008018:	2301      	movs	r3, #1
 800801a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800801c:	4b0f      	ldr	r3, [pc, #60]	; (800805c <xTaskResumeAll+0x138>)
 800801e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800802c:	f001 f866 	bl	80090fc <vPortExitCritical>

	return xAlreadyYielded;
 8008030:	68bb      	ldr	r3, [r7, #8]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000ff8 	.word	0x20000ff8
 8008040:	20000fd0 	.word	0x20000fd0
 8008044:	20000f90 	.word	0x20000f90
 8008048:	20000fd8 	.word	0x20000fd8
 800804c:	20000b00 	.word	0x20000b00
 8008050:	20000afc 	.word	0x20000afc
 8008054:	20000fe4 	.word	0x20000fe4
 8008058:	20000fe0 	.word	0x20000fe0
 800805c:	e000ed04 	.word	0xe000ed04

08008060 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008066:	4b04      	ldr	r3, [pc, #16]	; (8008078 <xTaskGetTickCount+0x18>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800806c:	687b      	ldr	r3, [r7, #4]
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	bc80      	pop	{r7}
 8008076:	4770      	bx	lr
 8008078:	20000fd4 	.word	0x20000fd4

0800807c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008082:	2300      	movs	r3, #0
 8008084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008086:	4b51      	ldr	r3, [pc, #324]	; (80081cc <xTaskIncrementTick+0x150>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	f040 808e 	bne.w	80081ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008090:	4b4f      	ldr	r3, [pc, #316]	; (80081d0 <xTaskIncrementTick+0x154>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3301      	adds	r3, #1
 8008096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008098:	4a4d      	ldr	r2, [pc, #308]	; (80081d0 <xTaskIncrementTick+0x154>)
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d120      	bne.n	80080e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80080a4:	4b4b      	ldr	r3, [pc, #300]	; (80081d4 <xTaskIncrementTick+0x158>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	603b      	str	r3, [r7, #0]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <xTaskIncrementTick+0x46>
 80080c4:	4b43      	ldr	r3, [pc, #268]	; (80081d4 <xTaskIncrementTick+0x158>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	4b43      	ldr	r3, [pc, #268]	; (80081d8 <xTaskIncrementTick+0x15c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a41      	ldr	r2, [pc, #260]	; (80081d4 <xTaskIncrementTick+0x158>)
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	4a41      	ldr	r2, [pc, #260]	; (80081d8 <xTaskIncrementTick+0x15c>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	4b40      	ldr	r3, [pc, #256]	; (80081dc <xTaskIncrementTick+0x160>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3301      	adds	r3, #1
 80080de:	4a3f      	ldr	r2, [pc, #252]	; (80081dc <xTaskIncrementTick+0x160>)
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	f000 fad3 	bl	800868c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080e6:	4b3e      	ldr	r3, [pc, #248]	; (80081e0 <xTaskIncrementTick+0x164>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d34e      	bcc.n	800818e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080f0:	4b38      	ldr	r3, [pc, #224]	; (80081d4 <xTaskIncrementTick+0x158>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <xTaskIncrementTick+0x82>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <xTaskIncrementTick+0x84>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d004      	beq.n	800810e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008104:	4b36      	ldr	r3, [pc, #216]	; (80081e0 <xTaskIncrementTick+0x164>)
 8008106:	f04f 32ff 	mov.w	r2, #4294967295
 800810a:	601a      	str	r2, [r3, #0]
					break;
 800810c:	e03f      	b.n	800818e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800810e:	4b31      	ldr	r3, [pc, #196]	; (80081d4 <xTaskIncrementTick+0x158>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800811e:	693a      	ldr	r2, [r7, #16]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	429a      	cmp	r2, r3
 8008124:	d203      	bcs.n	800812e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008126:	4a2e      	ldr	r2, [pc, #184]	; (80081e0 <xTaskIncrementTick+0x164>)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6013      	str	r3, [r2, #0]
						break;
 800812c:	e02f      	b.n	800818e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	3304      	adds	r3, #4
 8008132:	4618      	mov	r0, r3
 8008134:	f7fe ffa8 	bl	8007088 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	2b00      	cmp	r3, #0
 800813e:	d004      	beq.n	800814a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	3318      	adds	r3, #24
 8008144:	4618      	mov	r0, r3
 8008146:	f7fe ff9f 	bl	8007088 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814e:	4b25      	ldr	r3, [pc, #148]	; (80081e4 <xTaskIncrementTick+0x168>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	429a      	cmp	r2, r3
 8008154:	d903      	bls.n	800815e <xTaskIncrementTick+0xe2>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	4a22      	ldr	r2, [pc, #136]	; (80081e4 <xTaskIncrementTick+0x168>)
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008162:	4613      	mov	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4a1f      	ldr	r2, [pc, #124]	; (80081e8 <xTaskIncrementTick+0x16c>)
 800816c:	441a      	add	r2, r3
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	3304      	adds	r3, #4
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f7fe ff2c 	bl	8006fd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817e:	4b1b      	ldr	r3, [pc, #108]	; (80081ec <xTaskIncrementTick+0x170>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	429a      	cmp	r2, r3
 8008186:	d3b3      	bcc.n	80080f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008188:	2301      	movs	r3, #1
 800818a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800818c:	e7b0      	b.n	80080f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800818e:	4b17      	ldr	r3, [pc, #92]	; (80081ec <xTaskIncrementTick+0x170>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008194:	4914      	ldr	r1, [pc, #80]	; (80081e8 <xTaskIncrementTick+0x16c>)
 8008196:	4613      	mov	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	440b      	add	r3, r1
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d907      	bls.n	80081b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80081a6:	2301      	movs	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	e004      	b.n	80081b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80081ac:	4b10      	ldr	r3, [pc, #64]	; (80081f0 <xTaskIncrementTick+0x174>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	3301      	adds	r3, #1
 80081b2:	4a0f      	ldr	r2, [pc, #60]	; (80081f0 <xTaskIncrementTick+0x174>)
 80081b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80081b6:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <xTaskIncrementTick+0x178>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80081be:	2301      	movs	r3, #1
 80081c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80081c2:	697b      	ldr	r3, [r7, #20]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000ff8 	.word	0x20000ff8
 80081d0:	20000fd4 	.word	0x20000fd4
 80081d4:	20000f88 	.word	0x20000f88
 80081d8:	20000f8c 	.word	0x20000f8c
 80081dc:	20000fe8 	.word	0x20000fe8
 80081e0:	20000ff0 	.word	0x20000ff0
 80081e4:	20000fd8 	.word	0x20000fd8
 80081e8:	20000b00 	.word	0x20000b00
 80081ec:	20000afc 	.word	0x20000afc
 80081f0:	20000fe0 	.word	0x20000fe0
 80081f4:	20000fe4 	.word	0x20000fe4

080081f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081fe:	4b27      	ldr	r3, [pc, #156]	; (800829c <vTaskSwitchContext+0xa4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008206:	4b26      	ldr	r3, [pc, #152]	; (80082a0 <vTaskSwitchContext+0xa8>)
 8008208:	2201      	movs	r2, #1
 800820a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800820c:	e041      	b.n	8008292 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800820e:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <vTaskSwitchContext+0xa8>)
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008214:	4b23      	ldr	r3, [pc, #140]	; (80082a4 <vTaskSwitchContext+0xac>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	e010      	b.n	800823e <vTaskSwitchContext+0x46>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <vTaskSwitchContext+0x40>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	607b      	str	r3, [r7, #4]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <vTaskSwitchContext+0x3e>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3b01      	subs	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	491a      	ldr	r1, [pc, #104]	; (80082a8 <vTaskSwitchContext+0xb0>)
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4613      	mov	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	440b      	add	r3, r1
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0e4      	beq.n	800821c <vTaskSwitchContext+0x24>
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	4613      	mov	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4a12      	ldr	r2, [pc, #72]	; (80082a8 <vTaskSwitchContext+0xb0>)
 800825e:	4413      	add	r3, r2
 8008260:	60bb      	str	r3, [r7, #8]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	605a      	str	r2, [r3, #4]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	3308      	adds	r3, #8
 8008274:	429a      	cmp	r2, r3
 8008276:	d104      	bne.n	8008282 <vTaskSwitchContext+0x8a>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	605a      	str	r2, [r3, #4]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	4a08      	ldr	r2, [pc, #32]	; (80082ac <vTaskSwitchContext+0xb4>)
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	4a05      	ldr	r2, [pc, #20]	; (80082a4 <vTaskSwitchContext+0xac>)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6013      	str	r3, [r2, #0]
}
 8008292:	bf00      	nop
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	bc80      	pop	{r7}
 800829a:	4770      	bx	lr
 800829c:	20000ff8 	.word	0x20000ff8
 80082a0:	20000fe4 	.word	0x20000fe4
 80082a4:	20000fd8 	.word	0x20000fd8
 80082a8:	20000b00 	.word	0x20000b00
 80082ac:	20000afc 	.word	0x20000afc

080082b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	60fb      	str	r3, [r7, #12]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082d6:	4b07      	ldr	r3, [pc, #28]	; (80082f4 <vTaskPlaceOnEventList+0x44>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3318      	adds	r3, #24
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fe fe9a 	bl	8007018 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082e4:	2101      	movs	r1, #1
 80082e6:	6838      	ldr	r0, [r7, #0]
 80082e8:	f000 fa80 	bl	80087ec <prvAddCurrentTaskToDelayedList>
}
 80082ec:	bf00      	nop
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20000afc 	.word	0x20000afc

080082f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10a      	bne.n	8008320 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	617b      	str	r3, [r7, #20]
}
 800831c:	bf00      	nop
 800831e:	e7fe      	b.n	800831e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008320:	4b0a      	ldr	r3, [pc, #40]	; (800834c <vTaskPlaceOnEventListRestricted+0x54>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3318      	adds	r3, #24
 8008326:	4619      	mov	r1, r3
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7fe fe52 	bl	8006fd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008334:	f04f 33ff 	mov.w	r3, #4294967295
 8008338:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	68b8      	ldr	r0, [r7, #8]
 800833e:	f000 fa55 	bl	80087ec <prvAddCurrentTaskToDelayedList>
	}
 8008342:	bf00      	nop
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20000afc 	.word	0x20000afc

08008350 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10a      	bne.n	800837c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	60fb      	str	r3, [r7, #12]
}
 8008378:	bf00      	nop
 800837a:	e7fe      	b.n	800837a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	3318      	adds	r3, #24
 8008380:	4618      	mov	r0, r3
 8008382:	f7fe fe81 	bl	8007088 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008386:	4b1e      	ldr	r3, [pc, #120]	; (8008400 <xTaskRemoveFromEventList+0xb0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d11d      	bne.n	80083ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	3304      	adds	r3, #4
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fe78 	bl	8007088 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839c:	4b19      	ldr	r3, [pc, #100]	; (8008404 <xTaskRemoveFromEventList+0xb4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d903      	bls.n	80083ac <xTaskRemoveFromEventList+0x5c>
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	4a16      	ldr	r2, [pc, #88]	; (8008404 <xTaskRemoveFromEventList+0xb4>)
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4a13      	ldr	r2, [pc, #76]	; (8008408 <xTaskRemoveFromEventList+0xb8>)
 80083ba:	441a      	add	r2, r3
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	3304      	adds	r3, #4
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f7fe fe05 	bl	8006fd2 <vListInsertEnd>
 80083c8:	e005      	b.n	80083d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	3318      	adds	r3, #24
 80083ce:	4619      	mov	r1, r3
 80083d0:	480e      	ldr	r0, [pc, #56]	; (800840c <xTaskRemoveFromEventList+0xbc>)
 80083d2:	f7fe fdfe 	bl	8006fd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083da:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <xTaskRemoveFromEventList+0xc0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d905      	bls.n	80083f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80083e8:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <xTaskRemoveFromEventList+0xc4>)
 80083ea:	2201      	movs	r2, #1
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	e001      	b.n	80083f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80083f0:	2300      	movs	r3, #0
 80083f2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80083f4:	697b      	ldr	r3, [r7, #20]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000ff8 	.word	0x20000ff8
 8008404:	20000fd8 	.word	0x20000fd8
 8008408:	20000b00 	.word	0x20000b00
 800840c:	20000f90 	.word	0x20000f90
 8008410:	20000afc 	.word	0x20000afc
 8008414:	20000fe4 	.word	0x20000fe4

08008418 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008420:	4b06      	ldr	r3, [pc, #24]	; (800843c <vTaskInternalSetTimeOutState+0x24>)
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008428:	4b05      	ldr	r3, [pc, #20]	; (8008440 <vTaskInternalSetTimeOutState+0x28>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	605a      	str	r2, [r3, #4]
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	bc80      	pop	{r7}
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	20000fe8 	.word	0x20000fe8
 8008440:	20000fd4 	.word	0x20000fd4

08008444 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10a      	bne.n	800846a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	613b      	str	r3, [r7, #16]
}
 8008466:	bf00      	nop
 8008468:	e7fe      	b.n	8008468 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	60fb      	str	r3, [r7, #12]
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008486:	f000 fe09 	bl	800909c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800848a:	4b1d      	ldr	r3, [pc, #116]	; (8008500 <xTaskCheckForTimeOut+0xbc>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a2:	d102      	bne.n	80084aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80084a4:	2300      	movs	r3, #0
 80084a6:	61fb      	str	r3, [r7, #28]
 80084a8:	e023      	b.n	80084f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	4b15      	ldr	r3, [pc, #84]	; (8008504 <xTaskCheckForTimeOut+0xc0>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d007      	beq.n	80084c6 <xTaskCheckForTimeOut+0x82>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d302      	bcc.n	80084c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084c0:	2301      	movs	r3, #1
 80084c2:	61fb      	str	r3, [r7, #28]
 80084c4:	e015      	b.n	80084f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d20b      	bcs.n	80084e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	1ad2      	subs	r2, r2, r3
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff ff9b 	bl	8008418 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80084e2:	2300      	movs	r3, #0
 80084e4:	61fb      	str	r3, [r7, #28]
 80084e6:	e004      	b.n	80084f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80084ee:	2301      	movs	r3, #1
 80084f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80084f2:	f000 fe03 	bl	80090fc <vPortExitCritical>

	return xReturn;
 80084f6:	69fb      	ldr	r3, [r7, #28]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3720      	adds	r7, #32
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20000fd4 	.word	0x20000fd4
 8008504:	20000fe8 	.word	0x20000fe8

08008508 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008508:	b480      	push	{r7}
 800850a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800850c:	4b03      	ldr	r3, [pc, #12]	; (800851c <vTaskMissedYield+0x14>)
 800850e:	2201      	movs	r2, #1
 8008510:	601a      	str	r2, [r3, #0]
}
 8008512:	bf00      	nop
 8008514:	46bd      	mov	sp, r7
 8008516:	bc80      	pop	{r7}
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	20000fe4 	.word	0x20000fe4

08008520 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008528:	f000 f852 	bl	80085d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800852c:	4b06      	ldr	r3, [pc, #24]	; (8008548 <prvIdleTask+0x28>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d9f9      	bls.n	8008528 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008534:	4b05      	ldr	r3, [pc, #20]	; (800854c <prvIdleTask+0x2c>)
 8008536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008544:	e7f0      	b.n	8008528 <prvIdleTask+0x8>
 8008546:	bf00      	nop
 8008548:	20000b00 	.word	0x20000b00
 800854c:	e000ed04 	.word	0xe000ed04

08008550 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008556:	2300      	movs	r3, #0
 8008558:	607b      	str	r3, [r7, #4]
 800855a:	e00c      	b.n	8008576 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4a12      	ldr	r2, [pc, #72]	; (80085b0 <prvInitialiseTaskLists+0x60>)
 8008568:	4413      	add	r3, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fd06 	bl	8006f7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3301      	adds	r3, #1
 8008574:	607b      	str	r3, [r7, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b37      	cmp	r3, #55	; 0x37
 800857a:	d9ef      	bls.n	800855c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800857c:	480d      	ldr	r0, [pc, #52]	; (80085b4 <prvInitialiseTaskLists+0x64>)
 800857e:	f7fe fcfd 	bl	8006f7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008582:	480d      	ldr	r0, [pc, #52]	; (80085b8 <prvInitialiseTaskLists+0x68>)
 8008584:	f7fe fcfa 	bl	8006f7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008588:	480c      	ldr	r0, [pc, #48]	; (80085bc <prvInitialiseTaskLists+0x6c>)
 800858a:	f7fe fcf7 	bl	8006f7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800858e:	480c      	ldr	r0, [pc, #48]	; (80085c0 <prvInitialiseTaskLists+0x70>)
 8008590:	f7fe fcf4 	bl	8006f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008594:	480b      	ldr	r0, [pc, #44]	; (80085c4 <prvInitialiseTaskLists+0x74>)
 8008596:	f7fe fcf1 	bl	8006f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800859a:	4b0b      	ldr	r3, [pc, #44]	; (80085c8 <prvInitialiseTaskLists+0x78>)
 800859c:	4a05      	ldr	r2, [pc, #20]	; (80085b4 <prvInitialiseTaskLists+0x64>)
 800859e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085a0:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <prvInitialiseTaskLists+0x7c>)
 80085a2:	4a05      	ldr	r2, [pc, #20]	; (80085b8 <prvInitialiseTaskLists+0x68>)
 80085a4:	601a      	str	r2, [r3, #0]
}
 80085a6:	bf00      	nop
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000b00 	.word	0x20000b00
 80085b4:	20000f60 	.word	0x20000f60
 80085b8:	20000f74 	.word	0x20000f74
 80085bc:	20000f90 	.word	0x20000f90
 80085c0:	20000fa4 	.word	0x20000fa4
 80085c4:	20000fbc 	.word	0x20000fbc
 80085c8:	20000f88 	.word	0x20000f88
 80085cc:	20000f8c 	.word	0x20000f8c

080085d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085d6:	e019      	b.n	800860c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80085d8:	f000 fd60 	bl	800909c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80085dc:	4b10      	ldr	r3, [pc, #64]	; (8008620 <prvCheckTasksWaitingTermination+0x50>)
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3304      	adds	r3, #4
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fe fd4d 	bl	8007088 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80085ee:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <prvCheckTasksWaitingTermination+0x54>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	4a0b      	ldr	r2, [pc, #44]	; (8008624 <prvCheckTasksWaitingTermination+0x54>)
 80085f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80085f8:	4b0b      	ldr	r3, [pc, #44]	; (8008628 <prvCheckTasksWaitingTermination+0x58>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	4a0a      	ldr	r2, [pc, #40]	; (8008628 <prvCheckTasksWaitingTermination+0x58>)
 8008600:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008602:	f000 fd7b 	bl	80090fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f810 	bl	800862c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800860c:	4b06      	ldr	r3, [pc, #24]	; (8008628 <prvCheckTasksWaitingTermination+0x58>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e1      	bne.n	80085d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000fa4 	.word	0x20000fa4
 8008624:	20000fd0 	.word	0x20000fd0
 8008628:	20000fb8 	.word	0x20000fb8

0800862c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800863a:	2b00      	cmp	r3, #0
 800863c:	d108      	bne.n	8008650 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008642:	4618      	mov	r0, r3
 8008644:	f000 feee 	bl	8009424 <vPortFree>
				vPortFree( pxTCB );
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 feeb 	bl	8009424 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800864e:	e018      	b.n	8008682 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008656:	2b01      	cmp	r3, #1
 8008658:	d103      	bne.n	8008662 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fee2 	bl	8009424 <vPortFree>
	}
 8008660:	e00f      	b.n	8008682 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008668:	2b02      	cmp	r3, #2
 800866a:	d00a      	beq.n	8008682 <prvDeleteTCB+0x56>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	60fb      	str	r3, [r7, #12]
}
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <prvDeleteTCB+0x54>
	}
 8008682:	bf00      	nop
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008692:	4b0e      	ldr	r3, [pc, #56]	; (80086cc <prvResetNextTaskUnblockTime+0x40>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <prvResetNextTaskUnblockTime+0x14>
 800869c:	2301      	movs	r3, #1
 800869e:	e000      	b.n	80086a2 <prvResetNextTaskUnblockTime+0x16>
 80086a0:	2300      	movs	r3, #0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086a6:	4b0a      	ldr	r3, [pc, #40]	; (80086d0 <prvResetNextTaskUnblockTime+0x44>)
 80086a8:	f04f 32ff 	mov.w	r2, #4294967295
 80086ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086ae:	e008      	b.n	80086c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086b0:	4b06      	ldr	r3, [pc, #24]	; (80086cc <prvResetNextTaskUnblockTime+0x40>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	4a04      	ldr	r2, [pc, #16]	; (80086d0 <prvResetNextTaskUnblockTime+0x44>)
 80086c0:	6013      	str	r3, [r2, #0]
}
 80086c2:	bf00      	nop
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bc80      	pop	{r7}
 80086ca:	4770      	bx	lr
 80086cc:	20000f88 	.word	0x20000f88
 80086d0:	20000ff0 	.word	0x20000ff0

080086d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80086da:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <xTaskGetSchedulerState+0x34>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d102      	bne.n	80086e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80086e2:	2301      	movs	r3, #1
 80086e4:	607b      	str	r3, [r7, #4]
 80086e6:	e008      	b.n	80086fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086e8:	4b08      	ldr	r3, [pc, #32]	; (800870c <xTaskGetSchedulerState+0x38>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80086f0:	2302      	movs	r3, #2
 80086f2:	607b      	str	r3, [r7, #4]
 80086f4:	e001      	b.n	80086fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80086f6:	2300      	movs	r3, #0
 80086f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80086fa:	687b      	ldr	r3, [r7, #4]
	}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	bc80      	pop	{r7}
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	20000fdc 	.word	0x20000fdc
 800870c:	20000ff8 	.word	0x20000ff8

08008710 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800871c:	2300      	movs	r3, #0
 800871e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d056      	beq.n	80087d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008726:	4b2e      	ldr	r3, [pc, #184]	; (80087e0 <xTaskPriorityDisinherit+0xd0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	429a      	cmp	r2, r3
 800872e:	d00a      	beq.n	8008746 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	60fb      	str	r3, [r7, #12]
}
 8008742:	bf00      	nop
 8008744:	e7fe      	b.n	8008744 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10a      	bne.n	8008764 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	60bb      	str	r3, [r7, #8]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008768:	1e5a      	subs	r2, r3, #1
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008776:	429a      	cmp	r2, r3
 8008778:	d02c      	beq.n	80087d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800877e:	2b00      	cmp	r3, #0
 8008780:	d128      	bne.n	80087d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	3304      	adds	r3, #4
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe fc7e 	bl	8007088 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a4:	4b0f      	ldr	r3, [pc, #60]	; (80087e4 <xTaskPriorityDisinherit+0xd4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d903      	bls.n	80087b4 <xTaskPriorityDisinherit+0xa4>
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	4a0c      	ldr	r2, [pc, #48]	; (80087e4 <xTaskPriorityDisinherit+0xd4>)
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4a09      	ldr	r2, [pc, #36]	; (80087e8 <xTaskPriorityDisinherit+0xd8>)
 80087c2:	441a      	add	r2, r3
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	3304      	adds	r3, #4
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f7fe fc01 	bl	8006fd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087d0:	2301      	movs	r3, #1
 80087d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087d4:	697b      	ldr	r3, [r7, #20]
	}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20000afc 	.word	0x20000afc
 80087e4:	20000fd8 	.word	0x20000fd8
 80087e8:	20000b00 	.word	0x20000b00

080087ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087f6:	4b21      	ldr	r3, [pc, #132]	; (800887c <prvAddCurrentTaskToDelayedList+0x90>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087fc:	4b20      	ldr	r3, [pc, #128]	; (8008880 <prvAddCurrentTaskToDelayedList+0x94>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3304      	adds	r3, #4
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fc40 	bl	8007088 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d10a      	bne.n	8008826 <prvAddCurrentTaskToDelayedList+0x3a>
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d007      	beq.n	8008826 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008816:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <prvAddCurrentTaskToDelayedList+0x94>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3304      	adds	r3, #4
 800881c:	4619      	mov	r1, r3
 800881e:	4819      	ldr	r0, [pc, #100]	; (8008884 <prvAddCurrentTaskToDelayedList+0x98>)
 8008820:	f7fe fbd7 	bl	8006fd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008824:	e026      	b.n	8008874 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4413      	add	r3, r2
 800882c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800882e:	4b14      	ldr	r3, [pc, #80]	; (8008880 <prvAddCurrentTaskToDelayedList+0x94>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	429a      	cmp	r2, r3
 800883c:	d209      	bcs.n	8008852 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800883e:	4b12      	ldr	r3, [pc, #72]	; (8008888 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	4b0f      	ldr	r3, [pc, #60]	; (8008880 <prvAddCurrentTaskToDelayedList+0x94>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3304      	adds	r3, #4
 8008848:	4619      	mov	r1, r3
 800884a:	4610      	mov	r0, r2
 800884c:	f7fe fbe4 	bl	8007018 <vListInsert>
}
 8008850:	e010      	b.n	8008874 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008852:	4b0e      	ldr	r3, [pc, #56]	; (800888c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	4b0a      	ldr	r3, [pc, #40]	; (8008880 <prvAddCurrentTaskToDelayedList+0x94>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3304      	adds	r3, #4
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f7fe fbda 	bl	8007018 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008864:	4b0a      	ldr	r3, [pc, #40]	; (8008890 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	429a      	cmp	r2, r3
 800886c:	d202      	bcs.n	8008874 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800886e:	4a08      	ldr	r2, [pc, #32]	; (8008890 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	6013      	str	r3, [r2, #0]
}
 8008874:	bf00      	nop
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20000fd4 	.word	0x20000fd4
 8008880:	20000afc 	.word	0x20000afc
 8008884:	20000fbc 	.word	0x20000fbc
 8008888:	20000f8c 	.word	0x20000f8c
 800888c:	20000f88 	.word	0x20000f88
 8008890:	20000ff0 	.word	0x20000ff0

08008894 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b08a      	sub	sp, #40	; 0x28
 8008898:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800889e:	f000 facb 	bl	8008e38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088a2:	4b1c      	ldr	r3, [pc, #112]	; (8008914 <xTimerCreateTimerTask+0x80>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d021      	beq.n	80088ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088ae:	2300      	movs	r3, #0
 80088b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088b2:	1d3a      	adds	r2, r7, #4
 80088b4:	f107 0108 	add.w	r1, r7, #8
 80088b8:	f107 030c 	add.w	r3, r7, #12
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fb43 	bl	8006f48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	9202      	str	r2, [sp, #8]
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	2302      	movs	r3, #2
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	2300      	movs	r3, #0
 80088d2:	460a      	mov	r2, r1
 80088d4:	4910      	ldr	r1, [pc, #64]	; (8008918 <xTimerCreateTimerTask+0x84>)
 80088d6:	4811      	ldr	r0, [pc, #68]	; (800891c <xTimerCreateTimerTask+0x88>)
 80088d8:	f7ff f8e4 	bl	8007aa4 <xTaskCreateStatic>
 80088dc:	4603      	mov	r3, r0
 80088de:	4a10      	ldr	r2, [pc, #64]	; (8008920 <xTimerCreateTimerTask+0x8c>)
 80088e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088e2:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <xTimerCreateTimerTask+0x8c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80088ea:	2301      	movs	r3, #1
 80088ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10a      	bne.n	800890a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	613b      	str	r3, [r7, #16]
}
 8008906:	bf00      	nop
 8008908:	e7fe      	b.n	8008908 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800890a:	697b      	ldr	r3, [r7, #20]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	2000102c 	.word	0x2000102c
 8008918:	0800e008 	.word	0x0800e008
 800891c:	08008a41 	.word	0x08008a41
 8008920:	20001030 	.word	0x20001030

08008924 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08a      	sub	sp, #40	; 0x28
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008932:	2300      	movs	r3, #0
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10a      	bne.n	8008952 <xTimerGenericCommand+0x2e>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	623b      	str	r3, [r7, #32]
}
 800894e:	bf00      	nop
 8008950:	e7fe      	b.n	8008950 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008952:	4b1a      	ldr	r3, [pc, #104]	; (80089bc <xTimerGenericCommand+0x98>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d02a      	beq.n	80089b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b05      	cmp	r3, #5
 800896a:	dc18      	bgt.n	800899e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800896c:	f7ff feb2 	bl	80086d4 <xTaskGetSchedulerState>
 8008970:	4603      	mov	r3, r0
 8008972:	2b02      	cmp	r3, #2
 8008974:	d109      	bne.n	800898a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008976:	4b11      	ldr	r3, [pc, #68]	; (80089bc <xTimerGenericCommand+0x98>)
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	f107 0110 	add.w	r1, r7, #16
 800897e:	2300      	movs	r3, #0
 8008980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008982:	f7fe fcad 	bl	80072e0 <xQueueGenericSend>
 8008986:	6278      	str	r0, [r7, #36]	; 0x24
 8008988:	e012      	b.n	80089b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800898a:	4b0c      	ldr	r3, [pc, #48]	; (80089bc <xTimerGenericCommand+0x98>)
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	f107 0110 	add.w	r1, r7, #16
 8008992:	2300      	movs	r3, #0
 8008994:	2200      	movs	r2, #0
 8008996:	f7fe fca3 	bl	80072e0 <xQueueGenericSend>
 800899a:	6278      	str	r0, [r7, #36]	; 0x24
 800899c:	e008      	b.n	80089b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800899e:	4b07      	ldr	r3, [pc, #28]	; (80089bc <xTimerGenericCommand+0x98>)
 80089a0:	6818      	ldr	r0, [r3, #0]
 80089a2:	f107 0110 	add.w	r1, r7, #16
 80089a6:	2300      	movs	r3, #0
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	f7fe fd97 	bl	80074dc <xQueueGenericSendFromISR>
 80089ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3728      	adds	r7, #40	; 0x28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	2000102c 	.word	0x2000102c

080089c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089ca:	4b1c      	ldr	r3, [pc, #112]	; (8008a3c <prvProcessExpiredTimer+0x7c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	3304      	adds	r3, #4
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fe fb55 	bl	8007088 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d122      	bne.n	8008a2c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	699a      	ldr	r2, [r3, #24]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	18d1      	adds	r1, r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	6978      	ldr	r0, [r7, #20]
 80089f4:	f000 f8c8 	bl	8008b88 <prvInsertTimerInActiveList>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d016      	beq.n	8008a2c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089fe:	2300      	movs	r3, #0
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	2300      	movs	r3, #0
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	2100      	movs	r1, #0
 8008a08:	6978      	ldr	r0, [r7, #20]
 8008a0a:	f7ff ff8b 	bl	8008924 <xTimerGenericCommand>
 8008a0e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10a      	bne.n	8008a2c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	60fb      	str	r3, [r7, #12]
}
 8008a28:	bf00      	nop
 8008a2a:	e7fe      	b.n	8008a2a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	6978      	ldr	r0, [r7, #20]
 8008a32:	4798      	blx	r3
}
 8008a34:	bf00      	nop
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20001024 	.word	0x20001024

08008a40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a48:	f107 0308 	add.w	r3, r7, #8
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 f857 	bl	8008b00 <prvGetNextExpireTime>
 8008a52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	4619      	mov	r1, r3
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 f803 	bl	8008a64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a5e:	f000 f8d5 	bl	8008c0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a62:	e7f1      	b.n	8008a48 <prvTimerTask+0x8>

08008a64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a6e:	f7ff fa4b 	bl	8007f08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a72:	f107 0308 	add.w	r3, r7, #8
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 f866 	bl	8008b48 <prvSampleTimeNow>
 8008a7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d130      	bne.n	8008ae6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10a      	bne.n	8008aa0 <prvProcessTimerOrBlockTask+0x3c>
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d806      	bhi.n	8008aa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a92:	f7ff fa47 	bl	8007f24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a96:	68f9      	ldr	r1, [r7, #12]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff ff91 	bl	80089c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a9e:	e024      	b.n	8008aea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d008      	beq.n	8008ab8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008aa6:	4b13      	ldr	r3, [pc, #76]	; (8008af4 <prvProcessTimerOrBlockTask+0x90>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	bf0c      	ite	eq
 8008ab0:	2301      	moveq	r3, #1
 8008ab2:	2300      	movne	r3, #0
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ab8:	4b0f      	ldr	r3, [pc, #60]	; (8008af8 <prvProcessTimerOrBlockTask+0x94>)
 8008aba:	6818      	ldr	r0, [r3, #0]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	f7fe ffb9 	bl	8007a3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008aca:	f7ff fa2b 	bl	8007f24 <xTaskResumeAll>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10a      	bne.n	8008aea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ad4:	4b09      	ldr	r3, [pc, #36]	; (8008afc <prvProcessTimerOrBlockTask+0x98>)
 8008ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	f3bf 8f6f 	isb	sy
}
 8008ae4:	e001      	b.n	8008aea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ae6:	f7ff fa1d 	bl	8007f24 <xTaskResumeAll>
}
 8008aea:	bf00      	nop
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20001028 	.word	0x20001028
 8008af8:	2000102c 	.word	0x2000102c
 8008afc:	e000ed04 	.word	0xe000ed04

08008b00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b08:	4b0e      	ldr	r3, [pc, #56]	; (8008b44 <prvGetNextExpireTime+0x44>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	bf0c      	ite	eq
 8008b12:	2301      	moveq	r3, #1
 8008b14:	2300      	movne	r3, #0
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	461a      	mov	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d105      	bne.n	8008b32 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b26:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <prvGetNextExpireTime+0x44>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	e001      	b.n	8008b36 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b36:	68fb      	ldr	r3, [r7, #12]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20001024 	.word	0x20001024

08008b48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b50:	f7ff fa86 	bl	8008060 <xTaskGetTickCount>
 8008b54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <prvSampleTimeNow+0x3c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d205      	bcs.n	8008b6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b60:	f000 f908 	bl	8008d74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	e002      	b.n	8008b72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b72:	4a04      	ldr	r2, [pc, #16]	; (8008b84 <prvSampleTimeNow+0x3c>)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b78:	68fb      	ldr	r3, [r7, #12]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20001034 	.word	0x20001034

08008b88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b96:	2300      	movs	r3, #0
 8008b98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d812      	bhi.n	8008bd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d302      	bcc.n	8008bc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	e01b      	b.n	8008bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008bc2:	4b10      	ldr	r3, [pc, #64]	; (8008c04 <prvInsertTimerInActiveList+0x7c>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3304      	adds	r3, #4
 8008bca:	4619      	mov	r1, r3
 8008bcc:	4610      	mov	r0, r2
 8008bce:	f7fe fa23 	bl	8007018 <vListInsert>
 8008bd2:	e012      	b.n	8008bfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d206      	bcs.n	8008bea <prvInsertTimerInActiveList+0x62>
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d302      	bcc.n	8008bea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	617b      	str	r3, [r7, #20]
 8008be8:	e007      	b.n	8008bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bea:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <prvInsertTimerInActiveList+0x80>)
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	f7fe fa0f 	bl	8007018 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008bfa:	697b      	ldr	r3, [r7, #20]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	20001028 	.word	0x20001028
 8008c08:	20001024 	.word	0x20001024

08008c0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08e      	sub	sp, #56	; 0x38
 8008c10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c12:	e09d      	b.n	8008d50 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	da18      	bge.n	8008c4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c1a:	1d3b      	adds	r3, r7, #4
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10a      	bne.n	8008c3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	61fb      	str	r3, [r7, #28]
}
 8008c38:	bf00      	nop
 8008c3a:	e7fe      	b.n	8008c3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c42:	6850      	ldr	r0, [r2, #4]
 8008c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c46:	6892      	ldr	r2, [r2, #8]
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	db7e      	blt.n	8008d50 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d004      	beq.n	8008c68 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	3304      	adds	r3, #4
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fa10 	bl	8007088 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c68:	463b      	mov	r3, r7
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff ff6c 	bl	8008b48 <prvSampleTimeNow>
 8008c70:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b09      	cmp	r3, #9
 8008c76:	d86a      	bhi.n	8008d4e <prvProcessReceivedCommands+0x142>
 8008c78:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <prvProcessReceivedCommands+0x74>)
 8008c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7e:	bf00      	nop
 8008c80:	08008ca9 	.word	0x08008ca9
 8008c84:	08008ca9 	.word	0x08008ca9
 8008c88:	08008ca9 	.word	0x08008ca9
 8008c8c:	08008d51 	.word	0x08008d51
 8008c90:	08008d05 	.word	0x08008d05
 8008c94:	08008d3d 	.word	0x08008d3d
 8008c98:	08008ca9 	.word	0x08008ca9
 8008c9c:	08008ca9 	.word	0x08008ca9
 8008ca0:	08008d51 	.word	0x08008d51
 8008ca4:	08008d05 	.word	0x08008d05
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	18d1      	adds	r1, r2, r3
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cb6:	f7ff ff67 	bl	8008b88 <prvInsertTimerInActiveList>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d047      	beq.n	8008d50 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cc6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d13f      	bne.n	8008d50 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	441a      	add	r2, r3
 8008cd8:	2300      	movs	r3, #0
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	2100      	movs	r1, #0
 8008ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ce2:	f7ff fe1f 	bl	8008924 <xTimerGenericCommand>
 8008ce6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d130      	bne.n	8008d50 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	61bb      	str	r3, [r7, #24]
}
 8008d00:	bf00      	nop
 8008d02:	e7fe      	b.n	8008d02 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	617b      	str	r3, [r7, #20]
}
 8008d24:	bf00      	nop
 8008d26:	e7fe      	b.n	8008d26 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	699a      	ldr	r2, [r3, #24]
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	18d1      	adds	r1, r2, r3
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d36:	f7ff ff27 	bl	8008b88 <prvInsertTimerInActiveList>
					break;
 8008d3a:	e009      	b.n	8008d50 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d104      	bne.n	8008d50 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d48:	f000 fb6c 	bl	8009424 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d4c:	e000      	b.n	8008d50 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8008d4e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <prvProcessReceivedCommands+0x164>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	1d39      	adds	r1, r7, #4
 8008d56:	2200      	movs	r2, #0
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe fc57 	bl	800760c <xQueueReceive>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f47f af57 	bne.w	8008c14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008d66:	bf00      	nop
 8008d68:	bf00      	nop
 8008d6a:	3730      	adds	r7, #48	; 0x30
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	2000102c 	.word	0x2000102c

08008d74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d7a:	e045      	b.n	8008e08 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d7c:	4b2c      	ldr	r3, [pc, #176]	; (8008e30 <prvSwitchTimerLists+0xbc>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d86:	4b2a      	ldr	r3, [pc, #168]	; (8008e30 <prvSwitchTimerLists+0xbc>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe f977 	bl	8007088 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d12e      	bne.n	8008e08 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	4413      	add	r3, r2
 8008db2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d90e      	bls.n	8008dda <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dc8:	4b19      	ldr	r3, [pc, #100]	; (8008e30 <prvSwitchTimerLists+0xbc>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f7fe f920 	bl	8007018 <vListInsert>
 8008dd8:	e016      	b.n	8008e08 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dda:	2300      	movs	r3, #0
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	2300      	movs	r3, #0
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	2100      	movs	r1, #0
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f7ff fd9d 	bl	8008924 <xTimerGenericCommand>
 8008dea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10a      	bne.n	8008e08 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	603b      	str	r3, [r7, #0]
}
 8008e04:	bf00      	nop
 8008e06:	e7fe      	b.n	8008e06 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e08:	4b09      	ldr	r3, [pc, #36]	; (8008e30 <prvSwitchTimerLists+0xbc>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1b4      	bne.n	8008d7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e12:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <prvSwitchTimerLists+0xbc>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e18:	4b06      	ldr	r3, [pc, #24]	; (8008e34 <prvSwitchTimerLists+0xc0>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a04      	ldr	r2, [pc, #16]	; (8008e30 <prvSwitchTimerLists+0xbc>)
 8008e1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e20:	4a04      	ldr	r2, [pc, #16]	; (8008e34 <prvSwitchTimerLists+0xc0>)
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	6013      	str	r3, [r2, #0]
}
 8008e26:	bf00      	nop
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20001024 	.word	0x20001024
 8008e34:	20001028 	.word	0x20001028

08008e38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e3e:	f000 f92d 	bl	800909c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e42:	4b15      	ldr	r3, [pc, #84]	; (8008e98 <prvCheckForValidListAndQueue+0x60>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d120      	bne.n	8008e8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e4a:	4814      	ldr	r0, [pc, #80]	; (8008e9c <prvCheckForValidListAndQueue+0x64>)
 8008e4c:	f7fe f896 	bl	8006f7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e50:	4813      	ldr	r0, [pc, #76]	; (8008ea0 <prvCheckForValidListAndQueue+0x68>)
 8008e52:	f7fe f893 	bl	8006f7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e56:	4b13      	ldr	r3, [pc, #76]	; (8008ea4 <prvCheckForValidListAndQueue+0x6c>)
 8008e58:	4a10      	ldr	r2, [pc, #64]	; (8008e9c <prvCheckForValidListAndQueue+0x64>)
 8008e5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e5c:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <prvCheckForValidListAndQueue+0x70>)
 8008e5e:	4a10      	ldr	r2, [pc, #64]	; (8008ea0 <prvCheckForValidListAndQueue+0x68>)
 8008e60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e62:	2300      	movs	r3, #0
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	4b11      	ldr	r3, [pc, #68]	; (8008eac <prvCheckForValidListAndQueue+0x74>)
 8008e68:	4a11      	ldr	r2, [pc, #68]	; (8008eb0 <prvCheckForValidListAndQueue+0x78>)
 8008e6a:	2110      	movs	r1, #16
 8008e6c:	200a      	movs	r0, #10
 8008e6e:	f7fe f99d 	bl	80071ac <xQueueGenericCreateStatic>
 8008e72:	4603      	mov	r3, r0
 8008e74:	4a08      	ldr	r2, [pc, #32]	; (8008e98 <prvCheckForValidListAndQueue+0x60>)
 8008e76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e78:	4b07      	ldr	r3, [pc, #28]	; (8008e98 <prvCheckForValidListAndQueue+0x60>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e80:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <prvCheckForValidListAndQueue+0x60>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	490b      	ldr	r1, [pc, #44]	; (8008eb4 <prvCheckForValidListAndQueue+0x7c>)
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe fdb0 	bl	80079ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e8c:	f000 f936 	bl	80090fc <vPortExitCritical>
}
 8008e90:	bf00      	nop
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	2000102c 	.word	0x2000102c
 8008e9c:	20000ffc 	.word	0x20000ffc
 8008ea0:	20001010 	.word	0x20001010
 8008ea4:	20001024 	.word	0x20001024
 8008ea8:	20001028 	.word	0x20001028
 8008eac:	200010d8 	.word	0x200010d8
 8008eb0:	20001038 	.word	0x20001038
 8008eb4:	0800e010 	.word	0x0800e010

08008eb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3b04      	subs	r3, #4
 8008ec8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3b04      	subs	r3, #4
 8008ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f023 0201 	bic.w	r2, r3, #1
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3b04      	subs	r3, #4
 8008ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ee8:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <pxPortInitialiseStack+0x54>)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3b14      	subs	r3, #20
 8008ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3b20      	subs	r3, #32
 8008efe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f00:	68fb      	ldr	r3, [r7, #12]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bc80      	pop	{r7}
 8008f0a:	4770      	bx	lr
 8008f0c:	08008f11 	.word	0x08008f11

08008f10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f1a:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <prvTaskExitError+0x54>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f22:	d00a      	beq.n	8008f3a <prvTaskExitError+0x2a>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	60fb      	str	r3, [r7, #12]
}
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <prvTaskExitError+0x28>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	60bb      	str	r3, [r7, #8]
}
 8008f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f4e:	bf00      	nop
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0fc      	beq.n	8008f50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f56:	bf00      	nop
 8008f58:	bf00      	nop
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	2000000c 	.word	0x2000000c
	...

08008f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f70:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <pxCurrentTCBConst2>)
 8008f72:	6819      	ldr	r1, [r3, #0]
 8008f74:	6808      	ldr	r0, [r1, #0]
 8008f76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008f7a:	f380 8809 	msr	PSP, r0
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f04f 0000 	mov.w	r0, #0
 8008f86:	f380 8811 	msr	BASEPRI, r0
 8008f8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008f8e:	4770      	bx	lr

08008f90 <pxCurrentTCBConst2>:
 8008f90:	20000afc 	.word	0x20000afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop

08008f98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008f98:	4806      	ldr	r0, [pc, #24]	; (8008fb4 <prvPortStartFirstTask+0x1c>)
 8008f9a:	6800      	ldr	r0, [r0, #0]
 8008f9c:	6800      	ldr	r0, [r0, #0]
 8008f9e:	f380 8808 	msr	MSP, r0
 8008fa2:	b662      	cpsie	i
 8008fa4:	b661      	cpsie	f
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	df00      	svc	0
 8008fb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008fb2:	bf00      	nop
 8008fb4:	e000ed08 	.word	0xe000ed08

08008fb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008fbe:	4b32      	ldr	r3, [pc, #200]	; (8009088 <xPortStartScheduler+0xd0>)
 8008fc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	22ff      	movs	r2, #255	; 0xff
 8008fce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fd8:	78fb      	ldrb	r3, [r7, #3]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	4b2a      	ldr	r3, [pc, #168]	; (800908c <xPortStartScheduler+0xd4>)
 8008fe4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fe6:	4b2a      	ldr	r3, [pc, #168]	; (8009090 <xPortStartScheduler+0xd8>)
 8008fe8:	2207      	movs	r2, #7
 8008fea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fec:	e009      	b.n	8009002 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008fee:	4b28      	ldr	r3, [pc, #160]	; (8009090 <xPortStartScheduler+0xd8>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	4a26      	ldr	r2, [pc, #152]	; (8009090 <xPortStartScheduler+0xd8>)
 8008ff6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009002:	78fb      	ldrb	r3, [r7, #3]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800900a:	2b80      	cmp	r3, #128	; 0x80
 800900c:	d0ef      	beq.n	8008fee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800900e:	4b20      	ldr	r3, [pc, #128]	; (8009090 <xPortStartScheduler+0xd8>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f1c3 0307 	rsb	r3, r3, #7
 8009016:	2b04      	cmp	r3, #4
 8009018:	d00a      	beq.n	8009030 <xPortStartScheduler+0x78>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	60bb      	str	r3, [r7, #8]
}
 800902c:	bf00      	nop
 800902e:	e7fe      	b.n	800902e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009030:	4b17      	ldr	r3, [pc, #92]	; (8009090 <xPortStartScheduler+0xd8>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	4a16      	ldr	r2, [pc, #88]	; (8009090 <xPortStartScheduler+0xd8>)
 8009038:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800903a:	4b15      	ldr	r3, [pc, #84]	; (8009090 <xPortStartScheduler+0xd8>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009042:	4a13      	ldr	r2, [pc, #76]	; (8009090 <xPortStartScheduler+0xd8>)
 8009044:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	b2da      	uxtb	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800904e:	4b11      	ldr	r3, [pc, #68]	; (8009094 <xPortStartScheduler+0xdc>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a10      	ldr	r2, [pc, #64]	; (8009094 <xPortStartScheduler+0xdc>)
 8009054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009058:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800905a:	4b0e      	ldr	r3, [pc, #56]	; (8009094 <xPortStartScheduler+0xdc>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a0d      	ldr	r2, [pc, #52]	; (8009094 <xPortStartScheduler+0xdc>)
 8009060:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009064:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009066:	f000 f8b9 	bl	80091dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800906a:	4b0b      	ldr	r3, [pc, #44]	; (8009098 <xPortStartScheduler+0xe0>)
 800906c:	2200      	movs	r2, #0
 800906e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009070:	f7ff ff92 	bl	8008f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009074:	f7ff f8c0 	bl	80081f8 <vTaskSwitchContext>
	prvTaskExitError();
 8009078:	f7ff ff4a 	bl	8008f10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	e000e400 	.word	0xe000e400
 800908c:	20001128 	.word	0x20001128
 8009090:	2000112c 	.word	0x2000112c
 8009094:	e000ed20 	.word	0xe000ed20
 8009098:	2000000c 	.word	0x2000000c

0800909c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	607b      	str	r3, [r7, #4]
}
 80090b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090b6:	4b0f      	ldr	r3, [pc, #60]	; (80090f4 <vPortEnterCritical+0x58>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3301      	adds	r3, #1
 80090bc:	4a0d      	ldr	r2, [pc, #52]	; (80090f4 <vPortEnterCritical+0x58>)
 80090be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090c0:	4b0c      	ldr	r3, [pc, #48]	; (80090f4 <vPortEnterCritical+0x58>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d10f      	bne.n	80090e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090c8:	4b0b      	ldr	r3, [pc, #44]	; (80090f8 <vPortEnterCritical+0x5c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	603b      	str	r3, [r7, #0]
}
 80090e4:	bf00      	nop
 80090e6:	e7fe      	b.n	80090e6 <vPortEnterCritical+0x4a>
	}
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bc80      	pop	{r7}
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	2000000c 	.word	0x2000000c
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009102:	4b11      	ldr	r3, [pc, #68]	; (8009148 <vPortExitCritical+0x4c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10a      	bne.n	8009120 <vPortExitCritical+0x24>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	607b      	str	r3, [r7, #4]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009120:	4b09      	ldr	r3, [pc, #36]	; (8009148 <vPortExitCritical+0x4c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3b01      	subs	r3, #1
 8009126:	4a08      	ldr	r2, [pc, #32]	; (8009148 <vPortExitCritical+0x4c>)
 8009128:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800912a:	4b07      	ldr	r3, [pc, #28]	; (8009148 <vPortExitCritical+0x4c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d105      	bne.n	800913e <vPortExitCritical+0x42>
 8009132:	2300      	movs	r3, #0
 8009134:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	f383 8811 	msr	BASEPRI, r3
}
 800913c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800913e:	bf00      	nop
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	bc80      	pop	{r7}
 8009146:	4770      	bx	lr
 8009148:	2000000c 	.word	0x2000000c
 800914c:	00000000 	.word	0x00000000

08009150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009150:	f3ef 8009 	mrs	r0, PSP
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <pxCurrentTCBConst>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009160:	6010      	str	r0, [r2, #0]
 8009162:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009166:	f04f 0050 	mov.w	r0, #80	; 0x50
 800916a:	f380 8811 	msr	BASEPRI, r0
 800916e:	f7ff f843 	bl	80081f8 <vTaskSwitchContext>
 8009172:	f04f 0000 	mov.w	r0, #0
 8009176:	f380 8811 	msr	BASEPRI, r0
 800917a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800917e:	6819      	ldr	r1, [r3, #0]
 8009180:	6808      	ldr	r0, [r1, #0]
 8009182:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009186:	f380 8809 	msr	PSP, r0
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	4770      	bx	lr

08009190 <pxCurrentTCBConst>:
 8009190:	20000afc 	.word	0x20000afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop

08009198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	607b      	str	r3, [r7, #4]
}
 80091b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091b2:	f7fe ff63 	bl	800807c <xTaskIncrementTick>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <SysTick_Handler+0x40>)
 80091be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	2300      	movs	r3, #0
 80091c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	f383 8811 	msr	BASEPRI, r3
}
 80091ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	e000ed04 	.word	0xe000ed04

080091dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091e0:	4b0a      	ldr	r3, [pc, #40]	; (800920c <vPortSetupTimerInterrupt+0x30>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091e6:	4b0a      	ldr	r3, [pc, #40]	; (8009210 <vPortSetupTimerInterrupt+0x34>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091ec:	4b09      	ldr	r3, [pc, #36]	; (8009214 <vPortSetupTimerInterrupt+0x38>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a09      	ldr	r2, [pc, #36]	; (8009218 <vPortSetupTimerInterrupt+0x3c>)
 80091f2:	fba2 2303 	umull	r2, r3, r2, r3
 80091f6:	099b      	lsrs	r3, r3, #6
 80091f8:	4a08      	ldr	r2, [pc, #32]	; (800921c <vPortSetupTimerInterrupt+0x40>)
 80091fa:	3b01      	subs	r3, #1
 80091fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091fe:	4b03      	ldr	r3, [pc, #12]	; (800920c <vPortSetupTimerInterrupt+0x30>)
 8009200:	2207      	movs	r2, #7
 8009202:	601a      	str	r2, [r3, #0]
}
 8009204:	bf00      	nop
 8009206:	46bd      	mov	sp, r7
 8009208:	bc80      	pop	{r7}
 800920a:	4770      	bx	lr
 800920c:	e000e010 	.word	0xe000e010
 8009210:	e000e018 	.word	0xe000e018
 8009214:	20000000 	.word	0x20000000
 8009218:	10624dd3 	.word	0x10624dd3
 800921c:	e000e014 	.word	0xe000e014

08009220 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009226:	f3ef 8305 	mrs	r3, IPSR
 800922a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b0f      	cmp	r3, #15
 8009230:	d914      	bls.n	800925c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009232:	4a16      	ldr	r2, [pc, #88]	; (800928c <vPortValidateInterruptPriority+0x6c>)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800923c:	4b14      	ldr	r3, [pc, #80]	; (8009290 <vPortValidateInterruptPriority+0x70>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	7afa      	ldrb	r2, [r7, #11]
 8009242:	429a      	cmp	r2, r3
 8009244:	d20a      	bcs.n	800925c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	607b      	str	r3, [r7, #4]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800925c:	4b0d      	ldr	r3, [pc, #52]	; (8009294 <vPortValidateInterruptPriority+0x74>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009264:	4b0c      	ldr	r3, [pc, #48]	; (8009298 <vPortValidateInterruptPriority+0x78>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	429a      	cmp	r2, r3
 800926a:	d90a      	bls.n	8009282 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	603b      	str	r3, [r7, #0]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <vPortValidateInterruptPriority+0x60>
	}
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	bc80      	pop	{r7}
 800928a:	4770      	bx	lr
 800928c:	e000e3f0 	.word	0xe000e3f0
 8009290:	20001128 	.word	0x20001128
 8009294:	e000ed0c 	.word	0xe000ed0c
 8009298:	2000112c 	.word	0x2000112c

0800929c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b08a      	sub	sp, #40	; 0x28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092a8:	f7fe fe2e 	bl	8007f08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092ac:	4b58      	ldr	r3, [pc, #352]	; (8009410 <pvPortMalloc+0x174>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092b4:	f000 f910 	bl	80094d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092b8:	4b56      	ldr	r3, [pc, #344]	; (8009414 <pvPortMalloc+0x178>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4013      	ands	r3, r2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f040 808e 	bne.w	80093e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d01d      	beq.n	8009308 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80092cc:	2208      	movs	r2, #8
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4413      	add	r3, r2
 80092d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d014      	beq.n	8009308 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f023 0307 	bic.w	r3, r3, #7
 80092e4:	3308      	adds	r3, #8
 80092e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f003 0307 	and.w	r3, r3, #7
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00a      	beq.n	8009308 <pvPortMalloc+0x6c>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	617b      	str	r3, [r7, #20]
}
 8009304:	bf00      	nop
 8009306:	e7fe      	b.n	8009306 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d069      	beq.n	80093e2 <pvPortMalloc+0x146>
 800930e:	4b42      	ldr	r3, [pc, #264]	; (8009418 <pvPortMalloc+0x17c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	d864      	bhi.n	80093e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009318:	4b40      	ldr	r3, [pc, #256]	; (800941c <pvPortMalloc+0x180>)
 800931a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800931c:	4b3f      	ldr	r3, [pc, #252]	; (800941c <pvPortMalloc+0x180>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009322:	e004      	b.n	800932e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	429a      	cmp	r2, r3
 8009336:	d903      	bls.n	8009340 <pvPortMalloc+0xa4>
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1f1      	bne.n	8009324 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009340:	4b33      	ldr	r3, [pc, #204]	; (8009410 <pvPortMalloc+0x174>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009346:	429a      	cmp	r2, r3
 8009348:	d04b      	beq.n	80093e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2208      	movs	r2, #8
 8009350:	4413      	add	r3, r2
 8009352:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	1ad2      	subs	r2, r2, r3
 8009364:	2308      	movs	r3, #8
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	429a      	cmp	r2, r3
 800936a:	d91f      	bls.n	80093ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800936c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4413      	add	r3, r2
 8009372:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	f003 0307 	and.w	r3, r3, #7
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00a      	beq.n	8009394 <pvPortMalloc+0xf8>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	613b      	str	r3, [r7, #16]
}
 8009390:	bf00      	nop
 8009392:	e7fe      	b.n	8009392 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	1ad2      	subs	r2, r2, r3
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093a6:	69b8      	ldr	r0, [r7, #24]
 80093a8:	f000 f8f8 	bl	800959c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093ac:	4b1a      	ldr	r3, [pc, #104]	; (8009418 <pvPortMalloc+0x17c>)
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	4a18      	ldr	r2, [pc, #96]	; (8009418 <pvPortMalloc+0x17c>)
 80093b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093ba:	4b17      	ldr	r3, [pc, #92]	; (8009418 <pvPortMalloc+0x17c>)
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	4b18      	ldr	r3, [pc, #96]	; (8009420 <pvPortMalloc+0x184>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d203      	bcs.n	80093ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093c6:	4b14      	ldr	r3, [pc, #80]	; (8009418 <pvPortMalloc+0x17c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a15      	ldr	r2, [pc, #84]	; (8009420 <pvPortMalloc+0x184>)
 80093cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	4b10      	ldr	r3, [pc, #64]	; (8009414 <pvPortMalloc+0x178>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	431a      	orrs	r2, r3
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093e2:	f7fe fd9f 	bl	8007f24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	f003 0307 	and.w	r3, r3, #7
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00a      	beq.n	8009406 <pvPortMalloc+0x16a>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	60fb      	str	r3, [r7, #12]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <pvPortMalloc+0x168>
	return pvReturn;
 8009406:	69fb      	ldr	r3, [r7, #28]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3728      	adds	r7, #40	; 0x28
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20001d38 	.word	0x20001d38
 8009414:	20001d44 	.word	0x20001d44
 8009418:	20001d3c 	.word	0x20001d3c
 800941c:	20001d30 	.word	0x20001d30
 8009420:	20001d40 	.word	0x20001d40

08009424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d048      	beq.n	80094c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009436:	2308      	movs	r3, #8
 8009438:	425b      	negs	r3, r3
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	4413      	add	r3, r2
 800943e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	4b21      	ldr	r3, [pc, #132]	; (80094d0 <vPortFree+0xac>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4013      	ands	r3, r2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10a      	bne.n	8009468 <vPortFree+0x44>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	60fb      	str	r3, [r7, #12]
}
 8009464:	bf00      	nop
 8009466:	e7fe      	b.n	8009466 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00a      	beq.n	8009486 <vPortFree+0x62>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	60bb      	str	r3, [r7, #8]
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	4b11      	ldr	r3, [pc, #68]	; (80094d0 <vPortFree+0xac>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4013      	ands	r3, r2
 8009490:	2b00      	cmp	r3, #0
 8009492:	d019      	beq.n	80094c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d115      	bne.n	80094c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	685a      	ldr	r2, [r3, #4]
 80094a0:	4b0b      	ldr	r3, [pc, #44]	; (80094d0 <vPortFree+0xac>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	43db      	mvns	r3, r3
 80094a6:	401a      	ands	r2, r3
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094ac:	f7fe fd2c 	bl	8007f08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <vPortFree+0xb0>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4413      	add	r3, r2
 80094ba:	4a06      	ldr	r2, [pc, #24]	; (80094d4 <vPortFree+0xb0>)
 80094bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094be:	6938      	ldr	r0, [r7, #16]
 80094c0:	f000 f86c 	bl	800959c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80094c4:	f7fe fd2e 	bl	8007f24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094c8:	bf00      	nop
 80094ca:	3718      	adds	r7, #24
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	20001d44 	.word	0x20001d44
 80094d4:	20001d3c 	.word	0x20001d3c

080094d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80094e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094e4:	4b27      	ldr	r3, [pc, #156]	; (8009584 <prvHeapInit+0xac>)
 80094e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f003 0307 	and.w	r3, r3, #7
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00c      	beq.n	800950c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3307      	adds	r3, #7
 80094f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 0307 	bic.w	r3, r3, #7
 80094fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	4a1f      	ldr	r2, [pc, #124]	; (8009584 <prvHeapInit+0xac>)
 8009508:	4413      	add	r3, r2
 800950a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009510:	4a1d      	ldr	r2, [pc, #116]	; (8009588 <prvHeapInit+0xb0>)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009516:	4b1c      	ldr	r3, [pc, #112]	; (8009588 <prvHeapInit+0xb0>)
 8009518:	2200      	movs	r2, #0
 800951a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	4413      	add	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009524:	2208      	movs	r2, #8
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	1a9b      	subs	r3, r3, r2
 800952a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0307 	bic.w	r3, r3, #7
 8009532:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4a15      	ldr	r2, [pc, #84]	; (800958c <prvHeapInit+0xb4>)
 8009538:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800953a:	4b14      	ldr	r3, [pc, #80]	; (800958c <prvHeapInit+0xb4>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2200      	movs	r2, #0
 8009540:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009542:	4b12      	ldr	r3, [pc, #72]	; (800958c <prvHeapInit+0xb4>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2200      	movs	r2, #0
 8009548:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	1ad2      	subs	r2, r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009558:	4b0c      	ldr	r3, [pc, #48]	; (800958c <prvHeapInit+0xb4>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	4a0a      	ldr	r2, [pc, #40]	; (8009590 <prvHeapInit+0xb8>)
 8009566:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	4a09      	ldr	r2, [pc, #36]	; (8009594 <prvHeapInit+0xbc>)
 800956e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009570:	4b09      	ldr	r3, [pc, #36]	; (8009598 <prvHeapInit+0xc0>)
 8009572:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009576:	601a      	str	r2, [r3, #0]
}
 8009578:	bf00      	nop
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	bc80      	pop	{r7}
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20001130 	.word	0x20001130
 8009588:	20001d30 	.word	0x20001d30
 800958c:	20001d38 	.word	0x20001d38
 8009590:	20001d40 	.word	0x20001d40
 8009594:	20001d3c 	.word	0x20001d3c
 8009598:	20001d44 	.word	0x20001d44

0800959c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095a4:	4b27      	ldr	r3, [pc, #156]	; (8009644 <prvInsertBlockIntoFreeList+0xa8>)
 80095a6:	60fb      	str	r3, [r7, #12]
 80095a8:	e002      	b.n	80095b0 <prvInsertBlockIntoFreeList+0x14>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	60fb      	str	r3, [r7, #12]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d8f7      	bhi.n	80095aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	4413      	add	r3, r2
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d108      	bne.n	80095de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	441a      	add	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	441a      	add	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d118      	bne.n	8009624 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	4b14      	ldr	r3, [pc, #80]	; (8009648 <prvInsertBlockIntoFreeList+0xac>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d00d      	beq.n	800961a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	441a      	add	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	e008      	b.n	800962c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800961a:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <prvInsertBlockIntoFreeList+0xac>)
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	e003      	b.n	800962c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	429a      	cmp	r2, r3
 8009632:	d002      	beq.n	800963a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800963a:	bf00      	nop
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	bc80      	pop	{r7}
 8009642:	4770      	bx	lr
 8009644:	20001d30 	.word	0x20001d30
 8009648:	20001d38 	.word	0x20001d38

0800964c <__cvt>:
 800964c:	2b00      	cmp	r3, #0
 800964e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009652:	461f      	mov	r7, r3
 8009654:	bfbb      	ittet	lt
 8009656:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800965a:	461f      	movlt	r7, r3
 800965c:	2300      	movge	r3, #0
 800965e:	232d      	movlt	r3, #45	; 0x2d
 8009660:	b088      	sub	sp, #32
 8009662:	4614      	mov	r4, r2
 8009664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009666:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009668:	7013      	strb	r3, [r2, #0]
 800966a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800966c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009670:	f023 0820 	bic.w	r8, r3, #32
 8009674:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009678:	d005      	beq.n	8009686 <__cvt+0x3a>
 800967a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800967e:	d100      	bne.n	8009682 <__cvt+0x36>
 8009680:	3501      	adds	r5, #1
 8009682:	2302      	movs	r3, #2
 8009684:	e000      	b.n	8009688 <__cvt+0x3c>
 8009686:	2303      	movs	r3, #3
 8009688:	aa07      	add	r2, sp, #28
 800968a:	9204      	str	r2, [sp, #16]
 800968c:	aa06      	add	r2, sp, #24
 800968e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009692:	e9cd 3500 	strd	r3, r5, [sp]
 8009696:	4622      	mov	r2, r4
 8009698:	463b      	mov	r3, r7
 800969a:	f001 f995 	bl	800a9c8 <_dtoa_r>
 800969e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096a2:	4606      	mov	r6, r0
 80096a4:	d102      	bne.n	80096ac <__cvt+0x60>
 80096a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096a8:	07db      	lsls	r3, r3, #31
 80096aa:	d522      	bpl.n	80096f2 <__cvt+0xa6>
 80096ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096b0:	eb06 0905 	add.w	r9, r6, r5
 80096b4:	d110      	bne.n	80096d8 <__cvt+0x8c>
 80096b6:	7833      	ldrb	r3, [r6, #0]
 80096b8:	2b30      	cmp	r3, #48	; 0x30
 80096ba:	d10a      	bne.n	80096d2 <__cvt+0x86>
 80096bc:	2200      	movs	r2, #0
 80096be:	2300      	movs	r3, #0
 80096c0:	4620      	mov	r0, r4
 80096c2:	4639      	mov	r1, r7
 80096c4:	f7f7 f970 	bl	80009a8 <__aeabi_dcmpeq>
 80096c8:	b918      	cbnz	r0, 80096d2 <__cvt+0x86>
 80096ca:	f1c5 0501 	rsb	r5, r5, #1
 80096ce:	f8ca 5000 	str.w	r5, [sl]
 80096d2:	f8da 3000 	ldr.w	r3, [sl]
 80096d6:	4499      	add	r9, r3
 80096d8:	2200      	movs	r2, #0
 80096da:	2300      	movs	r3, #0
 80096dc:	4620      	mov	r0, r4
 80096de:	4639      	mov	r1, r7
 80096e0:	f7f7 f962 	bl	80009a8 <__aeabi_dcmpeq>
 80096e4:	b108      	cbz	r0, 80096ea <__cvt+0x9e>
 80096e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80096ea:	2230      	movs	r2, #48	; 0x30
 80096ec:	9b07      	ldr	r3, [sp, #28]
 80096ee:	454b      	cmp	r3, r9
 80096f0:	d307      	bcc.n	8009702 <__cvt+0xb6>
 80096f2:	4630      	mov	r0, r6
 80096f4:	9b07      	ldr	r3, [sp, #28]
 80096f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80096f8:	1b9b      	subs	r3, r3, r6
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	b008      	add	sp, #32
 80096fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009702:	1c59      	adds	r1, r3, #1
 8009704:	9107      	str	r1, [sp, #28]
 8009706:	701a      	strb	r2, [r3, #0]
 8009708:	e7f0      	b.n	80096ec <__cvt+0xa0>

0800970a <__exponent>:
 800970a:	4603      	mov	r3, r0
 800970c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800970e:	2900      	cmp	r1, #0
 8009710:	f803 2b02 	strb.w	r2, [r3], #2
 8009714:	bfb6      	itet	lt
 8009716:	222d      	movlt	r2, #45	; 0x2d
 8009718:	222b      	movge	r2, #43	; 0x2b
 800971a:	4249      	neglt	r1, r1
 800971c:	2909      	cmp	r1, #9
 800971e:	7042      	strb	r2, [r0, #1]
 8009720:	dd2a      	ble.n	8009778 <__exponent+0x6e>
 8009722:	f10d 0207 	add.w	r2, sp, #7
 8009726:	4617      	mov	r7, r2
 8009728:	260a      	movs	r6, #10
 800972a:	fb91 f5f6 	sdiv	r5, r1, r6
 800972e:	4694      	mov	ip, r2
 8009730:	fb06 1415 	mls	r4, r6, r5, r1
 8009734:	3430      	adds	r4, #48	; 0x30
 8009736:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800973a:	460c      	mov	r4, r1
 800973c:	2c63      	cmp	r4, #99	; 0x63
 800973e:	4629      	mov	r1, r5
 8009740:	f102 32ff 	add.w	r2, r2, #4294967295
 8009744:	dcf1      	bgt.n	800972a <__exponent+0x20>
 8009746:	3130      	adds	r1, #48	; 0x30
 8009748:	f1ac 0402 	sub.w	r4, ip, #2
 800974c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009750:	4622      	mov	r2, r4
 8009752:	1c41      	adds	r1, r0, #1
 8009754:	42ba      	cmp	r2, r7
 8009756:	d30a      	bcc.n	800976e <__exponent+0x64>
 8009758:	f10d 0209 	add.w	r2, sp, #9
 800975c:	eba2 020c 	sub.w	r2, r2, ip
 8009760:	42bc      	cmp	r4, r7
 8009762:	bf88      	it	hi
 8009764:	2200      	movhi	r2, #0
 8009766:	4413      	add	r3, r2
 8009768:	1a18      	subs	r0, r3, r0
 800976a:	b003      	add	sp, #12
 800976c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800976e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009772:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009776:	e7ed      	b.n	8009754 <__exponent+0x4a>
 8009778:	2330      	movs	r3, #48	; 0x30
 800977a:	3130      	adds	r1, #48	; 0x30
 800977c:	7083      	strb	r3, [r0, #2]
 800977e:	70c1      	strb	r1, [r0, #3]
 8009780:	1d03      	adds	r3, r0, #4
 8009782:	e7f1      	b.n	8009768 <__exponent+0x5e>

08009784 <_printf_float>:
 8009784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	b091      	sub	sp, #68	; 0x44
 800978a:	460c      	mov	r4, r1
 800978c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009790:	4616      	mov	r6, r2
 8009792:	461f      	mov	r7, r3
 8009794:	4605      	mov	r5, r0
 8009796:	f000 fff5 	bl	800a784 <_localeconv_r>
 800979a:	6803      	ldr	r3, [r0, #0]
 800979c:	4618      	mov	r0, r3
 800979e:	9309      	str	r3, [sp, #36]	; 0x24
 80097a0:	f7f6 fcd6 	bl	8000150 <strlen>
 80097a4:	2300      	movs	r3, #0
 80097a6:	930e      	str	r3, [sp, #56]	; 0x38
 80097a8:	f8d8 3000 	ldr.w	r3, [r8]
 80097ac:	900a      	str	r0, [sp, #40]	; 0x28
 80097ae:	3307      	adds	r3, #7
 80097b0:	f023 0307 	bic.w	r3, r3, #7
 80097b4:	f103 0208 	add.w	r2, r3, #8
 80097b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80097bc:	f8d4 b000 	ldr.w	fp, [r4]
 80097c0:	f8c8 2000 	str.w	r2, [r8]
 80097c4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80097c8:	4652      	mov	r2, sl
 80097ca:	4643      	mov	r3, r8
 80097cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097d0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80097d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80097d6:	f04f 32ff 	mov.w	r2, #4294967295
 80097da:	4650      	mov	r0, sl
 80097dc:	4b9c      	ldr	r3, [pc, #624]	; (8009a50 <_printf_float+0x2cc>)
 80097de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097e0:	f7f7 f914 	bl	8000a0c <__aeabi_dcmpun>
 80097e4:	bb70      	cbnz	r0, 8009844 <_printf_float+0xc0>
 80097e6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ea:	4650      	mov	r0, sl
 80097ec:	4b98      	ldr	r3, [pc, #608]	; (8009a50 <_printf_float+0x2cc>)
 80097ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097f0:	f7f7 f8ee 	bl	80009d0 <__aeabi_dcmple>
 80097f4:	bb30      	cbnz	r0, 8009844 <_printf_float+0xc0>
 80097f6:	2200      	movs	r2, #0
 80097f8:	2300      	movs	r3, #0
 80097fa:	4650      	mov	r0, sl
 80097fc:	4641      	mov	r1, r8
 80097fe:	f7f7 f8dd 	bl	80009bc <__aeabi_dcmplt>
 8009802:	b110      	cbz	r0, 800980a <_printf_float+0x86>
 8009804:	232d      	movs	r3, #45	; 0x2d
 8009806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800980a:	4a92      	ldr	r2, [pc, #584]	; (8009a54 <_printf_float+0x2d0>)
 800980c:	4b92      	ldr	r3, [pc, #584]	; (8009a58 <_printf_float+0x2d4>)
 800980e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009812:	bf94      	ite	ls
 8009814:	4690      	movls	r8, r2
 8009816:	4698      	movhi	r8, r3
 8009818:	2303      	movs	r3, #3
 800981a:	f04f 0a00 	mov.w	sl, #0
 800981e:	6123      	str	r3, [r4, #16]
 8009820:	f02b 0304 	bic.w	r3, fp, #4
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	4633      	mov	r3, r6
 8009828:	4621      	mov	r1, r4
 800982a:	4628      	mov	r0, r5
 800982c:	9700      	str	r7, [sp, #0]
 800982e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009830:	f000 f9d6 	bl	8009be0 <_printf_common>
 8009834:	3001      	adds	r0, #1
 8009836:	f040 8090 	bne.w	800995a <_printf_float+0x1d6>
 800983a:	f04f 30ff 	mov.w	r0, #4294967295
 800983e:	b011      	add	sp, #68	; 0x44
 8009840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009844:	4652      	mov	r2, sl
 8009846:	4643      	mov	r3, r8
 8009848:	4650      	mov	r0, sl
 800984a:	4641      	mov	r1, r8
 800984c:	f7f7 f8de 	bl	8000a0c <__aeabi_dcmpun>
 8009850:	b148      	cbz	r0, 8009866 <_printf_float+0xe2>
 8009852:	f1b8 0f00 	cmp.w	r8, #0
 8009856:	bfb8      	it	lt
 8009858:	232d      	movlt	r3, #45	; 0x2d
 800985a:	4a80      	ldr	r2, [pc, #512]	; (8009a5c <_printf_float+0x2d8>)
 800985c:	bfb8      	it	lt
 800985e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009862:	4b7f      	ldr	r3, [pc, #508]	; (8009a60 <_printf_float+0x2dc>)
 8009864:	e7d3      	b.n	800980e <_printf_float+0x8a>
 8009866:	6863      	ldr	r3, [r4, #4]
 8009868:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	d142      	bne.n	80098f6 <_printf_float+0x172>
 8009870:	2306      	movs	r3, #6
 8009872:	6063      	str	r3, [r4, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	9206      	str	r2, [sp, #24]
 8009878:	aa0e      	add	r2, sp, #56	; 0x38
 800987a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800987e:	aa0d      	add	r2, sp, #52	; 0x34
 8009880:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009884:	9203      	str	r2, [sp, #12]
 8009886:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800988a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800988e:	6023      	str	r3, [r4, #0]
 8009890:	6863      	ldr	r3, [r4, #4]
 8009892:	4652      	mov	r2, sl
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	4628      	mov	r0, r5
 8009898:	4643      	mov	r3, r8
 800989a:	910b      	str	r1, [sp, #44]	; 0x2c
 800989c:	f7ff fed6 	bl	800964c <__cvt>
 80098a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098a2:	4680      	mov	r8, r0
 80098a4:	2947      	cmp	r1, #71	; 0x47
 80098a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80098a8:	d108      	bne.n	80098bc <_printf_float+0x138>
 80098aa:	1cc8      	adds	r0, r1, #3
 80098ac:	db02      	blt.n	80098b4 <_printf_float+0x130>
 80098ae:	6863      	ldr	r3, [r4, #4]
 80098b0:	4299      	cmp	r1, r3
 80098b2:	dd40      	ble.n	8009936 <_printf_float+0x1b2>
 80098b4:	f1a9 0902 	sub.w	r9, r9, #2
 80098b8:	fa5f f989 	uxtb.w	r9, r9
 80098bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80098c0:	d81f      	bhi.n	8009902 <_printf_float+0x17e>
 80098c2:	464a      	mov	r2, r9
 80098c4:	3901      	subs	r1, #1
 80098c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098ca:	910d      	str	r1, [sp, #52]	; 0x34
 80098cc:	f7ff ff1d 	bl	800970a <__exponent>
 80098d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098d2:	4682      	mov	sl, r0
 80098d4:	1813      	adds	r3, r2, r0
 80098d6:	2a01      	cmp	r2, #1
 80098d8:	6123      	str	r3, [r4, #16]
 80098da:	dc02      	bgt.n	80098e2 <_printf_float+0x15e>
 80098dc:	6822      	ldr	r2, [r4, #0]
 80098de:	07d2      	lsls	r2, r2, #31
 80098e0:	d501      	bpl.n	80098e6 <_printf_float+0x162>
 80098e2:	3301      	adds	r3, #1
 80098e4:	6123      	str	r3, [r4, #16]
 80098e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d09b      	beq.n	8009826 <_printf_float+0xa2>
 80098ee:	232d      	movs	r3, #45	; 0x2d
 80098f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098f4:	e797      	b.n	8009826 <_printf_float+0xa2>
 80098f6:	2947      	cmp	r1, #71	; 0x47
 80098f8:	d1bc      	bne.n	8009874 <_printf_float+0xf0>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1ba      	bne.n	8009874 <_printf_float+0xf0>
 80098fe:	2301      	movs	r3, #1
 8009900:	e7b7      	b.n	8009872 <_printf_float+0xee>
 8009902:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009906:	d118      	bne.n	800993a <_printf_float+0x1b6>
 8009908:	2900      	cmp	r1, #0
 800990a:	6863      	ldr	r3, [r4, #4]
 800990c:	dd0b      	ble.n	8009926 <_printf_float+0x1a2>
 800990e:	6121      	str	r1, [r4, #16]
 8009910:	b913      	cbnz	r3, 8009918 <_printf_float+0x194>
 8009912:	6822      	ldr	r2, [r4, #0]
 8009914:	07d0      	lsls	r0, r2, #31
 8009916:	d502      	bpl.n	800991e <_printf_float+0x19a>
 8009918:	3301      	adds	r3, #1
 800991a:	440b      	add	r3, r1
 800991c:	6123      	str	r3, [r4, #16]
 800991e:	f04f 0a00 	mov.w	sl, #0
 8009922:	65a1      	str	r1, [r4, #88]	; 0x58
 8009924:	e7df      	b.n	80098e6 <_printf_float+0x162>
 8009926:	b913      	cbnz	r3, 800992e <_printf_float+0x1aa>
 8009928:	6822      	ldr	r2, [r4, #0]
 800992a:	07d2      	lsls	r2, r2, #31
 800992c:	d501      	bpl.n	8009932 <_printf_float+0x1ae>
 800992e:	3302      	adds	r3, #2
 8009930:	e7f4      	b.n	800991c <_printf_float+0x198>
 8009932:	2301      	movs	r3, #1
 8009934:	e7f2      	b.n	800991c <_printf_float+0x198>
 8009936:	f04f 0967 	mov.w	r9, #103	; 0x67
 800993a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800993c:	4299      	cmp	r1, r3
 800993e:	db05      	blt.n	800994c <_printf_float+0x1c8>
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	6121      	str	r1, [r4, #16]
 8009944:	07d8      	lsls	r0, r3, #31
 8009946:	d5ea      	bpl.n	800991e <_printf_float+0x19a>
 8009948:	1c4b      	adds	r3, r1, #1
 800994a:	e7e7      	b.n	800991c <_printf_float+0x198>
 800994c:	2900      	cmp	r1, #0
 800994e:	bfcc      	ite	gt
 8009950:	2201      	movgt	r2, #1
 8009952:	f1c1 0202 	rsble	r2, r1, #2
 8009956:	4413      	add	r3, r2
 8009958:	e7e0      	b.n	800991c <_printf_float+0x198>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	055a      	lsls	r2, r3, #21
 800995e:	d407      	bmi.n	8009970 <_printf_float+0x1ec>
 8009960:	6923      	ldr	r3, [r4, #16]
 8009962:	4642      	mov	r2, r8
 8009964:	4631      	mov	r1, r6
 8009966:	4628      	mov	r0, r5
 8009968:	47b8      	blx	r7
 800996a:	3001      	adds	r0, #1
 800996c:	d12b      	bne.n	80099c6 <_printf_float+0x242>
 800996e:	e764      	b.n	800983a <_printf_float+0xb6>
 8009970:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009974:	f240 80dd 	bls.w	8009b32 <_printf_float+0x3ae>
 8009978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800997c:	2200      	movs	r2, #0
 800997e:	2300      	movs	r3, #0
 8009980:	f7f7 f812 	bl	80009a8 <__aeabi_dcmpeq>
 8009984:	2800      	cmp	r0, #0
 8009986:	d033      	beq.n	80099f0 <_printf_float+0x26c>
 8009988:	2301      	movs	r3, #1
 800998a:	4631      	mov	r1, r6
 800998c:	4628      	mov	r0, r5
 800998e:	4a35      	ldr	r2, [pc, #212]	; (8009a64 <_printf_float+0x2e0>)
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f af51 	beq.w	800983a <_printf_float+0xb6>
 8009998:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800999c:	429a      	cmp	r2, r3
 800999e:	db02      	blt.n	80099a6 <_printf_float+0x222>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	07d8      	lsls	r0, r3, #31
 80099a4:	d50f      	bpl.n	80099c6 <_printf_float+0x242>
 80099a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099aa:	4631      	mov	r1, r6
 80099ac:	4628      	mov	r0, r5
 80099ae:	47b8      	blx	r7
 80099b0:	3001      	adds	r0, #1
 80099b2:	f43f af42 	beq.w	800983a <_printf_float+0xb6>
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	f104 091a 	add.w	r9, r4, #26
 80099be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099c0:	3b01      	subs	r3, #1
 80099c2:	4543      	cmp	r3, r8
 80099c4:	dc09      	bgt.n	80099da <_printf_float+0x256>
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	079b      	lsls	r3, r3, #30
 80099ca:	f100 8104 	bmi.w	8009bd6 <_printf_float+0x452>
 80099ce:	68e0      	ldr	r0, [r4, #12]
 80099d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099d2:	4298      	cmp	r0, r3
 80099d4:	bfb8      	it	lt
 80099d6:	4618      	movlt	r0, r3
 80099d8:	e731      	b.n	800983e <_printf_float+0xba>
 80099da:	2301      	movs	r3, #1
 80099dc:	464a      	mov	r2, r9
 80099de:	4631      	mov	r1, r6
 80099e0:	4628      	mov	r0, r5
 80099e2:	47b8      	blx	r7
 80099e4:	3001      	adds	r0, #1
 80099e6:	f43f af28 	beq.w	800983a <_printf_float+0xb6>
 80099ea:	f108 0801 	add.w	r8, r8, #1
 80099ee:	e7e6      	b.n	80099be <_printf_float+0x23a>
 80099f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	dc38      	bgt.n	8009a68 <_printf_float+0x2e4>
 80099f6:	2301      	movs	r3, #1
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	4a19      	ldr	r2, [pc, #100]	; (8009a64 <_printf_float+0x2e0>)
 80099fe:	47b8      	blx	r7
 8009a00:	3001      	adds	r0, #1
 8009a02:	f43f af1a 	beq.w	800983a <_printf_float+0xb6>
 8009a06:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	d102      	bne.n	8009a14 <_printf_float+0x290>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	07d9      	lsls	r1, r3, #31
 8009a12:	d5d8      	bpl.n	80099c6 <_printf_float+0x242>
 8009a14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	47b8      	blx	r7
 8009a1e:	3001      	adds	r0, #1
 8009a20:	f43f af0b 	beq.w	800983a <_printf_float+0xb6>
 8009a24:	f04f 0900 	mov.w	r9, #0
 8009a28:	f104 0a1a 	add.w	sl, r4, #26
 8009a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a2e:	425b      	negs	r3, r3
 8009a30:	454b      	cmp	r3, r9
 8009a32:	dc01      	bgt.n	8009a38 <_printf_float+0x2b4>
 8009a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a36:	e794      	b.n	8009962 <_printf_float+0x1de>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	4652      	mov	r2, sl
 8009a3c:	4631      	mov	r1, r6
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b8      	blx	r7
 8009a42:	3001      	adds	r0, #1
 8009a44:	f43f aef9 	beq.w	800983a <_printf_float+0xb6>
 8009a48:	f109 0901 	add.w	r9, r9, #1
 8009a4c:	e7ee      	b.n	8009a2c <_printf_float+0x2a8>
 8009a4e:	bf00      	nop
 8009a50:	7fefffff 	.word	0x7fefffff
 8009a54:	0800e08a 	.word	0x0800e08a
 8009a58:	0800e08e 	.word	0x0800e08e
 8009a5c:	0800e092 	.word	0x0800e092
 8009a60:	0800e096 	.word	0x0800e096
 8009a64:	0800e09a 	.word	0x0800e09a
 8009a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	bfa8      	it	ge
 8009a70:	461a      	movge	r2, r3
 8009a72:	2a00      	cmp	r2, #0
 8009a74:	4691      	mov	r9, r2
 8009a76:	dc37      	bgt.n	8009ae8 <_printf_float+0x364>
 8009a78:	f04f 0b00 	mov.w	fp, #0
 8009a7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a80:	f104 021a 	add.w	r2, r4, #26
 8009a84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009a88:	ebaa 0309 	sub.w	r3, sl, r9
 8009a8c:	455b      	cmp	r3, fp
 8009a8e:	dc33      	bgt.n	8009af8 <_printf_float+0x374>
 8009a90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a94:	429a      	cmp	r2, r3
 8009a96:	db3b      	blt.n	8009b10 <_printf_float+0x38c>
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	07da      	lsls	r2, r3, #31
 8009a9c:	d438      	bmi.n	8009b10 <_printf_float+0x38c>
 8009a9e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009aa2:	eba2 0903 	sub.w	r9, r2, r3
 8009aa6:	eba2 020a 	sub.w	r2, r2, sl
 8009aaa:	4591      	cmp	r9, r2
 8009aac:	bfa8      	it	ge
 8009aae:	4691      	movge	r9, r2
 8009ab0:	f1b9 0f00 	cmp.w	r9, #0
 8009ab4:	dc34      	bgt.n	8009b20 <_printf_float+0x39c>
 8009ab6:	f04f 0800 	mov.w	r8, #0
 8009aba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009abe:	f104 0a1a 	add.w	sl, r4, #26
 8009ac2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ac6:	1a9b      	subs	r3, r3, r2
 8009ac8:	eba3 0309 	sub.w	r3, r3, r9
 8009acc:	4543      	cmp	r3, r8
 8009ace:	f77f af7a 	ble.w	80099c6 <_printf_float+0x242>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	4652      	mov	r2, sl
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b8      	blx	r7
 8009adc:	3001      	adds	r0, #1
 8009ade:	f43f aeac 	beq.w	800983a <_printf_float+0xb6>
 8009ae2:	f108 0801 	add.w	r8, r8, #1
 8009ae6:	e7ec      	b.n	8009ac2 <_printf_float+0x33e>
 8009ae8:	4613      	mov	r3, r2
 8009aea:	4631      	mov	r1, r6
 8009aec:	4642      	mov	r2, r8
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b8      	blx	r7
 8009af2:	3001      	adds	r0, #1
 8009af4:	d1c0      	bne.n	8009a78 <_printf_float+0x2f4>
 8009af6:	e6a0      	b.n	800983a <_printf_float+0xb6>
 8009af8:	2301      	movs	r3, #1
 8009afa:	4631      	mov	r1, r6
 8009afc:	4628      	mov	r0, r5
 8009afe:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b00:	47b8      	blx	r7
 8009b02:	3001      	adds	r0, #1
 8009b04:	f43f ae99 	beq.w	800983a <_printf_float+0xb6>
 8009b08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b0a:	f10b 0b01 	add.w	fp, fp, #1
 8009b0e:	e7b9      	b.n	8009a84 <_printf_float+0x300>
 8009b10:	4631      	mov	r1, r6
 8009b12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b16:	4628      	mov	r0, r5
 8009b18:	47b8      	blx	r7
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	d1bf      	bne.n	8009a9e <_printf_float+0x31a>
 8009b1e:	e68c      	b.n	800983a <_printf_float+0xb6>
 8009b20:	464b      	mov	r3, r9
 8009b22:	4631      	mov	r1, r6
 8009b24:	4628      	mov	r0, r5
 8009b26:	eb08 020a 	add.w	r2, r8, sl
 8009b2a:	47b8      	blx	r7
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d1c2      	bne.n	8009ab6 <_printf_float+0x332>
 8009b30:	e683      	b.n	800983a <_printf_float+0xb6>
 8009b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b34:	2a01      	cmp	r2, #1
 8009b36:	dc01      	bgt.n	8009b3c <_printf_float+0x3b8>
 8009b38:	07db      	lsls	r3, r3, #31
 8009b3a:	d539      	bpl.n	8009bb0 <_printf_float+0x42c>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	4642      	mov	r2, r8
 8009b40:	4631      	mov	r1, r6
 8009b42:	4628      	mov	r0, r5
 8009b44:	47b8      	blx	r7
 8009b46:	3001      	adds	r0, #1
 8009b48:	f43f ae77 	beq.w	800983a <_printf_float+0xb6>
 8009b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b50:	4631      	mov	r1, r6
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b8      	blx	r7
 8009b56:	3001      	adds	r0, #1
 8009b58:	f43f ae6f 	beq.w	800983a <_printf_float+0xb6>
 8009b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b60:	2200      	movs	r2, #0
 8009b62:	2300      	movs	r3, #0
 8009b64:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009b68:	f7f6 ff1e 	bl	80009a8 <__aeabi_dcmpeq>
 8009b6c:	b9d8      	cbnz	r0, 8009ba6 <_printf_float+0x422>
 8009b6e:	f109 33ff 	add.w	r3, r9, #4294967295
 8009b72:	f108 0201 	add.w	r2, r8, #1
 8009b76:	4631      	mov	r1, r6
 8009b78:	4628      	mov	r0, r5
 8009b7a:	47b8      	blx	r7
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d10e      	bne.n	8009b9e <_printf_float+0x41a>
 8009b80:	e65b      	b.n	800983a <_printf_float+0xb6>
 8009b82:	2301      	movs	r3, #1
 8009b84:	464a      	mov	r2, r9
 8009b86:	4631      	mov	r1, r6
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b8      	blx	r7
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	f43f ae54 	beq.w	800983a <_printf_float+0xb6>
 8009b92:	f108 0801 	add.w	r8, r8, #1
 8009b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	4543      	cmp	r3, r8
 8009b9c:	dcf1      	bgt.n	8009b82 <_printf_float+0x3fe>
 8009b9e:	4653      	mov	r3, sl
 8009ba0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ba4:	e6de      	b.n	8009964 <_printf_float+0x1e0>
 8009ba6:	f04f 0800 	mov.w	r8, #0
 8009baa:	f104 091a 	add.w	r9, r4, #26
 8009bae:	e7f2      	b.n	8009b96 <_printf_float+0x412>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	4642      	mov	r2, r8
 8009bb4:	e7df      	b.n	8009b76 <_printf_float+0x3f2>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	464a      	mov	r2, r9
 8009bba:	4631      	mov	r1, r6
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	47b8      	blx	r7
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	f43f ae3a 	beq.w	800983a <_printf_float+0xb6>
 8009bc6:	f108 0801 	add.w	r8, r8, #1
 8009bca:	68e3      	ldr	r3, [r4, #12]
 8009bcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009bce:	1a5b      	subs	r3, r3, r1
 8009bd0:	4543      	cmp	r3, r8
 8009bd2:	dcf0      	bgt.n	8009bb6 <_printf_float+0x432>
 8009bd4:	e6fb      	b.n	80099ce <_printf_float+0x24a>
 8009bd6:	f04f 0800 	mov.w	r8, #0
 8009bda:	f104 0919 	add.w	r9, r4, #25
 8009bde:	e7f4      	b.n	8009bca <_printf_float+0x446>

08009be0 <_printf_common>:
 8009be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be4:	4616      	mov	r6, r2
 8009be6:	4699      	mov	r9, r3
 8009be8:	688a      	ldr	r2, [r1, #8]
 8009bea:	690b      	ldr	r3, [r1, #16]
 8009bec:	4607      	mov	r7, r0
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	bfb8      	it	lt
 8009bf2:	4613      	movlt	r3, r2
 8009bf4:	6033      	str	r3, [r6, #0]
 8009bf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c00:	b10a      	cbz	r2, 8009c06 <_printf_common+0x26>
 8009c02:	3301      	adds	r3, #1
 8009c04:	6033      	str	r3, [r6, #0]
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	0699      	lsls	r1, r3, #26
 8009c0a:	bf42      	ittt	mi
 8009c0c:	6833      	ldrmi	r3, [r6, #0]
 8009c0e:	3302      	addmi	r3, #2
 8009c10:	6033      	strmi	r3, [r6, #0]
 8009c12:	6825      	ldr	r5, [r4, #0]
 8009c14:	f015 0506 	ands.w	r5, r5, #6
 8009c18:	d106      	bne.n	8009c28 <_printf_common+0x48>
 8009c1a:	f104 0a19 	add.w	sl, r4, #25
 8009c1e:	68e3      	ldr	r3, [r4, #12]
 8009c20:	6832      	ldr	r2, [r6, #0]
 8009c22:	1a9b      	subs	r3, r3, r2
 8009c24:	42ab      	cmp	r3, r5
 8009c26:	dc2b      	bgt.n	8009c80 <_printf_common+0xa0>
 8009c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c2c:	1e13      	subs	r3, r2, #0
 8009c2e:	6822      	ldr	r2, [r4, #0]
 8009c30:	bf18      	it	ne
 8009c32:	2301      	movne	r3, #1
 8009c34:	0692      	lsls	r2, r2, #26
 8009c36:	d430      	bmi.n	8009c9a <_printf_common+0xba>
 8009c38:	4649      	mov	r1, r9
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c40:	47c0      	blx	r8
 8009c42:	3001      	adds	r0, #1
 8009c44:	d023      	beq.n	8009c8e <_printf_common+0xae>
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	6922      	ldr	r2, [r4, #16]
 8009c4a:	f003 0306 	and.w	r3, r3, #6
 8009c4e:	2b04      	cmp	r3, #4
 8009c50:	bf14      	ite	ne
 8009c52:	2500      	movne	r5, #0
 8009c54:	6833      	ldreq	r3, [r6, #0]
 8009c56:	f04f 0600 	mov.w	r6, #0
 8009c5a:	bf08      	it	eq
 8009c5c:	68e5      	ldreq	r5, [r4, #12]
 8009c5e:	f104 041a 	add.w	r4, r4, #26
 8009c62:	bf08      	it	eq
 8009c64:	1aed      	subeq	r5, r5, r3
 8009c66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009c6a:	bf08      	it	eq
 8009c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c70:	4293      	cmp	r3, r2
 8009c72:	bfc4      	itt	gt
 8009c74:	1a9b      	subgt	r3, r3, r2
 8009c76:	18ed      	addgt	r5, r5, r3
 8009c78:	42b5      	cmp	r5, r6
 8009c7a:	d11a      	bne.n	8009cb2 <_printf_common+0xd2>
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e008      	b.n	8009c92 <_printf_common+0xb2>
 8009c80:	2301      	movs	r3, #1
 8009c82:	4652      	mov	r2, sl
 8009c84:	4649      	mov	r1, r9
 8009c86:	4638      	mov	r0, r7
 8009c88:	47c0      	blx	r8
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d103      	bne.n	8009c96 <_printf_common+0xb6>
 8009c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c96:	3501      	adds	r5, #1
 8009c98:	e7c1      	b.n	8009c1e <_printf_common+0x3e>
 8009c9a:	2030      	movs	r0, #48	; 0x30
 8009c9c:	18e1      	adds	r1, r4, r3
 8009c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ca2:	1c5a      	adds	r2, r3, #1
 8009ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ca8:	4422      	add	r2, r4
 8009caa:	3302      	adds	r3, #2
 8009cac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cb0:	e7c2      	b.n	8009c38 <_printf_common+0x58>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	4622      	mov	r2, r4
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	4638      	mov	r0, r7
 8009cba:	47c0      	blx	r8
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d0e6      	beq.n	8009c8e <_printf_common+0xae>
 8009cc0:	3601      	adds	r6, #1
 8009cc2:	e7d9      	b.n	8009c78 <_printf_common+0x98>

08009cc4 <_printf_i>:
 8009cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc8:	7e0f      	ldrb	r7, [r1, #24]
 8009cca:	4691      	mov	r9, r2
 8009ccc:	2f78      	cmp	r7, #120	; 0x78
 8009cce:	4680      	mov	r8, r0
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	469a      	mov	sl, r3
 8009cd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cda:	d807      	bhi.n	8009cec <_printf_i+0x28>
 8009cdc:	2f62      	cmp	r7, #98	; 0x62
 8009cde:	d80a      	bhi.n	8009cf6 <_printf_i+0x32>
 8009ce0:	2f00      	cmp	r7, #0
 8009ce2:	f000 80d5 	beq.w	8009e90 <_printf_i+0x1cc>
 8009ce6:	2f58      	cmp	r7, #88	; 0x58
 8009ce8:	f000 80c1 	beq.w	8009e6e <_printf_i+0x1aa>
 8009cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cf4:	e03a      	b.n	8009d6c <_printf_i+0xa8>
 8009cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cfa:	2b15      	cmp	r3, #21
 8009cfc:	d8f6      	bhi.n	8009cec <_printf_i+0x28>
 8009cfe:	a101      	add	r1, pc, #4	; (adr r1, 8009d04 <_printf_i+0x40>)
 8009d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d04:	08009d5d 	.word	0x08009d5d
 8009d08:	08009d71 	.word	0x08009d71
 8009d0c:	08009ced 	.word	0x08009ced
 8009d10:	08009ced 	.word	0x08009ced
 8009d14:	08009ced 	.word	0x08009ced
 8009d18:	08009ced 	.word	0x08009ced
 8009d1c:	08009d71 	.word	0x08009d71
 8009d20:	08009ced 	.word	0x08009ced
 8009d24:	08009ced 	.word	0x08009ced
 8009d28:	08009ced 	.word	0x08009ced
 8009d2c:	08009ced 	.word	0x08009ced
 8009d30:	08009e77 	.word	0x08009e77
 8009d34:	08009d9d 	.word	0x08009d9d
 8009d38:	08009e31 	.word	0x08009e31
 8009d3c:	08009ced 	.word	0x08009ced
 8009d40:	08009ced 	.word	0x08009ced
 8009d44:	08009e99 	.word	0x08009e99
 8009d48:	08009ced 	.word	0x08009ced
 8009d4c:	08009d9d 	.word	0x08009d9d
 8009d50:	08009ced 	.word	0x08009ced
 8009d54:	08009ced 	.word	0x08009ced
 8009d58:	08009e39 	.word	0x08009e39
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	1d1a      	adds	r2, r3, #4
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	602a      	str	r2, [r5, #0]
 8009d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e0a0      	b.n	8009eb2 <_printf_i+0x1ee>
 8009d70:	6820      	ldr	r0, [r4, #0]
 8009d72:	682b      	ldr	r3, [r5, #0]
 8009d74:	0607      	lsls	r7, r0, #24
 8009d76:	f103 0104 	add.w	r1, r3, #4
 8009d7a:	6029      	str	r1, [r5, #0]
 8009d7c:	d501      	bpl.n	8009d82 <_printf_i+0xbe>
 8009d7e:	681e      	ldr	r6, [r3, #0]
 8009d80:	e003      	b.n	8009d8a <_printf_i+0xc6>
 8009d82:	0646      	lsls	r6, r0, #25
 8009d84:	d5fb      	bpl.n	8009d7e <_printf_i+0xba>
 8009d86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009d8a:	2e00      	cmp	r6, #0
 8009d8c:	da03      	bge.n	8009d96 <_printf_i+0xd2>
 8009d8e:	232d      	movs	r3, #45	; 0x2d
 8009d90:	4276      	negs	r6, r6
 8009d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d96:	230a      	movs	r3, #10
 8009d98:	4859      	ldr	r0, [pc, #356]	; (8009f00 <_printf_i+0x23c>)
 8009d9a:	e012      	b.n	8009dc2 <_printf_i+0xfe>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	6820      	ldr	r0, [r4, #0]
 8009da0:	1d19      	adds	r1, r3, #4
 8009da2:	6029      	str	r1, [r5, #0]
 8009da4:	0605      	lsls	r5, r0, #24
 8009da6:	d501      	bpl.n	8009dac <_printf_i+0xe8>
 8009da8:	681e      	ldr	r6, [r3, #0]
 8009daa:	e002      	b.n	8009db2 <_printf_i+0xee>
 8009dac:	0641      	lsls	r1, r0, #25
 8009dae:	d5fb      	bpl.n	8009da8 <_printf_i+0xe4>
 8009db0:	881e      	ldrh	r6, [r3, #0]
 8009db2:	2f6f      	cmp	r7, #111	; 0x6f
 8009db4:	bf0c      	ite	eq
 8009db6:	2308      	moveq	r3, #8
 8009db8:	230a      	movne	r3, #10
 8009dba:	4851      	ldr	r0, [pc, #324]	; (8009f00 <_printf_i+0x23c>)
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dc2:	6865      	ldr	r5, [r4, #4]
 8009dc4:	2d00      	cmp	r5, #0
 8009dc6:	bfa8      	it	ge
 8009dc8:	6821      	ldrge	r1, [r4, #0]
 8009dca:	60a5      	str	r5, [r4, #8]
 8009dcc:	bfa4      	itt	ge
 8009dce:	f021 0104 	bicge.w	r1, r1, #4
 8009dd2:	6021      	strge	r1, [r4, #0]
 8009dd4:	b90e      	cbnz	r6, 8009dda <_printf_i+0x116>
 8009dd6:	2d00      	cmp	r5, #0
 8009dd8:	d04b      	beq.n	8009e72 <_printf_i+0x1ae>
 8009dda:	4615      	mov	r5, r2
 8009ddc:	fbb6 f1f3 	udiv	r1, r6, r3
 8009de0:	fb03 6711 	mls	r7, r3, r1, r6
 8009de4:	5dc7      	ldrb	r7, [r0, r7]
 8009de6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009dea:	4637      	mov	r7, r6
 8009dec:	42bb      	cmp	r3, r7
 8009dee:	460e      	mov	r6, r1
 8009df0:	d9f4      	bls.n	8009ddc <_printf_i+0x118>
 8009df2:	2b08      	cmp	r3, #8
 8009df4:	d10b      	bne.n	8009e0e <_printf_i+0x14a>
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	07de      	lsls	r6, r3, #31
 8009dfa:	d508      	bpl.n	8009e0e <_printf_i+0x14a>
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	6861      	ldr	r1, [r4, #4]
 8009e00:	4299      	cmp	r1, r3
 8009e02:	bfde      	ittt	le
 8009e04:	2330      	movle	r3, #48	; 0x30
 8009e06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e0e:	1b52      	subs	r2, r2, r5
 8009e10:	6122      	str	r2, [r4, #16]
 8009e12:	464b      	mov	r3, r9
 8009e14:	4621      	mov	r1, r4
 8009e16:	4640      	mov	r0, r8
 8009e18:	f8cd a000 	str.w	sl, [sp]
 8009e1c:	aa03      	add	r2, sp, #12
 8009e1e:	f7ff fedf 	bl	8009be0 <_printf_common>
 8009e22:	3001      	adds	r0, #1
 8009e24:	d14a      	bne.n	8009ebc <_printf_i+0x1f8>
 8009e26:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2a:	b004      	add	sp, #16
 8009e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	f043 0320 	orr.w	r3, r3, #32
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	2778      	movs	r7, #120	; 0x78
 8009e3a:	4832      	ldr	r0, [pc, #200]	; (8009f04 <_printf_i+0x240>)
 8009e3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	6829      	ldr	r1, [r5, #0]
 8009e44:	061f      	lsls	r7, r3, #24
 8009e46:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e4a:	d402      	bmi.n	8009e52 <_printf_i+0x18e>
 8009e4c:	065f      	lsls	r7, r3, #25
 8009e4e:	bf48      	it	mi
 8009e50:	b2b6      	uxthmi	r6, r6
 8009e52:	07df      	lsls	r7, r3, #31
 8009e54:	bf48      	it	mi
 8009e56:	f043 0320 	orrmi.w	r3, r3, #32
 8009e5a:	6029      	str	r1, [r5, #0]
 8009e5c:	bf48      	it	mi
 8009e5e:	6023      	strmi	r3, [r4, #0]
 8009e60:	b91e      	cbnz	r6, 8009e6a <_printf_i+0x1a6>
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	f023 0320 	bic.w	r3, r3, #32
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	2310      	movs	r3, #16
 8009e6c:	e7a6      	b.n	8009dbc <_printf_i+0xf8>
 8009e6e:	4824      	ldr	r0, [pc, #144]	; (8009f00 <_printf_i+0x23c>)
 8009e70:	e7e4      	b.n	8009e3c <_printf_i+0x178>
 8009e72:	4615      	mov	r5, r2
 8009e74:	e7bd      	b.n	8009df2 <_printf_i+0x12e>
 8009e76:	682b      	ldr	r3, [r5, #0]
 8009e78:	6826      	ldr	r6, [r4, #0]
 8009e7a:	1d18      	adds	r0, r3, #4
 8009e7c:	6961      	ldr	r1, [r4, #20]
 8009e7e:	6028      	str	r0, [r5, #0]
 8009e80:	0635      	lsls	r5, r6, #24
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	d501      	bpl.n	8009e8a <_printf_i+0x1c6>
 8009e86:	6019      	str	r1, [r3, #0]
 8009e88:	e002      	b.n	8009e90 <_printf_i+0x1cc>
 8009e8a:	0670      	lsls	r0, r6, #25
 8009e8c:	d5fb      	bpl.n	8009e86 <_printf_i+0x1c2>
 8009e8e:	8019      	strh	r1, [r3, #0]
 8009e90:	2300      	movs	r3, #0
 8009e92:	4615      	mov	r5, r2
 8009e94:	6123      	str	r3, [r4, #16]
 8009e96:	e7bc      	b.n	8009e12 <_printf_i+0x14e>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	1d1a      	adds	r2, r3, #4
 8009e9e:	602a      	str	r2, [r5, #0]
 8009ea0:	681d      	ldr	r5, [r3, #0]
 8009ea2:	6862      	ldr	r2, [r4, #4]
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f000 fce4 	bl	800a872 <memchr>
 8009eaa:	b108      	cbz	r0, 8009eb0 <_printf_i+0x1ec>
 8009eac:	1b40      	subs	r0, r0, r5
 8009eae:	6060      	str	r0, [r4, #4]
 8009eb0:	6863      	ldr	r3, [r4, #4]
 8009eb2:	6123      	str	r3, [r4, #16]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eba:	e7aa      	b.n	8009e12 <_printf_i+0x14e>
 8009ebc:	462a      	mov	r2, r5
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	6923      	ldr	r3, [r4, #16]
 8009ec4:	47d0      	blx	sl
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d0ad      	beq.n	8009e26 <_printf_i+0x162>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	079b      	lsls	r3, r3, #30
 8009ece:	d413      	bmi.n	8009ef8 <_printf_i+0x234>
 8009ed0:	68e0      	ldr	r0, [r4, #12]
 8009ed2:	9b03      	ldr	r3, [sp, #12]
 8009ed4:	4298      	cmp	r0, r3
 8009ed6:	bfb8      	it	lt
 8009ed8:	4618      	movlt	r0, r3
 8009eda:	e7a6      	b.n	8009e2a <_printf_i+0x166>
 8009edc:	2301      	movs	r3, #1
 8009ede:	4632      	mov	r2, r6
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	47d0      	blx	sl
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d09d      	beq.n	8009e26 <_printf_i+0x162>
 8009eea:	3501      	adds	r5, #1
 8009eec:	68e3      	ldr	r3, [r4, #12]
 8009eee:	9903      	ldr	r1, [sp, #12]
 8009ef0:	1a5b      	subs	r3, r3, r1
 8009ef2:	42ab      	cmp	r3, r5
 8009ef4:	dcf2      	bgt.n	8009edc <_printf_i+0x218>
 8009ef6:	e7eb      	b.n	8009ed0 <_printf_i+0x20c>
 8009ef8:	2500      	movs	r5, #0
 8009efa:	f104 0619 	add.w	r6, r4, #25
 8009efe:	e7f5      	b.n	8009eec <_printf_i+0x228>
 8009f00:	0800e09c 	.word	0x0800e09c
 8009f04:	0800e0ad 	.word	0x0800e0ad

08009f08 <_scanf_float>:
 8009f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0c:	b087      	sub	sp, #28
 8009f0e:	9303      	str	r3, [sp, #12]
 8009f10:	688b      	ldr	r3, [r1, #8]
 8009f12:	4617      	mov	r7, r2
 8009f14:	1e5a      	subs	r2, r3, #1
 8009f16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f1a:	bf85      	ittet	hi
 8009f1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009f20:	195b      	addhi	r3, r3, r5
 8009f22:	2300      	movls	r3, #0
 8009f24:	9302      	strhi	r3, [sp, #8]
 8009f26:	bf88      	it	hi
 8009f28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f2c:	468b      	mov	fp, r1
 8009f2e:	f04f 0500 	mov.w	r5, #0
 8009f32:	bf8c      	ite	hi
 8009f34:	608b      	strhi	r3, [r1, #8]
 8009f36:	9302      	strls	r3, [sp, #8]
 8009f38:	680b      	ldr	r3, [r1, #0]
 8009f3a:	4680      	mov	r8, r0
 8009f3c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009f40:	f84b 3b1c 	str.w	r3, [fp], #28
 8009f44:	460c      	mov	r4, r1
 8009f46:	465e      	mov	r6, fp
 8009f48:	46aa      	mov	sl, r5
 8009f4a:	46a9      	mov	r9, r5
 8009f4c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009f50:	9501      	str	r5, [sp, #4]
 8009f52:	68a2      	ldr	r2, [r4, #8]
 8009f54:	b152      	cbz	r2, 8009f6c <_scanf_float+0x64>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	2b4e      	cmp	r3, #78	; 0x4e
 8009f5c:	d864      	bhi.n	800a028 <_scanf_float+0x120>
 8009f5e:	2b40      	cmp	r3, #64	; 0x40
 8009f60:	d83c      	bhi.n	8009fdc <_scanf_float+0xd4>
 8009f62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009f66:	b2c8      	uxtb	r0, r1
 8009f68:	280e      	cmp	r0, #14
 8009f6a:	d93a      	bls.n	8009fe2 <_scanf_float+0xda>
 8009f6c:	f1b9 0f00 	cmp.w	r9, #0
 8009f70:	d003      	beq.n	8009f7a <_scanf_float+0x72>
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f7e:	f1ba 0f01 	cmp.w	sl, #1
 8009f82:	f200 8113 	bhi.w	800a1ac <_scanf_float+0x2a4>
 8009f86:	455e      	cmp	r6, fp
 8009f88:	f200 8105 	bhi.w	800a196 <_scanf_float+0x28e>
 8009f8c:	2501      	movs	r5, #1
 8009f8e:	4628      	mov	r0, r5
 8009f90:	b007      	add	sp, #28
 8009f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009f9a:	2a0d      	cmp	r2, #13
 8009f9c:	d8e6      	bhi.n	8009f6c <_scanf_float+0x64>
 8009f9e:	a101      	add	r1, pc, #4	; (adr r1, 8009fa4 <_scanf_float+0x9c>)
 8009fa0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009fa4:	0800a0e3 	.word	0x0800a0e3
 8009fa8:	08009f6d 	.word	0x08009f6d
 8009fac:	08009f6d 	.word	0x08009f6d
 8009fb0:	08009f6d 	.word	0x08009f6d
 8009fb4:	0800a143 	.word	0x0800a143
 8009fb8:	0800a11b 	.word	0x0800a11b
 8009fbc:	08009f6d 	.word	0x08009f6d
 8009fc0:	08009f6d 	.word	0x08009f6d
 8009fc4:	0800a0f1 	.word	0x0800a0f1
 8009fc8:	08009f6d 	.word	0x08009f6d
 8009fcc:	08009f6d 	.word	0x08009f6d
 8009fd0:	08009f6d 	.word	0x08009f6d
 8009fd4:	08009f6d 	.word	0x08009f6d
 8009fd8:	0800a0a9 	.word	0x0800a0a9
 8009fdc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009fe0:	e7db      	b.n	8009f9a <_scanf_float+0x92>
 8009fe2:	290e      	cmp	r1, #14
 8009fe4:	d8c2      	bhi.n	8009f6c <_scanf_float+0x64>
 8009fe6:	a001      	add	r0, pc, #4	; (adr r0, 8009fec <_scanf_float+0xe4>)
 8009fe8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009fec:	0800a09b 	.word	0x0800a09b
 8009ff0:	08009f6d 	.word	0x08009f6d
 8009ff4:	0800a09b 	.word	0x0800a09b
 8009ff8:	0800a12f 	.word	0x0800a12f
 8009ffc:	08009f6d 	.word	0x08009f6d
 800a000:	0800a049 	.word	0x0800a049
 800a004:	0800a085 	.word	0x0800a085
 800a008:	0800a085 	.word	0x0800a085
 800a00c:	0800a085 	.word	0x0800a085
 800a010:	0800a085 	.word	0x0800a085
 800a014:	0800a085 	.word	0x0800a085
 800a018:	0800a085 	.word	0x0800a085
 800a01c:	0800a085 	.word	0x0800a085
 800a020:	0800a085 	.word	0x0800a085
 800a024:	0800a085 	.word	0x0800a085
 800a028:	2b6e      	cmp	r3, #110	; 0x6e
 800a02a:	d809      	bhi.n	800a040 <_scanf_float+0x138>
 800a02c:	2b60      	cmp	r3, #96	; 0x60
 800a02e:	d8b2      	bhi.n	8009f96 <_scanf_float+0x8e>
 800a030:	2b54      	cmp	r3, #84	; 0x54
 800a032:	d077      	beq.n	800a124 <_scanf_float+0x21c>
 800a034:	2b59      	cmp	r3, #89	; 0x59
 800a036:	d199      	bne.n	8009f6c <_scanf_float+0x64>
 800a038:	2d07      	cmp	r5, #7
 800a03a:	d197      	bne.n	8009f6c <_scanf_float+0x64>
 800a03c:	2508      	movs	r5, #8
 800a03e:	e029      	b.n	800a094 <_scanf_float+0x18c>
 800a040:	2b74      	cmp	r3, #116	; 0x74
 800a042:	d06f      	beq.n	800a124 <_scanf_float+0x21c>
 800a044:	2b79      	cmp	r3, #121	; 0x79
 800a046:	e7f6      	b.n	800a036 <_scanf_float+0x12e>
 800a048:	6821      	ldr	r1, [r4, #0]
 800a04a:	05c8      	lsls	r0, r1, #23
 800a04c:	d51a      	bpl.n	800a084 <_scanf_float+0x17c>
 800a04e:	9b02      	ldr	r3, [sp, #8]
 800a050:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a054:	6021      	str	r1, [r4, #0]
 800a056:	f109 0901 	add.w	r9, r9, #1
 800a05a:	b11b      	cbz	r3, 800a064 <_scanf_float+0x15c>
 800a05c:	3b01      	subs	r3, #1
 800a05e:	3201      	adds	r2, #1
 800a060:	9302      	str	r3, [sp, #8]
 800a062:	60a2      	str	r2, [r4, #8]
 800a064:	68a3      	ldr	r3, [r4, #8]
 800a066:	3b01      	subs	r3, #1
 800a068:	60a3      	str	r3, [r4, #8]
 800a06a:	6923      	ldr	r3, [r4, #16]
 800a06c:	3301      	adds	r3, #1
 800a06e:	6123      	str	r3, [r4, #16]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3b01      	subs	r3, #1
 800a074:	2b00      	cmp	r3, #0
 800a076:	607b      	str	r3, [r7, #4]
 800a078:	f340 8084 	ble.w	800a184 <_scanf_float+0x27c>
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	3301      	adds	r3, #1
 800a080:	603b      	str	r3, [r7, #0]
 800a082:	e766      	b.n	8009f52 <_scanf_float+0x4a>
 800a084:	eb1a 0f05 	cmn.w	sl, r5
 800a088:	f47f af70 	bne.w	8009f6c <_scanf_float+0x64>
 800a08c:	6822      	ldr	r2, [r4, #0]
 800a08e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a092:	6022      	str	r2, [r4, #0]
 800a094:	f806 3b01 	strb.w	r3, [r6], #1
 800a098:	e7e4      	b.n	800a064 <_scanf_float+0x15c>
 800a09a:	6822      	ldr	r2, [r4, #0]
 800a09c:	0610      	lsls	r0, r2, #24
 800a09e:	f57f af65 	bpl.w	8009f6c <_scanf_float+0x64>
 800a0a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0a6:	e7f4      	b.n	800a092 <_scanf_float+0x18a>
 800a0a8:	f1ba 0f00 	cmp.w	sl, #0
 800a0ac:	d10e      	bne.n	800a0cc <_scanf_float+0x1c4>
 800a0ae:	f1b9 0f00 	cmp.w	r9, #0
 800a0b2:	d10e      	bne.n	800a0d2 <_scanf_float+0x1ca>
 800a0b4:	6822      	ldr	r2, [r4, #0]
 800a0b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a0ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a0be:	d108      	bne.n	800a0d2 <_scanf_float+0x1ca>
 800a0c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a0c4:	f04f 0a01 	mov.w	sl, #1
 800a0c8:	6022      	str	r2, [r4, #0]
 800a0ca:	e7e3      	b.n	800a094 <_scanf_float+0x18c>
 800a0cc:	f1ba 0f02 	cmp.w	sl, #2
 800a0d0:	d055      	beq.n	800a17e <_scanf_float+0x276>
 800a0d2:	2d01      	cmp	r5, #1
 800a0d4:	d002      	beq.n	800a0dc <_scanf_float+0x1d4>
 800a0d6:	2d04      	cmp	r5, #4
 800a0d8:	f47f af48 	bne.w	8009f6c <_scanf_float+0x64>
 800a0dc:	3501      	adds	r5, #1
 800a0de:	b2ed      	uxtb	r5, r5
 800a0e0:	e7d8      	b.n	800a094 <_scanf_float+0x18c>
 800a0e2:	f1ba 0f01 	cmp.w	sl, #1
 800a0e6:	f47f af41 	bne.w	8009f6c <_scanf_float+0x64>
 800a0ea:	f04f 0a02 	mov.w	sl, #2
 800a0ee:	e7d1      	b.n	800a094 <_scanf_float+0x18c>
 800a0f0:	b97d      	cbnz	r5, 800a112 <_scanf_float+0x20a>
 800a0f2:	f1b9 0f00 	cmp.w	r9, #0
 800a0f6:	f47f af3c 	bne.w	8009f72 <_scanf_float+0x6a>
 800a0fa:	6822      	ldr	r2, [r4, #0]
 800a0fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a100:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a104:	f47f af39 	bne.w	8009f7a <_scanf_float+0x72>
 800a108:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a10c:	2501      	movs	r5, #1
 800a10e:	6022      	str	r2, [r4, #0]
 800a110:	e7c0      	b.n	800a094 <_scanf_float+0x18c>
 800a112:	2d03      	cmp	r5, #3
 800a114:	d0e2      	beq.n	800a0dc <_scanf_float+0x1d4>
 800a116:	2d05      	cmp	r5, #5
 800a118:	e7de      	b.n	800a0d8 <_scanf_float+0x1d0>
 800a11a:	2d02      	cmp	r5, #2
 800a11c:	f47f af26 	bne.w	8009f6c <_scanf_float+0x64>
 800a120:	2503      	movs	r5, #3
 800a122:	e7b7      	b.n	800a094 <_scanf_float+0x18c>
 800a124:	2d06      	cmp	r5, #6
 800a126:	f47f af21 	bne.w	8009f6c <_scanf_float+0x64>
 800a12a:	2507      	movs	r5, #7
 800a12c:	e7b2      	b.n	800a094 <_scanf_float+0x18c>
 800a12e:	6822      	ldr	r2, [r4, #0]
 800a130:	0591      	lsls	r1, r2, #22
 800a132:	f57f af1b 	bpl.w	8009f6c <_scanf_float+0x64>
 800a136:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a13a:	6022      	str	r2, [r4, #0]
 800a13c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a140:	e7a8      	b.n	800a094 <_scanf_float+0x18c>
 800a142:	6822      	ldr	r2, [r4, #0]
 800a144:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a148:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a14c:	d006      	beq.n	800a15c <_scanf_float+0x254>
 800a14e:	0550      	lsls	r0, r2, #21
 800a150:	f57f af0c 	bpl.w	8009f6c <_scanf_float+0x64>
 800a154:	f1b9 0f00 	cmp.w	r9, #0
 800a158:	f43f af0f 	beq.w	8009f7a <_scanf_float+0x72>
 800a15c:	0591      	lsls	r1, r2, #22
 800a15e:	bf58      	it	pl
 800a160:	9901      	ldrpl	r1, [sp, #4]
 800a162:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a166:	bf58      	it	pl
 800a168:	eba9 0101 	subpl.w	r1, r9, r1
 800a16c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a170:	f04f 0900 	mov.w	r9, #0
 800a174:	bf58      	it	pl
 800a176:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a17a:	6022      	str	r2, [r4, #0]
 800a17c:	e78a      	b.n	800a094 <_scanf_float+0x18c>
 800a17e:	f04f 0a03 	mov.w	sl, #3
 800a182:	e787      	b.n	800a094 <_scanf_float+0x18c>
 800a184:	4639      	mov	r1, r7
 800a186:	4640      	mov	r0, r8
 800a188:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a18c:	4798      	blx	r3
 800a18e:	2800      	cmp	r0, #0
 800a190:	f43f aedf 	beq.w	8009f52 <_scanf_float+0x4a>
 800a194:	e6ea      	b.n	8009f6c <_scanf_float+0x64>
 800a196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a19a:	463a      	mov	r2, r7
 800a19c:	4640      	mov	r0, r8
 800a19e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1a2:	4798      	blx	r3
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	6123      	str	r3, [r4, #16]
 800a1aa:	e6ec      	b.n	8009f86 <_scanf_float+0x7e>
 800a1ac:	1e6b      	subs	r3, r5, #1
 800a1ae:	2b06      	cmp	r3, #6
 800a1b0:	d825      	bhi.n	800a1fe <_scanf_float+0x2f6>
 800a1b2:	2d02      	cmp	r5, #2
 800a1b4:	d836      	bhi.n	800a224 <_scanf_float+0x31c>
 800a1b6:	455e      	cmp	r6, fp
 800a1b8:	f67f aee8 	bls.w	8009f8c <_scanf_float+0x84>
 800a1bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1c0:	463a      	mov	r2, r7
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1c8:	4798      	blx	r3
 800a1ca:	6923      	ldr	r3, [r4, #16]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	6123      	str	r3, [r4, #16]
 800a1d0:	e7f1      	b.n	800a1b6 <_scanf_float+0x2ae>
 800a1d2:	9802      	ldr	r0, [sp, #8]
 800a1d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a1dc:	463a      	mov	r2, r7
 800a1de:	9002      	str	r0, [sp, #8]
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	4798      	blx	r3
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	6123      	str	r3, [r4, #16]
 800a1ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ee:	fa5f fa8a 	uxtb.w	sl, sl
 800a1f2:	f1ba 0f02 	cmp.w	sl, #2
 800a1f6:	d1ec      	bne.n	800a1d2 <_scanf_float+0x2ca>
 800a1f8:	3d03      	subs	r5, #3
 800a1fa:	b2ed      	uxtb	r5, r5
 800a1fc:	1b76      	subs	r6, r6, r5
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	05da      	lsls	r2, r3, #23
 800a202:	d52f      	bpl.n	800a264 <_scanf_float+0x35c>
 800a204:	055b      	lsls	r3, r3, #21
 800a206:	d510      	bpl.n	800a22a <_scanf_float+0x322>
 800a208:	455e      	cmp	r6, fp
 800a20a:	f67f aebf 	bls.w	8009f8c <_scanf_float+0x84>
 800a20e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a212:	463a      	mov	r2, r7
 800a214:	4640      	mov	r0, r8
 800a216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a21a:	4798      	blx	r3
 800a21c:	6923      	ldr	r3, [r4, #16]
 800a21e:	3b01      	subs	r3, #1
 800a220:	6123      	str	r3, [r4, #16]
 800a222:	e7f1      	b.n	800a208 <_scanf_float+0x300>
 800a224:	46aa      	mov	sl, r5
 800a226:	9602      	str	r6, [sp, #8]
 800a228:	e7df      	b.n	800a1ea <_scanf_float+0x2e2>
 800a22a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a22e:	6923      	ldr	r3, [r4, #16]
 800a230:	2965      	cmp	r1, #101	; 0x65
 800a232:	f103 33ff 	add.w	r3, r3, #4294967295
 800a236:	f106 35ff 	add.w	r5, r6, #4294967295
 800a23a:	6123      	str	r3, [r4, #16]
 800a23c:	d00c      	beq.n	800a258 <_scanf_float+0x350>
 800a23e:	2945      	cmp	r1, #69	; 0x45
 800a240:	d00a      	beq.n	800a258 <_scanf_float+0x350>
 800a242:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a246:	463a      	mov	r2, r7
 800a248:	4640      	mov	r0, r8
 800a24a:	4798      	blx	r3
 800a24c:	6923      	ldr	r3, [r4, #16]
 800a24e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a252:	3b01      	subs	r3, #1
 800a254:	1eb5      	subs	r5, r6, #2
 800a256:	6123      	str	r3, [r4, #16]
 800a258:	463a      	mov	r2, r7
 800a25a:	4640      	mov	r0, r8
 800a25c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a260:	4798      	blx	r3
 800a262:	462e      	mov	r6, r5
 800a264:	6825      	ldr	r5, [r4, #0]
 800a266:	f015 0510 	ands.w	r5, r5, #16
 800a26a:	d155      	bne.n	800a318 <_scanf_float+0x410>
 800a26c:	7035      	strb	r5, [r6, #0]
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a278:	d11d      	bne.n	800a2b6 <_scanf_float+0x3ae>
 800a27a:	9b01      	ldr	r3, [sp, #4]
 800a27c:	454b      	cmp	r3, r9
 800a27e:	eba3 0209 	sub.w	r2, r3, r9
 800a282:	d125      	bne.n	800a2d0 <_scanf_float+0x3c8>
 800a284:	2200      	movs	r2, #0
 800a286:	4659      	mov	r1, fp
 800a288:	4640      	mov	r0, r8
 800a28a:	f002 fd31 	bl	800ccf0 <_strtod_r>
 800a28e:	9b03      	ldr	r3, [sp, #12]
 800a290:	f8d4 c000 	ldr.w	ip, [r4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f01c 0f02 	tst.w	ip, #2
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	f103 0204 	add.w	r2, r3, #4
 800a2a2:	d020      	beq.n	800a2e6 <_scanf_float+0x3de>
 800a2a4:	9903      	ldr	r1, [sp, #12]
 800a2a6:	600a      	str	r2, [r1, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	e9c3 6700 	strd	r6, r7, [r3]
 800a2ae:	68e3      	ldr	r3, [r4, #12]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	60e3      	str	r3, [r4, #12]
 800a2b4:	e66b      	b.n	8009f8e <_scanf_float+0x86>
 800a2b6:	9b04      	ldr	r3, [sp, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d0e3      	beq.n	800a284 <_scanf_float+0x37c>
 800a2bc:	9905      	ldr	r1, [sp, #20]
 800a2be:	230a      	movs	r3, #10
 800a2c0:	462a      	mov	r2, r5
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	3101      	adds	r1, #1
 800a2c6:	f002 fd97 	bl	800cdf8 <_strtol_r>
 800a2ca:	9b04      	ldr	r3, [sp, #16]
 800a2cc:	9e05      	ldr	r6, [sp, #20]
 800a2ce:	1ac2      	subs	r2, r0, r3
 800a2d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a2d4:	429e      	cmp	r6, r3
 800a2d6:	bf28      	it	cs
 800a2d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a2dc:	4630      	mov	r0, r6
 800a2de:	490f      	ldr	r1, [pc, #60]	; (800a31c <_scanf_float+0x414>)
 800a2e0:	f000 f950 	bl	800a584 <siprintf>
 800a2e4:	e7ce      	b.n	800a284 <_scanf_float+0x37c>
 800a2e6:	f01c 0f04 	tst.w	ip, #4
 800a2ea:	d1db      	bne.n	800a2a4 <_scanf_float+0x39c>
 800a2ec:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a2f0:	f8cc 2000 	str.w	r2, [ip]
 800a2f4:	f8d3 8000 	ldr.w	r8, [r3]
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	f7f6 fb86 	bl	8000a0c <__aeabi_dcmpun>
 800a300:	b128      	cbz	r0, 800a30e <_scanf_float+0x406>
 800a302:	4807      	ldr	r0, [pc, #28]	; (800a320 <_scanf_float+0x418>)
 800a304:	f000 fad2 	bl	800a8ac <nanf>
 800a308:	f8c8 0000 	str.w	r0, [r8]
 800a30c:	e7cf      	b.n	800a2ae <_scanf_float+0x3a6>
 800a30e:	4630      	mov	r0, r6
 800a310:	4639      	mov	r1, r7
 800a312:	f7f6 fbd9 	bl	8000ac8 <__aeabi_d2f>
 800a316:	e7f7      	b.n	800a308 <_scanf_float+0x400>
 800a318:	2500      	movs	r5, #0
 800a31a:	e638      	b.n	8009f8e <_scanf_float+0x86>
 800a31c:	0800e0be 	.word	0x0800e0be
 800a320:	0800e455 	.word	0x0800e455

0800a324 <std>:
 800a324:	2300      	movs	r3, #0
 800a326:	b510      	push	{r4, lr}
 800a328:	4604      	mov	r4, r0
 800a32a:	e9c0 3300 	strd	r3, r3, [r0]
 800a32e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a332:	6083      	str	r3, [r0, #8]
 800a334:	8181      	strh	r1, [r0, #12]
 800a336:	6643      	str	r3, [r0, #100]	; 0x64
 800a338:	81c2      	strh	r2, [r0, #14]
 800a33a:	6183      	str	r3, [r0, #24]
 800a33c:	4619      	mov	r1, r3
 800a33e:	2208      	movs	r2, #8
 800a340:	305c      	adds	r0, #92	; 0x5c
 800a342:	f000 fa17 	bl	800a774 <memset>
 800a346:	4b0d      	ldr	r3, [pc, #52]	; (800a37c <std+0x58>)
 800a348:	6224      	str	r4, [r4, #32]
 800a34a:	6263      	str	r3, [r4, #36]	; 0x24
 800a34c:	4b0c      	ldr	r3, [pc, #48]	; (800a380 <std+0x5c>)
 800a34e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a350:	4b0c      	ldr	r3, [pc, #48]	; (800a384 <std+0x60>)
 800a352:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a354:	4b0c      	ldr	r3, [pc, #48]	; (800a388 <std+0x64>)
 800a356:	6323      	str	r3, [r4, #48]	; 0x30
 800a358:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <std+0x68>)
 800a35a:	429c      	cmp	r4, r3
 800a35c:	d006      	beq.n	800a36c <std+0x48>
 800a35e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a362:	4294      	cmp	r4, r2
 800a364:	d002      	beq.n	800a36c <std+0x48>
 800a366:	33d0      	adds	r3, #208	; 0xd0
 800a368:	429c      	cmp	r4, r3
 800a36a:	d105      	bne.n	800a378 <std+0x54>
 800a36c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a374:	f000 ba7a 	b.w	800a86c <__retarget_lock_init_recursive>
 800a378:	bd10      	pop	{r4, pc}
 800a37a:	bf00      	nop
 800a37c:	0800a5c5 	.word	0x0800a5c5
 800a380:	0800a5e7 	.word	0x0800a5e7
 800a384:	0800a61f 	.word	0x0800a61f
 800a388:	0800a643 	.word	0x0800a643
 800a38c:	20001d48 	.word	0x20001d48

0800a390 <stdio_exit_handler>:
 800a390:	4a02      	ldr	r2, [pc, #8]	; (800a39c <stdio_exit_handler+0xc>)
 800a392:	4903      	ldr	r1, [pc, #12]	; (800a3a0 <stdio_exit_handler+0x10>)
 800a394:	4803      	ldr	r0, [pc, #12]	; (800a3a4 <stdio_exit_handler+0x14>)
 800a396:	f000 b869 	b.w	800a46c <_fwalk_sglue>
 800a39a:	bf00      	nop
 800a39c:	20000010 	.word	0x20000010
 800a3a0:	0800d435 	.word	0x0800d435
 800a3a4:	2000001c 	.word	0x2000001c

0800a3a8 <cleanup_stdio>:
 800a3a8:	6841      	ldr	r1, [r0, #4]
 800a3aa:	4b0c      	ldr	r3, [pc, #48]	; (800a3dc <cleanup_stdio+0x34>)
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	4299      	cmp	r1, r3
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	d001      	beq.n	800a3b8 <cleanup_stdio+0x10>
 800a3b4:	f003 f83e 	bl	800d434 <_fflush_r>
 800a3b8:	68a1      	ldr	r1, [r4, #8]
 800a3ba:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <cleanup_stdio+0x38>)
 800a3bc:	4299      	cmp	r1, r3
 800a3be:	d002      	beq.n	800a3c6 <cleanup_stdio+0x1e>
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f003 f837 	bl	800d434 <_fflush_r>
 800a3c6:	68e1      	ldr	r1, [r4, #12]
 800a3c8:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <cleanup_stdio+0x3c>)
 800a3ca:	4299      	cmp	r1, r3
 800a3cc:	d004      	beq.n	800a3d8 <cleanup_stdio+0x30>
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3d4:	f003 b82e 	b.w	800d434 <_fflush_r>
 800a3d8:	bd10      	pop	{r4, pc}
 800a3da:	bf00      	nop
 800a3dc:	20001d48 	.word	0x20001d48
 800a3e0:	20001db0 	.word	0x20001db0
 800a3e4:	20001e18 	.word	0x20001e18

0800a3e8 <global_stdio_init.part.0>:
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	4b0b      	ldr	r3, [pc, #44]	; (800a418 <global_stdio_init.part.0+0x30>)
 800a3ec:	4c0b      	ldr	r4, [pc, #44]	; (800a41c <global_stdio_init.part.0+0x34>)
 800a3ee:	4a0c      	ldr	r2, [pc, #48]	; (800a420 <global_stdio_init.part.0+0x38>)
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	2104      	movs	r1, #4
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f7ff ff94 	bl	800a324 <std>
 800a3fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a400:	2201      	movs	r2, #1
 800a402:	2109      	movs	r1, #9
 800a404:	f7ff ff8e 	bl	800a324 <std>
 800a408:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a40c:	2202      	movs	r2, #2
 800a40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a412:	2112      	movs	r1, #18
 800a414:	f7ff bf86 	b.w	800a324 <std>
 800a418:	20001e80 	.word	0x20001e80
 800a41c:	20001d48 	.word	0x20001d48
 800a420:	0800a391 	.word	0x0800a391

0800a424 <__sfp_lock_acquire>:
 800a424:	4801      	ldr	r0, [pc, #4]	; (800a42c <__sfp_lock_acquire+0x8>)
 800a426:	f000 ba22 	b.w	800a86e <__retarget_lock_acquire_recursive>
 800a42a:	bf00      	nop
 800a42c:	20001e89 	.word	0x20001e89

0800a430 <__sfp_lock_release>:
 800a430:	4801      	ldr	r0, [pc, #4]	; (800a438 <__sfp_lock_release+0x8>)
 800a432:	f000 ba1d 	b.w	800a870 <__retarget_lock_release_recursive>
 800a436:	bf00      	nop
 800a438:	20001e89 	.word	0x20001e89

0800a43c <__sinit>:
 800a43c:	b510      	push	{r4, lr}
 800a43e:	4604      	mov	r4, r0
 800a440:	f7ff fff0 	bl	800a424 <__sfp_lock_acquire>
 800a444:	6a23      	ldr	r3, [r4, #32]
 800a446:	b11b      	cbz	r3, 800a450 <__sinit+0x14>
 800a448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a44c:	f7ff bff0 	b.w	800a430 <__sfp_lock_release>
 800a450:	4b04      	ldr	r3, [pc, #16]	; (800a464 <__sinit+0x28>)
 800a452:	6223      	str	r3, [r4, #32]
 800a454:	4b04      	ldr	r3, [pc, #16]	; (800a468 <__sinit+0x2c>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1f5      	bne.n	800a448 <__sinit+0xc>
 800a45c:	f7ff ffc4 	bl	800a3e8 <global_stdio_init.part.0>
 800a460:	e7f2      	b.n	800a448 <__sinit+0xc>
 800a462:	bf00      	nop
 800a464:	0800a3a9 	.word	0x0800a3a9
 800a468:	20001e80 	.word	0x20001e80

0800a46c <_fwalk_sglue>:
 800a46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a470:	4607      	mov	r7, r0
 800a472:	4688      	mov	r8, r1
 800a474:	4614      	mov	r4, r2
 800a476:	2600      	movs	r6, #0
 800a478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a47c:	f1b9 0901 	subs.w	r9, r9, #1
 800a480:	d505      	bpl.n	800a48e <_fwalk_sglue+0x22>
 800a482:	6824      	ldr	r4, [r4, #0]
 800a484:	2c00      	cmp	r4, #0
 800a486:	d1f7      	bne.n	800a478 <_fwalk_sglue+0xc>
 800a488:	4630      	mov	r0, r6
 800a48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d907      	bls.n	800a4a4 <_fwalk_sglue+0x38>
 800a494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a498:	3301      	adds	r3, #1
 800a49a:	d003      	beq.n	800a4a4 <_fwalk_sglue+0x38>
 800a49c:	4629      	mov	r1, r5
 800a49e:	4638      	mov	r0, r7
 800a4a0:	47c0      	blx	r8
 800a4a2:	4306      	orrs	r6, r0
 800a4a4:	3568      	adds	r5, #104	; 0x68
 800a4a6:	e7e9      	b.n	800a47c <_fwalk_sglue+0x10>

0800a4a8 <iprintf>:
 800a4a8:	b40f      	push	{r0, r1, r2, r3}
 800a4aa:	b507      	push	{r0, r1, r2, lr}
 800a4ac:	4906      	ldr	r1, [pc, #24]	; (800a4c8 <iprintf+0x20>)
 800a4ae:	ab04      	add	r3, sp, #16
 800a4b0:	6808      	ldr	r0, [r1, #0]
 800a4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4b6:	6881      	ldr	r1, [r0, #8]
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	f002 fe1f 	bl	800d0fc <_vfiprintf_r>
 800a4be:	b003      	add	sp, #12
 800a4c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4c4:	b004      	add	sp, #16
 800a4c6:	4770      	bx	lr
 800a4c8:	20000068 	.word	0x20000068

0800a4cc <_puts_r>:
 800a4cc:	6a03      	ldr	r3, [r0, #32]
 800a4ce:	b570      	push	{r4, r5, r6, lr}
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	460e      	mov	r6, r1
 800a4d4:	6884      	ldr	r4, [r0, #8]
 800a4d6:	b90b      	cbnz	r3, 800a4dc <_puts_r+0x10>
 800a4d8:	f7ff ffb0 	bl	800a43c <__sinit>
 800a4dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4de:	07db      	lsls	r3, r3, #31
 800a4e0:	d405      	bmi.n	800a4ee <_puts_r+0x22>
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	0598      	lsls	r0, r3, #22
 800a4e6:	d402      	bmi.n	800a4ee <_puts_r+0x22>
 800a4e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ea:	f000 f9c0 	bl	800a86e <__retarget_lock_acquire_recursive>
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	0719      	lsls	r1, r3, #28
 800a4f2:	d513      	bpl.n	800a51c <_puts_r+0x50>
 800a4f4:	6923      	ldr	r3, [r4, #16]
 800a4f6:	b18b      	cbz	r3, 800a51c <_puts_r+0x50>
 800a4f8:	3e01      	subs	r6, #1
 800a4fa:	68a3      	ldr	r3, [r4, #8]
 800a4fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a500:	3b01      	subs	r3, #1
 800a502:	60a3      	str	r3, [r4, #8]
 800a504:	b9e9      	cbnz	r1, 800a542 <_puts_r+0x76>
 800a506:	2b00      	cmp	r3, #0
 800a508:	da2e      	bge.n	800a568 <_puts_r+0x9c>
 800a50a:	4622      	mov	r2, r4
 800a50c:	210a      	movs	r1, #10
 800a50e:	4628      	mov	r0, r5
 800a510:	f000 f89b 	bl	800a64a <__swbuf_r>
 800a514:	3001      	adds	r0, #1
 800a516:	d007      	beq.n	800a528 <_puts_r+0x5c>
 800a518:	250a      	movs	r5, #10
 800a51a:	e007      	b.n	800a52c <_puts_r+0x60>
 800a51c:	4621      	mov	r1, r4
 800a51e:	4628      	mov	r0, r5
 800a520:	f000 f8d0 	bl	800a6c4 <__swsetup_r>
 800a524:	2800      	cmp	r0, #0
 800a526:	d0e7      	beq.n	800a4f8 <_puts_r+0x2c>
 800a528:	f04f 35ff 	mov.w	r5, #4294967295
 800a52c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a52e:	07da      	lsls	r2, r3, #31
 800a530:	d405      	bmi.n	800a53e <_puts_r+0x72>
 800a532:	89a3      	ldrh	r3, [r4, #12]
 800a534:	059b      	lsls	r3, r3, #22
 800a536:	d402      	bmi.n	800a53e <_puts_r+0x72>
 800a538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a53a:	f000 f999 	bl	800a870 <__retarget_lock_release_recursive>
 800a53e:	4628      	mov	r0, r5
 800a540:	bd70      	pop	{r4, r5, r6, pc}
 800a542:	2b00      	cmp	r3, #0
 800a544:	da04      	bge.n	800a550 <_puts_r+0x84>
 800a546:	69a2      	ldr	r2, [r4, #24]
 800a548:	429a      	cmp	r2, r3
 800a54a:	dc06      	bgt.n	800a55a <_puts_r+0x8e>
 800a54c:	290a      	cmp	r1, #10
 800a54e:	d004      	beq.n	800a55a <_puts_r+0x8e>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	6022      	str	r2, [r4, #0]
 800a556:	7019      	strb	r1, [r3, #0]
 800a558:	e7cf      	b.n	800a4fa <_puts_r+0x2e>
 800a55a:	4622      	mov	r2, r4
 800a55c:	4628      	mov	r0, r5
 800a55e:	f000 f874 	bl	800a64a <__swbuf_r>
 800a562:	3001      	adds	r0, #1
 800a564:	d1c9      	bne.n	800a4fa <_puts_r+0x2e>
 800a566:	e7df      	b.n	800a528 <_puts_r+0x5c>
 800a568:	250a      	movs	r5, #10
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	6022      	str	r2, [r4, #0]
 800a570:	701d      	strb	r5, [r3, #0]
 800a572:	e7db      	b.n	800a52c <_puts_r+0x60>

0800a574 <puts>:
 800a574:	4b02      	ldr	r3, [pc, #8]	; (800a580 <puts+0xc>)
 800a576:	4601      	mov	r1, r0
 800a578:	6818      	ldr	r0, [r3, #0]
 800a57a:	f7ff bfa7 	b.w	800a4cc <_puts_r>
 800a57e:	bf00      	nop
 800a580:	20000068 	.word	0x20000068

0800a584 <siprintf>:
 800a584:	b40e      	push	{r1, r2, r3}
 800a586:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a58a:	b500      	push	{lr}
 800a58c:	b09c      	sub	sp, #112	; 0x70
 800a58e:	ab1d      	add	r3, sp, #116	; 0x74
 800a590:	9002      	str	r0, [sp, #8]
 800a592:	9006      	str	r0, [sp, #24]
 800a594:	9107      	str	r1, [sp, #28]
 800a596:	9104      	str	r1, [sp, #16]
 800a598:	4808      	ldr	r0, [pc, #32]	; (800a5bc <siprintf+0x38>)
 800a59a:	4909      	ldr	r1, [pc, #36]	; (800a5c0 <siprintf+0x3c>)
 800a59c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a0:	9105      	str	r1, [sp, #20]
 800a5a2:	6800      	ldr	r0, [r0, #0]
 800a5a4:	a902      	add	r1, sp, #8
 800a5a6:	9301      	str	r3, [sp, #4]
 800a5a8:	f002 fc82 	bl	800ceb0 <_svfiprintf_r>
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	9b02      	ldr	r3, [sp, #8]
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	b01c      	add	sp, #112	; 0x70
 800a5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5b8:	b003      	add	sp, #12
 800a5ba:	4770      	bx	lr
 800a5bc:	20000068 	.word	0x20000068
 800a5c0:	ffff0208 	.word	0xffff0208

0800a5c4 <__sread>:
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5cc:	f000 f900 	bl	800a7d0 <_read_r>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	bfab      	itete	ge
 800a5d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5d8:	181b      	addge	r3, r3, r0
 800a5da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5de:	bfac      	ite	ge
 800a5e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5e2:	81a3      	strhlt	r3, [r4, #12]
 800a5e4:	bd10      	pop	{r4, pc}

0800a5e6 <__swrite>:
 800a5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ea:	461f      	mov	r7, r3
 800a5ec:	898b      	ldrh	r3, [r1, #12]
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	05db      	lsls	r3, r3, #23
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	4616      	mov	r6, r2
 800a5f6:	d505      	bpl.n	800a604 <__swrite+0x1e>
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a600:	f000 f8d4 	bl	800a7ac <_lseek_r>
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	4632      	mov	r2, r6
 800a608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a60c:	81a3      	strh	r3, [r4, #12]
 800a60e:	4628      	mov	r0, r5
 800a610:	463b      	mov	r3, r7
 800a612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a61a:	f000 b8eb 	b.w	800a7f4 <_write_r>

0800a61e <__sseek>:
 800a61e:	b510      	push	{r4, lr}
 800a620:	460c      	mov	r4, r1
 800a622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a626:	f000 f8c1 	bl	800a7ac <_lseek_r>
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	bf15      	itete	ne
 800a630:	6560      	strne	r0, [r4, #84]	; 0x54
 800a632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a63a:	81a3      	strheq	r3, [r4, #12]
 800a63c:	bf18      	it	ne
 800a63e:	81a3      	strhne	r3, [r4, #12]
 800a640:	bd10      	pop	{r4, pc}

0800a642 <__sclose>:
 800a642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a646:	f000 b8a1 	b.w	800a78c <_close_r>

0800a64a <__swbuf_r>:
 800a64a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64c:	460e      	mov	r6, r1
 800a64e:	4614      	mov	r4, r2
 800a650:	4605      	mov	r5, r0
 800a652:	b118      	cbz	r0, 800a65c <__swbuf_r+0x12>
 800a654:	6a03      	ldr	r3, [r0, #32]
 800a656:	b90b      	cbnz	r3, 800a65c <__swbuf_r+0x12>
 800a658:	f7ff fef0 	bl	800a43c <__sinit>
 800a65c:	69a3      	ldr	r3, [r4, #24]
 800a65e:	60a3      	str	r3, [r4, #8]
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	071a      	lsls	r2, r3, #28
 800a664:	d525      	bpl.n	800a6b2 <__swbuf_r+0x68>
 800a666:	6923      	ldr	r3, [r4, #16]
 800a668:	b31b      	cbz	r3, 800a6b2 <__swbuf_r+0x68>
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	6922      	ldr	r2, [r4, #16]
 800a66e:	b2f6      	uxtb	r6, r6
 800a670:	1a98      	subs	r0, r3, r2
 800a672:	6963      	ldr	r3, [r4, #20]
 800a674:	4637      	mov	r7, r6
 800a676:	4283      	cmp	r3, r0
 800a678:	dc04      	bgt.n	800a684 <__swbuf_r+0x3a>
 800a67a:	4621      	mov	r1, r4
 800a67c:	4628      	mov	r0, r5
 800a67e:	f002 fed9 	bl	800d434 <_fflush_r>
 800a682:	b9e0      	cbnz	r0, 800a6be <__swbuf_r+0x74>
 800a684:	68a3      	ldr	r3, [r4, #8]
 800a686:	3b01      	subs	r3, #1
 800a688:	60a3      	str	r3, [r4, #8]
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	1c5a      	adds	r2, r3, #1
 800a68e:	6022      	str	r2, [r4, #0]
 800a690:	701e      	strb	r6, [r3, #0]
 800a692:	6962      	ldr	r2, [r4, #20]
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	429a      	cmp	r2, r3
 800a698:	d004      	beq.n	800a6a4 <__swbuf_r+0x5a>
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	07db      	lsls	r3, r3, #31
 800a69e:	d506      	bpl.n	800a6ae <__swbuf_r+0x64>
 800a6a0:	2e0a      	cmp	r6, #10
 800a6a2:	d104      	bne.n	800a6ae <__swbuf_r+0x64>
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f002 fec4 	bl	800d434 <_fflush_r>
 800a6ac:	b938      	cbnz	r0, 800a6be <__swbuf_r+0x74>
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	f000 f805 	bl	800a6c4 <__swsetup_r>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d0d5      	beq.n	800a66a <__swbuf_r+0x20>
 800a6be:	f04f 37ff 	mov.w	r7, #4294967295
 800a6c2:	e7f4      	b.n	800a6ae <__swbuf_r+0x64>

0800a6c4 <__swsetup_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4b2a      	ldr	r3, [pc, #168]	; (800a770 <__swsetup_r+0xac>)
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	6818      	ldr	r0, [r3, #0]
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	b118      	cbz	r0, 800a6d8 <__swsetup_r+0x14>
 800a6d0:	6a03      	ldr	r3, [r0, #32]
 800a6d2:	b90b      	cbnz	r3, 800a6d8 <__swsetup_r+0x14>
 800a6d4:	f7ff feb2 	bl	800a43c <__sinit>
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6de:	0718      	lsls	r0, r3, #28
 800a6e0:	d422      	bmi.n	800a728 <__swsetup_r+0x64>
 800a6e2:	06d9      	lsls	r1, r3, #27
 800a6e4:	d407      	bmi.n	800a6f6 <__swsetup_r+0x32>
 800a6e6:	2309      	movs	r3, #9
 800a6e8:	602b      	str	r3, [r5, #0]
 800a6ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f2:	81a3      	strh	r3, [r4, #12]
 800a6f4:	e034      	b.n	800a760 <__swsetup_r+0x9c>
 800a6f6:	0758      	lsls	r0, r3, #29
 800a6f8:	d512      	bpl.n	800a720 <__swsetup_r+0x5c>
 800a6fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6fc:	b141      	cbz	r1, 800a710 <__swsetup_r+0x4c>
 800a6fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a702:	4299      	cmp	r1, r3
 800a704:	d002      	beq.n	800a70c <__swsetup_r+0x48>
 800a706:	4628      	mov	r0, r5
 800a708:	f000 ff42 	bl	800b590 <_free_r>
 800a70c:	2300      	movs	r3, #0
 800a70e:	6363      	str	r3, [r4, #52]	; 0x34
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a716:	81a3      	strh	r3, [r4, #12]
 800a718:	2300      	movs	r3, #0
 800a71a:	6063      	str	r3, [r4, #4]
 800a71c:	6923      	ldr	r3, [r4, #16]
 800a71e:	6023      	str	r3, [r4, #0]
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	f043 0308 	orr.w	r3, r3, #8
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	6923      	ldr	r3, [r4, #16]
 800a72a:	b94b      	cbnz	r3, 800a740 <__swsetup_r+0x7c>
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a736:	d003      	beq.n	800a740 <__swsetup_r+0x7c>
 800a738:	4621      	mov	r1, r4
 800a73a:	4628      	mov	r0, r5
 800a73c:	f002 fec7 	bl	800d4ce <__smakebuf_r>
 800a740:	89a0      	ldrh	r0, [r4, #12]
 800a742:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a746:	f010 0301 	ands.w	r3, r0, #1
 800a74a:	d00a      	beq.n	800a762 <__swsetup_r+0x9e>
 800a74c:	2300      	movs	r3, #0
 800a74e:	60a3      	str	r3, [r4, #8]
 800a750:	6963      	ldr	r3, [r4, #20]
 800a752:	425b      	negs	r3, r3
 800a754:	61a3      	str	r3, [r4, #24]
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	b943      	cbnz	r3, 800a76c <__swsetup_r+0xa8>
 800a75a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a75e:	d1c4      	bne.n	800a6ea <__swsetup_r+0x26>
 800a760:	bd38      	pop	{r3, r4, r5, pc}
 800a762:	0781      	lsls	r1, r0, #30
 800a764:	bf58      	it	pl
 800a766:	6963      	ldrpl	r3, [r4, #20]
 800a768:	60a3      	str	r3, [r4, #8]
 800a76a:	e7f4      	b.n	800a756 <__swsetup_r+0x92>
 800a76c:	2000      	movs	r0, #0
 800a76e:	e7f7      	b.n	800a760 <__swsetup_r+0x9c>
 800a770:	20000068 	.word	0x20000068

0800a774 <memset>:
 800a774:	4603      	mov	r3, r0
 800a776:	4402      	add	r2, r0
 800a778:	4293      	cmp	r3, r2
 800a77a:	d100      	bne.n	800a77e <memset+0xa>
 800a77c:	4770      	bx	lr
 800a77e:	f803 1b01 	strb.w	r1, [r3], #1
 800a782:	e7f9      	b.n	800a778 <memset+0x4>

0800a784 <_localeconv_r>:
 800a784:	4800      	ldr	r0, [pc, #0]	; (800a788 <_localeconv_r+0x4>)
 800a786:	4770      	bx	lr
 800a788:	2000015c 	.word	0x2000015c

0800a78c <_close_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	2300      	movs	r3, #0
 800a790:	4d05      	ldr	r5, [pc, #20]	; (800a7a8 <_close_r+0x1c>)
 800a792:	4604      	mov	r4, r0
 800a794:	4608      	mov	r0, r1
 800a796:	602b      	str	r3, [r5, #0]
 800a798:	f7f8 fe1a 	bl	80033d0 <_close>
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	d102      	bne.n	800a7a6 <_close_r+0x1a>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	b103      	cbz	r3, 800a7a6 <_close_r+0x1a>
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	bd38      	pop	{r3, r4, r5, pc}
 800a7a8:	20001e84 	.word	0x20001e84

0800a7ac <_lseek_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	4d05      	ldr	r5, [pc, #20]	; (800a7cc <_lseek_r+0x20>)
 800a7b8:	602a      	str	r2, [r5, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	f7f8 fe2c 	bl	8003418 <_lseek>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d102      	bne.n	800a7ca <_lseek_r+0x1e>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	b103      	cbz	r3, 800a7ca <_lseek_r+0x1e>
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	20001e84 	.word	0x20001e84

0800a7d0 <_read_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	4608      	mov	r0, r1
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	2200      	movs	r2, #0
 800a7da:	4d05      	ldr	r5, [pc, #20]	; (800a7f0 <_read_r+0x20>)
 800a7dc:	602a      	str	r2, [r5, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	f7f8 fdd9 	bl	8003396 <_read>
 800a7e4:	1c43      	adds	r3, r0, #1
 800a7e6:	d102      	bne.n	800a7ee <_read_r+0x1e>
 800a7e8:	682b      	ldr	r3, [r5, #0]
 800a7ea:	b103      	cbz	r3, 800a7ee <_read_r+0x1e>
 800a7ec:	6023      	str	r3, [r4, #0]
 800a7ee:	bd38      	pop	{r3, r4, r5, pc}
 800a7f0:	20001e84 	.word	0x20001e84

0800a7f4 <_write_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4d05      	ldr	r5, [pc, #20]	; (800a814 <_write_r+0x20>)
 800a800:	602a      	str	r2, [r5, #0]
 800a802:	461a      	mov	r2, r3
 800a804:	f7f8 fec6 	bl	8003594 <_write>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_write_r+0x1e>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_write_r+0x1e>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	20001e84 	.word	0x20001e84

0800a818 <__errno>:
 800a818:	4b01      	ldr	r3, [pc, #4]	; (800a820 <__errno+0x8>)
 800a81a:	6818      	ldr	r0, [r3, #0]
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	20000068 	.word	0x20000068

0800a824 <__libc_init_array>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	2600      	movs	r6, #0
 800a828:	4d0c      	ldr	r5, [pc, #48]	; (800a85c <__libc_init_array+0x38>)
 800a82a:	4c0d      	ldr	r4, [pc, #52]	; (800a860 <__libc_init_array+0x3c>)
 800a82c:	1b64      	subs	r4, r4, r5
 800a82e:	10a4      	asrs	r4, r4, #2
 800a830:	42a6      	cmp	r6, r4
 800a832:	d109      	bne.n	800a848 <__libc_init_array+0x24>
 800a834:	f003 fb2c 	bl	800de90 <_init>
 800a838:	2600      	movs	r6, #0
 800a83a:	4d0a      	ldr	r5, [pc, #40]	; (800a864 <__libc_init_array+0x40>)
 800a83c:	4c0a      	ldr	r4, [pc, #40]	; (800a868 <__libc_init_array+0x44>)
 800a83e:	1b64      	subs	r4, r4, r5
 800a840:	10a4      	asrs	r4, r4, #2
 800a842:	42a6      	cmp	r6, r4
 800a844:	d105      	bne.n	800a852 <__libc_init_array+0x2e>
 800a846:	bd70      	pop	{r4, r5, r6, pc}
 800a848:	f855 3b04 	ldr.w	r3, [r5], #4
 800a84c:	4798      	blx	r3
 800a84e:	3601      	adds	r6, #1
 800a850:	e7ee      	b.n	800a830 <__libc_init_array+0xc>
 800a852:	f855 3b04 	ldr.w	r3, [r5], #4
 800a856:	4798      	blx	r3
 800a858:	3601      	adds	r6, #1
 800a85a:	e7f2      	b.n	800a842 <__libc_init_array+0x1e>
 800a85c:	0800e4b8 	.word	0x0800e4b8
 800a860:	0800e4b8 	.word	0x0800e4b8
 800a864:	0800e4b8 	.word	0x0800e4b8
 800a868:	0800e4bc 	.word	0x0800e4bc

0800a86c <__retarget_lock_init_recursive>:
 800a86c:	4770      	bx	lr

0800a86e <__retarget_lock_acquire_recursive>:
 800a86e:	4770      	bx	lr

0800a870 <__retarget_lock_release_recursive>:
 800a870:	4770      	bx	lr

0800a872 <memchr>:
 800a872:	4603      	mov	r3, r0
 800a874:	b510      	push	{r4, lr}
 800a876:	b2c9      	uxtb	r1, r1
 800a878:	4402      	add	r2, r0
 800a87a:	4293      	cmp	r3, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	d101      	bne.n	800a884 <memchr+0x12>
 800a880:	2000      	movs	r0, #0
 800a882:	e003      	b.n	800a88c <memchr+0x1a>
 800a884:	7804      	ldrb	r4, [r0, #0]
 800a886:	3301      	adds	r3, #1
 800a888:	428c      	cmp	r4, r1
 800a88a:	d1f6      	bne.n	800a87a <memchr+0x8>
 800a88c:	bd10      	pop	{r4, pc}

0800a88e <memcpy>:
 800a88e:	440a      	add	r2, r1
 800a890:	4291      	cmp	r1, r2
 800a892:	f100 33ff 	add.w	r3, r0, #4294967295
 800a896:	d100      	bne.n	800a89a <memcpy+0xc>
 800a898:	4770      	bx	lr
 800a89a:	b510      	push	{r4, lr}
 800a89c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a0:	4291      	cmp	r1, r2
 800a8a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8a6:	d1f9      	bne.n	800a89c <memcpy+0xe>
 800a8a8:	bd10      	pop	{r4, pc}
	...

0800a8ac <nanf>:
 800a8ac:	4800      	ldr	r0, [pc, #0]	; (800a8b0 <nanf+0x4>)
 800a8ae:	4770      	bx	lr
 800a8b0:	7fc00000 	.word	0x7fc00000

0800a8b4 <quorem>:
 800a8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b8:	6903      	ldr	r3, [r0, #16]
 800a8ba:	690c      	ldr	r4, [r1, #16]
 800a8bc:	4607      	mov	r7, r0
 800a8be:	42a3      	cmp	r3, r4
 800a8c0:	db7f      	blt.n	800a9c2 <quorem+0x10e>
 800a8c2:	3c01      	subs	r4, #1
 800a8c4:	f100 0514 	add.w	r5, r0, #20
 800a8c8:	f101 0814 	add.w	r8, r1, #20
 800a8cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8ea:	d331      	bcc.n	800a950 <quorem+0x9c>
 800a8ec:	f04f 0e00 	mov.w	lr, #0
 800a8f0:	4640      	mov	r0, r8
 800a8f2:	46ac      	mov	ip, r5
 800a8f4:	46f2      	mov	sl, lr
 800a8f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8fa:	b293      	uxth	r3, r2
 800a8fc:	fb06 e303 	mla	r3, r6, r3, lr
 800a900:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a904:	0c1a      	lsrs	r2, r3, #16
 800a906:	b29b      	uxth	r3, r3
 800a908:	fb06 220e 	mla	r2, r6, lr, r2
 800a90c:	ebaa 0303 	sub.w	r3, sl, r3
 800a910:	f8dc a000 	ldr.w	sl, [ip]
 800a914:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a918:	fa1f fa8a 	uxth.w	sl, sl
 800a91c:	4453      	add	r3, sl
 800a91e:	f8dc a000 	ldr.w	sl, [ip]
 800a922:	b292      	uxth	r2, r2
 800a924:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a928:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a932:	4581      	cmp	r9, r0
 800a934:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a938:	f84c 3b04 	str.w	r3, [ip], #4
 800a93c:	d2db      	bcs.n	800a8f6 <quorem+0x42>
 800a93e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a942:	b92b      	cbnz	r3, 800a950 <quorem+0x9c>
 800a944:	9b01      	ldr	r3, [sp, #4]
 800a946:	3b04      	subs	r3, #4
 800a948:	429d      	cmp	r5, r3
 800a94a:	461a      	mov	r2, r3
 800a94c:	d32d      	bcc.n	800a9aa <quorem+0xf6>
 800a94e:	613c      	str	r4, [r7, #16]
 800a950:	4638      	mov	r0, r7
 800a952:	f001 f9dd 	bl	800bd10 <__mcmp>
 800a956:	2800      	cmp	r0, #0
 800a958:	db23      	blt.n	800a9a2 <quorem+0xee>
 800a95a:	4629      	mov	r1, r5
 800a95c:	2000      	movs	r0, #0
 800a95e:	3601      	adds	r6, #1
 800a960:	f858 2b04 	ldr.w	r2, [r8], #4
 800a964:	f8d1 c000 	ldr.w	ip, [r1]
 800a968:	b293      	uxth	r3, r2
 800a96a:	1ac3      	subs	r3, r0, r3
 800a96c:	0c12      	lsrs	r2, r2, #16
 800a96e:	fa1f f08c 	uxth.w	r0, ip
 800a972:	4403      	add	r3, r0
 800a974:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a978:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a982:	45c1      	cmp	r9, r8
 800a984:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a988:	f841 3b04 	str.w	r3, [r1], #4
 800a98c:	d2e8      	bcs.n	800a960 <quorem+0xac>
 800a98e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a992:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a996:	b922      	cbnz	r2, 800a9a2 <quorem+0xee>
 800a998:	3b04      	subs	r3, #4
 800a99a:	429d      	cmp	r5, r3
 800a99c:	461a      	mov	r2, r3
 800a99e:	d30a      	bcc.n	800a9b6 <quorem+0x102>
 800a9a0:	613c      	str	r4, [r7, #16]
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	b003      	add	sp, #12
 800a9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9aa:	6812      	ldr	r2, [r2, #0]
 800a9ac:	3b04      	subs	r3, #4
 800a9ae:	2a00      	cmp	r2, #0
 800a9b0:	d1cd      	bne.n	800a94e <quorem+0x9a>
 800a9b2:	3c01      	subs	r4, #1
 800a9b4:	e7c8      	b.n	800a948 <quorem+0x94>
 800a9b6:	6812      	ldr	r2, [r2, #0]
 800a9b8:	3b04      	subs	r3, #4
 800a9ba:	2a00      	cmp	r2, #0
 800a9bc:	d1f0      	bne.n	800a9a0 <quorem+0xec>
 800a9be:	3c01      	subs	r4, #1
 800a9c0:	e7eb      	b.n	800a99a <quorem+0xe6>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	e7ee      	b.n	800a9a4 <quorem+0xf0>
	...

0800a9c8 <_dtoa_r>:
 800a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	4616      	mov	r6, r2
 800a9ce:	461f      	mov	r7, r3
 800a9d0:	69c4      	ldr	r4, [r0, #28]
 800a9d2:	b099      	sub	sp, #100	; 0x64
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a9da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a9de:	b974      	cbnz	r4, 800a9fe <_dtoa_r+0x36>
 800a9e0:	2010      	movs	r0, #16
 800a9e2:	f000 fe1d 	bl	800b620 <malloc>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	61e8      	str	r0, [r5, #28]
 800a9ea:	b920      	cbnz	r0, 800a9f6 <_dtoa_r+0x2e>
 800a9ec:	21ef      	movs	r1, #239	; 0xef
 800a9ee:	4bac      	ldr	r3, [pc, #688]	; (800aca0 <_dtoa_r+0x2d8>)
 800a9f0:	48ac      	ldr	r0, [pc, #688]	; (800aca4 <_dtoa_r+0x2dc>)
 800a9f2:	f002 fe0d 	bl	800d610 <__assert_func>
 800a9f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9fa:	6004      	str	r4, [r0, #0]
 800a9fc:	60c4      	str	r4, [r0, #12]
 800a9fe:	69eb      	ldr	r3, [r5, #28]
 800aa00:	6819      	ldr	r1, [r3, #0]
 800aa02:	b151      	cbz	r1, 800aa1a <_dtoa_r+0x52>
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	2301      	movs	r3, #1
 800aa08:	4093      	lsls	r3, r2
 800aa0a:	604a      	str	r2, [r1, #4]
 800aa0c:	608b      	str	r3, [r1, #8]
 800aa0e:	4628      	mov	r0, r5
 800aa10:	f000 fefa 	bl	800b808 <_Bfree>
 800aa14:	2200      	movs	r2, #0
 800aa16:	69eb      	ldr	r3, [r5, #28]
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	1e3b      	subs	r3, r7, #0
 800aa1c:	bfaf      	iteee	ge
 800aa1e:	2300      	movge	r3, #0
 800aa20:	2201      	movlt	r2, #1
 800aa22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa26:	9305      	strlt	r3, [sp, #20]
 800aa28:	bfa8      	it	ge
 800aa2a:	f8c8 3000 	strge.w	r3, [r8]
 800aa2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800aa32:	4b9d      	ldr	r3, [pc, #628]	; (800aca8 <_dtoa_r+0x2e0>)
 800aa34:	bfb8      	it	lt
 800aa36:	f8c8 2000 	strlt.w	r2, [r8]
 800aa3a:	ea33 0309 	bics.w	r3, r3, r9
 800aa3e:	d119      	bne.n	800aa74 <_dtoa_r+0xac>
 800aa40:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa4c:	4333      	orrs	r3, r6
 800aa4e:	f000 8589 	beq.w	800b564 <_dtoa_r+0xb9c>
 800aa52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa54:	b953      	cbnz	r3, 800aa6c <_dtoa_r+0xa4>
 800aa56:	4b95      	ldr	r3, [pc, #596]	; (800acac <_dtoa_r+0x2e4>)
 800aa58:	e023      	b.n	800aaa2 <_dtoa_r+0xda>
 800aa5a:	4b95      	ldr	r3, [pc, #596]	; (800acb0 <_dtoa_r+0x2e8>)
 800aa5c:	9303      	str	r3, [sp, #12]
 800aa5e:	3308      	adds	r3, #8
 800aa60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa62:	6013      	str	r3, [r2, #0]
 800aa64:	9803      	ldr	r0, [sp, #12]
 800aa66:	b019      	add	sp, #100	; 0x64
 800aa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6c:	4b8f      	ldr	r3, [pc, #572]	; (800acac <_dtoa_r+0x2e4>)
 800aa6e:	9303      	str	r3, [sp, #12]
 800aa70:	3303      	adds	r3, #3
 800aa72:	e7f5      	b.n	800aa60 <_dtoa_r+0x98>
 800aa74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800aa7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa80:	2200      	movs	r2, #0
 800aa82:	2300      	movs	r3, #0
 800aa84:	f7f5 ff90 	bl	80009a8 <__aeabi_dcmpeq>
 800aa88:	4680      	mov	r8, r0
 800aa8a:	b160      	cbz	r0, 800aaa6 <_dtoa_r+0xde>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa90:	6013      	str	r3, [r2, #0]
 800aa92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 8562 	beq.w	800b55e <_dtoa_r+0xb96>
 800aa9a:	4b86      	ldr	r3, [pc, #536]	; (800acb4 <_dtoa_r+0x2ec>)
 800aa9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	9303      	str	r3, [sp, #12]
 800aaa4:	e7de      	b.n	800aa64 <_dtoa_r+0x9c>
 800aaa6:	ab16      	add	r3, sp, #88	; 0x58
 800aaa8:	9301      	str	r3, [sp, #4]
 800aaaa:	ab17      	add	r3, sp, #92	; 0x5c
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	4628      	mov	r0, r5
 800aab0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aab4:	f001 fa3c 	bl	800bf30 <__d2b>
 800aab8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aabc:	4682      	mov	sl, r0
 800aabe:	2c00      	cmp	r4, #0
 800aac0:	d07e      	beq.n	800abc0 <_dtoa_r+0x1f8>
 800aac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aac8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800aacc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aad0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aad4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aad8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800aadc:	4619      	mov	r1, r3
 800aade:	2200      	movs	r2, #0
 800aae0:	4b75      	ldr	r3, [pc, #468]	; (800acb8 <_dtoa_r+0x2f0>)
 800aae2:	f7f5 fb41 	bl	8000168 <__aeabi_dsub>
 800aae6:	a368      	add	r3, pc, #416	; (adr r3, 800ac88 <_dtoa_r+0x2c0>)
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	f7f5 fcf4 	bl	80004d8 <__aeabi_dmul>
 800aaf0:	a367      	add	r3, pc, #412	; (adr r3, 800ac90 <_dtoa_r+0x2c8>)
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	f7f5 fb39 	bl	800016c <__adddf3>
 800aafa:	4606      	mov	r6, r0
 800aafc:	4620      	mov	r0, r4
 800aafe:	460f      	mov	r7, r1
 800ab00:	f7f5 fc80 	bl	8000404 <__aeabi_i2d>
 800ab04:	a364      	add	r3, pc, #400	; (adr r3, 800ac98 <_dtoa_r+0x2d0>)
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	f7f5 fce5 	bl	80004d8 <__aeabi_dmul>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 fb29 	bl	800016c <__adddf3>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	460f      	mov	r7, r1
 800ab1e:	f7f5 ff8b 	bl	8000a38 <__aeabi_d2iz>
 800ab22:	2200      	movs	r2, #0
 800ab24:	4683      	mov	fp, r0
 800ab26:	2300      	movs	r3, #0
 800ab28:	4630      	mov	r0, r6
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	f7f5 ff46 	bl	80009bc <__aeabi_dcmplt>
 800ab30:	b148      	cbz	r0, 800ab46 <_dtoa_r+0x17e>
 800ab32:	4658      	mov	r0, fp
 800ab34:	f7f5 fc66 	bl	8000404 <__aeabi_i2d>
 800ab38:	4632      	mov	r2, r6
 800ab3a:	463b      	mov	r3, r7
 800ab3c:	f7f5 ff34 	bl	80009a8 <__aeabi_dcmpeq>
 800ab40:	b908      	cbnz	r0, 800ab46 <_dtoa_r+0x17e>
 800ab42:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab46:	f1bb 0f16 	cmp.w	fp, #22
 800ab4a:	d857      	bhi.n	800abfc <_dtoa_r+0x234>
 800ab4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab50:	4b5a      	ldr	r3, [pc, #360]	; (800acbc <_dtoa_r+0x2f4>)
 800ab52:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5a:	f7f5 ff2f 	bl	80009bc <__aeabi_dcmplt>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d04e      	beq.n	800ac00 <_dtoa_r+0x238>
 800ab62:	2300      	movs	r3, #0
 800ab64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab68:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab6c:	1b1b      	subs	r3, r3, r4
 800ab6e:	1e5a      	subs	r2, r3, #1
 800ab70:	bf46      	itte	mi
 800ab72:	f1c3 0901 	rsbmi	r9, r3, #1
 800ab76:	2300      	movmi	r3, #0
 800ab78:	f04f 0900 	movpl.w	r9, #0
 800ab7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab7e:	bf48      	it	mi
 800ab80:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ab82:	f1bb 0f00 	cmp.w	fp, #0
 800ab86:	db3d      	blt.n	800ac04 <_dtoa_r+0x23c>
 800ab88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800ab8e:	445b      	add	r3, fp
 800ab90:	9309      	str	r3, [sp, #36]	; 0x24
 800ab92:	2300      	movs	r3, #0
 800ab94:	930a      	str	r3, [sp, #40]	; 0x28
 800ab96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab98:	2b09      	cmp	r3, #9
 800ab9a:	d867      	bhi.n	800ac6c <_dtoa_r+0x2a4>
 800ab9c:	2b05      	cmp	r3, #5
 800ab9e:	bfc4      	itt	gt
 800aba0:	3b04      	subgt	r3, #4
 800aba2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800aba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aba6:	bfc8      	it	gt
 800aba8:	2400      	movgt	r4, #0
 800abaa:	f1a3 0302 	sub.w	r3, r3, #2
 800abae:	bfd8      	it	le
 800abb0:	2401      	movle	r4, #1
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	f200 8086 	bhi.w	800acc4 <_dtoa_r+0x2fc>
 800abb8:	e8df f003 	tbb	[pc, r3]
 800abbc:	5637392c 	.word	0x5637392c
 800abc0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800abc4:	441c      	add	r4, r3
 800abc6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800abca:	2b20      	cmp	r3, #32
 800abcc:	bfc1      	itttt	gt
 800abce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800abd2:	fa09 f903 	lslgt.w	r9, r9, r3
 800abd6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800abda:	fa26 f303 	lsrgt.w	r3, r6, r3
 800abde:	bfd6      	itet	le
 800abe0:	f1c3 0320 	rsble	r3, r3, #32
 800abe4:	ea49 0003 	orrgt.w	r0, r9, r3
 800abe8:	fa06 f003 	lslle.w	r0, r6, r3
 800abec:	f7f5 fbfa 	bl	80003e4 <__aeabi_ui2d>
 800abf0:	2201      	movs	r2, #1
 800abf2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800abf6:	3c01      	subs	r4, #1
 800abf8:	9213      	str	r2, [sp, #76]	; 0x4c
 800abfa:	e76f      	b.n	800aadc <_dtoa_r+0x114>
 800abfc:	2301      	movs	r3, #1
 800abfe:	e7b3      	b.n	800ab68 <_dtoa_r+0x1a0>
 800ac00:	900f      	str	r0, [sp, #60]	; 0x3c
 800ac02:	e7b2      	b.n	800ab6a <_dtoa_r+0x1a2>
 800ac04:	f1cb 0300 	rsb	r3, fp, #0
 800ac08:	930a      	str	r3, [sp, #40]	; 0x28
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	eba9 090b 	sub.w	r9, r9, fp
 800ac10:	930e      	str	r3, [sp, #56]	; 0x38
 800ac12:	e7c0      	b.n	800ab96 <_dtoa_r+0x1ce>
 800ac14:	2300      	movs	r3, #0
 800ac16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	dc55      	bgt.n	800acca <_dtoa_r+0x302>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	461a      	mov	r2, r3
 800ac22:	9306      	str	r3, [sp, #24]
 800ac24:	9308      	str	r3, [sp, #32]
 800ac26:	9223      	str	r2, [sp, #140]	; 0x8c
 800ac28:	e00b      	b.n	800ac42 <_dtoa_r+0x27a>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e7f3      	b.n	800ac16 <_dtoa_r+0x24e>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac34:	445b      	add	r3, fp
 800ac36:	9306      	str	r3, [sp, #24]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	9308      	str	r3, [sp, #32]
 800ac3e:	bfb8      	it	lt
 800ac40:	2301      	movlt	r3, #1
 800ac42:	2100      	movs	r1, #0
 800ac44:	2204      	movs	r2, #4
 800ac46:	69e8      	ldr	r0, [r5, #28]
 800ac48:	f102 0614 	add.w	r6, r2, #20
 800ac4c:	429e      	cmp	r6, r3
 800ac4e:	d940      	bls.n	800acd2 <_dtoa_r+0x30a>
 800ac50:	6041      	str	r1, [r0, #4]
 800ac52:	4628      	mov	r0, r5
 800ac54:	f000 fd98 	bl	800b788 <_Balloc>
 800ac58:	9003      	str	r0, [sp, #12]
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d13c      	bne.n	800acd8 <_dtoa_r+0x310>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	f240 11af 	movw	r1, #431	; 0x1af
 800ac64:	4b16      	ldr	r3, [pc, #88]	; (800acc0 <_dtoa_r+0x2f8>)
 800ac66:	e6c3      	b.n	800a9f0 <_dtoa_r+0x28>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e7e1      	b.n	800ac30 <_dtoa_r+0x268>
 800ac6c:	2401      	movs	r4, #1
 800ac6e:	2300      	movs	r3, #0
 800ac70:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac72:	9322      	str	r3, [sp, #136]	; 0x88
 800ac74:	f04f 33ff 	mov.w	r3, #4294967295
 800ac78:	2200      	movs	r2, #0
 800ac7a:	9306      	str	r3, [sp, #24]
 800ac7c:	9308      	str	r3, [sp, #32]
 800ac7e:	2312      	movs	r3, #18
 800ac80:	e7d1      	b.n	800ac26 <_dtoa_r+0x25e>
 800ac82:	bf00      	nop
 800ac84:	f3af 8000 	nop.w
 800ac88:	636f4361 	.word	0x636f4361
 800ac8c:	3fd287a7 	.word	0x3fd287a7
 800ac90:	8b60c8b3 	.word	0x8b60c8b3
 800ac94:	3fc68a28 	.word	0x3fc68a28
 800ac98:	509f79fb 	.word	0x509f79fb
 800ac9c:	3fd34413 	.word	0x3fd34413
 800aca0:	0800e0d0 	.word	0x0800e0d0
 800aca4:	0800e0e7 	.word	0x0800e0e7
 800aca8:	7ff00000 	.word	0x7ff00000
 800acac:	0800e0cc 	.word	0x0800e0cc
 800acb0:	0800e0c3 	.word	0x0800e0c3
 800acb4:	0800e09b 	.word	0x0800e09b
 800acb8:	3ff80000 	.word	0x3ff80000
 800acbc:	0800e1d8 	.word	0x0800e1d8
 800acc0:	0800e13f 	.word	0x0800e13f
 800acc4:	2301      	movs	r3, #1
 800acc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800acc8:	e7d4      	b.n	800ac74 <_dtoa_r+0x2ac>
 800acca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800accc:	9306      	str	r3, [sp, #24]
 800acce:	9308      	str	r3, [sp, #32]
 800acd0:	e7b7      	b.n	800ac42 <_dtoa_r+0x27a>
 800acd2:	3101      	adds	r1, #1
 800acd4:	0052      	lsls	r2, r2, #1
 800acd6:	e7b7      	b.n	800ac48 <_dtoa_r+0x280>
 800acd8:	69eb      	ldr	r3, [r5, #28]
 800acda:	9a03      	ldr	r2, [sp, #12]
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	9b08      	ldr	r3, [sp, #32]
 800ace0:	2b0e      	cmp	r3, #14
 800ace2:	f200 80a8 	bhi.w	800ae36 <_dtoa_r+0x46e>
 800ace6:	2c00      	cmp	r4, #0
 800ace8:	f000 80a5 	beq.w	800ae36 <_dtoa_r+0x46e>
 800acec:	f1bb 0f00 	cmp.w	fp, #0
 800acf0:	dd34      	ble.n	800ad5c <_dtoa_r+0x394>
 800acf2:	4b9a      	ldr	r3, [pc, #616]	; (800af5c <_dtoa_r+0x594>)
 800acf4:	f00b 020f 	and.w	r2, fp, #15
 800acf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ad00:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad04:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ad08:	ea4f 142b 	mov.w	r4, fp, asr #4
 800ad0c:	d016      	beq.n	800ad3c <_dtoa_r+0x374>
 800ad0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad12:	4b93      	ldr	r3, [pc, #588]	; (800af60 <_dtoa_r+0x598>)
 800ad14:	2703      	movs	r7, #3
 800ad16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad1a:	f7f5 fd07 	bl	800072c <__aeabi_ddiv>
 800ad1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad22:	f004 040f 	and.w	r4, r4, #15
 800ad26:	4e8e      	ldr	r6, [pc, #568]	; (800af60 <_dtoa_r+0x598>)
 800ad28:	b954      	cbnz	r4, 800ad40 <_dtoa_r+0x378>
 800ad2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad32:	f7f5 fcfb 	bl	800072c <__aeabi_ddiv>
 800ad36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad3a:	e029      	b.n	800ad90 <_dtoa_r+0x3c8>
 800ad3c:	2702      	movs	r7, #2
 800ad3e:	e7f2      	b.n	800ad26 <_dtoa_r+0x35e>
 800ad40:	07e1      	lsls	r1, r4, #31
 800ad42:	d508      	bpl.n	800ad56 <_dtoa_r+0x38e>
 800ad44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad48:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad4c:	f7f5 fbc4 	bl	80004d8 <__aeabi_dmul>
 800ad50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad54:	3701      	adds	r7, #1
 800ad56:	1064      	asrs	r4, r4, #1
 800ad58:	3608      	adds	r6, #8
 800ad5a:	e7e5      	b.n	800ad28 <_dtoa_r+0x360>
 800ad5c:	f000 80a5 	beq.w	800aeaa <_dtoa_r+0x4e2>
 800ad60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad64:	f1cb 0400 	rsb	r4, fp, #0
 800ad68:	4b7c      	ldr	r3, [pc, #496]	; (800af5c <_dtoa_r+0x594>)
 800ad6a:	f004 020f 	and.w	r2, r4, #15
 800ad6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad76:	f7f5 fbaf 	bl	80004d8 <__aeabi_dmul>
 800ad7a:	2702      	movs	r7, #2
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad82:	4e77      	ldr	r6, [pc, #476]	; (800af60 <_dtoa_r+0x598>)
 800ad84:	1124      	asrs	r4, r4, #4
 800ad86:	2c00      	cmp	r4, #0
 800ad88:	f040 8084 	bne.w	800ae94 <_dtoa_r+0x4cc>
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1d2      	bne.n	800ad36 <_dtoa_r+0x36e>
 800ad90:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ad94:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ad98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f000 8087 	beq.w	800aeae <_dtoa_r+0x4e6>
 800ada0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ada4:	2200      	movs	r2, #0
 800ada6:	4b6f      	ldr	r3, [pc, #444]	; (800af64 <_dtoa_r+0x59c>)
 800ada8:	f7f5 fe08 	bl	80009bc <__aeabi_dcmplt>
 800adac:	2800      	cmp	r0, #0
 800adae:	d07e      	beq.n	800aeae <_dtoa_r+0x4e6>
 800adb0:	9b08      	ldr	r3, [sp, #32]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d07b      	beq.n	800aeae <_dtoa_r+0x4e6>
 800adb6:	9b06      	ldr	r3, [sp, #24]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	dd38      	ble.n	800ae2e <_dtoa_r+0x466>
 800adbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adc0:	2200      	movs	r2, #0
 800adc2:	4b69      	ldr	r3, [pc, #420]	; (800af68 <_dtoa_r+0x5a0>)
 800adc4:	f7f5 fb88 	bl	80004d8 <__aeabi_dmul>
 800adc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adcc:	9c06      	ldr	r4, [sp, #24]
 800adce:	f10b 38ff 	add.w	r8, fp, #4294967295
 800add2:	3701      	adds	r7, #1
 800add4:	4638      	mov	r0, r7
 800add6:	f7f5 fb15 	bl	8000404 <__aeabi_i2d>
 800adda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adde:	f7f5 fb7b 	bl	80004d8 <__aeabi_dmul>
 800ade2:	2200      	movs	r2, #0
 800ade4:	4b61      	ldr	r3, [pc, #388]	; (800af6c <_dtoa_r+0x5a4>)
 800ade6:	f7f5 f9c1 	bl	800016c <__adddf3>
 800adea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800adee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800adf2:	9611      	str	r6, [sp, #68]	; 0x44
 800adf4:	2c00      	cmp	r4, #0
 800adf6:	d15d      	bne.n	800aeb4 <_dtoa_r+0x4ec>
 800adf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adfc:	2200      	movs	r2, #0
 800adfe:	4b5c      	ldr	r3, [pc, #368]	; (800af70 <_dtoa_r+0x5a8>)
 800ae00:	f7f5 f9b2 	bl	8000168 <__aeabi_dsub>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae0c:	4633      	mov	r3, r6
 800ae0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae10:	f7f5 fdf2 	bl	80009f8 <__aeabi_dcmpgt>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	f040 8295 	bne.w	800b344 <_dtoa_r+0x97c>
 800ae1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ae24:	f7f5 fdca 	bl	80009bc <__aeabi_dcmplt>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	f040 8289 	bne.w	800b340 <_dtoa_r+0x978>
 800ae2e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ae32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f2c0 8151 	blt.w	800b0e0 <_dtoa_r+0x718>
 800ae3e:	f1bb 0f0e 	cmp.w	fp, #14
 800ae42:	f300 814d 	bgt.w	800b0e0 <_dtoa_r+0x718>
 800ae46:	4b45      	ldr	r3, [pc, #276]	; (800af5c <_dtoa_r+0x594>)
 800ae48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ae4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae50:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ae54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f280 80da 	bge.w	800b010 <_dtoa_r+0x648>
 800ae5c:	9b08      	ldr	r3, [sp, #32]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f300 80d6 	bgt.w	800b010 <_dtoa_r+0x648>
 800ae64:	f040 826b 	bne.w	800b33e <_dtoa_r+0x976>
 800ae68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	4b40      	ldr	r3, [pc, #256]	; (800af70 <_dtoa_r+0x5a8>)
 800ae70:	f7f5 fb32 	bl	80004d8 <__aeabi_dmul>
 800ae74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae78:	f7f5 fdb4 	bl	80009e4 <__aeabi_dcmpge>
 800ae7c:	9c08      	ldr	r4, [sp, #32]
 800ae7e:	4626      	mov	r6, r4
 800ae80:	2800      	cmp	r0, #0
 800ae82:	f040 8241 	bne.w	800b308 <_dtoa_r+0x940>
 800ae86:	2331      	movs	r3, #49	; 0x31
 800ae88:	9f03      	ldr	r7, [sp, #12]
 800ae8a:	f10b 0b01 	add.w	fp, fp, #1
 800ae8e:	f807 3b01 	strb.w	r3, [r7], #1
 800ae92:	e23d      	b.n	800b310 <_dtoa_r+0x948>
 800ae94:	07e2      	lsls	r2, r4, #31
 800ae96:	d505      	bpl.n	800aea4 <_dtoa_r+0x4dc>
 800ae98:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae9c:	f7f5 fb1c 	bl	80004d8 <__aeabi_dmul>
 800aea0:	2301      	movs	r3, #1
 800aea2:	3701      	adds	r7, #1
 800aea4:	1064      	asrs	r4, r4, #1
 800aea6:	3608      	adds	r6, #8
 800aea8:	e76d      	b.n	800ad86 <_dtoa_r+0x3be>
 800aeaa:	2702      	movs	r7, #2
 800aeac:	e770      	b.n	800ad90 <_dtoa_r+0x3c8>
 800aeae:	46d8      	mov	r8, fp
 800aeb0:	9c08      	ldr	r4, [sp, #32]
 800aeb2:	e78f      	b.n	800add4 <_dtoa_r+0x40c>
 800aeb4:	9903      	ldr	r1, [sp, #12]
 800aeb6:	4b29      	ldr	r3, [pc, #164]	; (800af5c <_dtoa_r+0x594>)
 800aeb8:	4421      	add	r1, r4
 800aeba:	9112      	str	r1, [sp, #72]	; 0x48
 800aebc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aebe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aec2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aec6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aeca:	2900      	cmp	r1, #0
 800aecc:	d054      	beq.n	800af78 <_dtoa_r+0x5b0>
 800aece:	2000      	movs	r0, #0
 800aed0:	4928      	ldr	r1, [pc, #160]	; (800af74 <_dtoa_r+0x5ac>)
 800aed2:	f7f5 fc2b 	bl	800072c <__aeabi_ddiv>
 800aed6:	463b      	mov	r3, r7
 800aed8:	4632      	mov	r2, r6
 800aeda:	f7f5 f945 	bl	8000168 <__aeabi_dsub>
 800aede:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aee2:	9f03      	ldr	r7, [sp, #12]
 800aee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aee8:	f7f5 fda6 	bl	8000a38 <__aeabi_d2iz>
 800aeec:	4604      	mov	r4, r0
 800aeee:	f7f5 fa89 	bl	8000404 <__aeabi_i2d>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aefa:	f7f5 f935 	bl	8000168 <__aeabi_dsub>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	3430      	adds	r4, #48	; 0x30
 800af04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af0c:	f807 4b01 	strb.w	r4, [r7], #1
 800af10:	f7f5 fd54 	bl	80009bc <__aeabi_dcmplt>
 800af14:	2800      	cmp	r0, #0
 800af16:	d173      	bne.n	800b000 <_dtoa_r+0x638>
 800af18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af1c:	2000      	movs	r0, #0
 800af1e:	4911      	ldr	r1, [pc, #68]	; (800af64 <_dtoa_r+0x59c>)
 800af20:	f7f5 f922 	bl	8000168 <__aeabi_dsub>
 800af24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af28:	f7f5 fd48 	bl	80009bc <__aeabi_dcmplt>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	f040 80b6 	bne.w	800b09e <_dtoa_r+0x6d6>
 800af32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af34:	429f      	cmp	r7, r3
 800af36:	f43f af7a 	beq.w	800ae2e <_dtoa_r+0x466>
 800af3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af3e:	2200      	movs	r2, #0
 800af40:	4b09      	ldr	r3, [pc, #36]	; (800af68 <_dtoa_r+0x5a0>)
 800af42:	f7f5 fac9 	bl	80004d8 <__aeabi_dmul>
 800af46:	2200      	movs	r2, #0
 800af48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af50:	4b05      	ldr	r3, [pc, #20]	; (800af68 <_dtoa_r+0x5a0>)
 800af52:	f7f5 fac1 	bl	80004d8 <__aeabi_dmul>
 800af56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af5a:	e7c3      	b.n	800aee4 <_dtoa_r+0x51c>
 800af5c:	0800e1d8 	.word	0x0800e1d8
 800af60:	0800e1b0 	.word	0x0800e1b0
 800af64:	3ff00000 	.word	0x3ff00000
 800af68:	40240000 	.word	0x40240000
 800af6c:	401c0000 	.word	0x401c0000
 800af70:	40140000 	.word	0x40140000
 800af74:	3fe00000 	.word	0x3fe00000
 800af78:	4630      	mov	r0, r6
 800af7a:	4639      	mov	r1, r7
 800af7c:	f7f5 faac 	bl	80004d8 <__aeabi_dmul>
 800af80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af86:	9c03      	ldr	r4, [sp, #12]
 800af88:	9314      	str	r3, [sp, #80]	; 0x50
 800af8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af8e:	f7f5 fd53 	bl	8000a38 <__aeabi_d2iz>
 800af92:	9015      	str	r0, [sp, #84]	; 0x54
 800af94:	f7f5 fa36 	bl	8000404 <__aeabi_i2d>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afa0:	f7f5 f8e2 	bl	8000168 <__aeabi_dsub>
 800afa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afa6:	4606      	mov	r6, r0
 800afa8:	3330      	adds	r3, #48	; 0x30
 800afaa:	f804 3b01 	strb.w	r3, [r4], #1
 800afae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afb0:	460f      	mov	r7, r1
 800afb2:	429c      	cmp	r4, r3
 800afb4:	f04f 0200 	mov.w	r2, #0
 800afb8:	d124      	bne.n	800b004 <_dtoa_r+0x63c>
 800afba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800afbe:	4baf      	ldr	r3, [pc, #700]	; (800b27c <_dtoa_r+0x8b4>)
 800afc0:	f7f5 f8d4 	bl	800016c <__adddf3>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4630      	mov	r0, r6
 800afca:	4639      	mov	r1, r7
 800afcc:	f7f5 fd14 	bl	80009f8 <__aeabi_dcmpgt>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d163      	bne.n	800b09c <_dtoa_r+0x6d4>
 800afd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800afd8:	2000      	movs	r0, #0
 800afda:	49a8      	ldr	r1, [pc, #672]	; (800b27c <_dtoa_r+0x8b4>)
 800afdc:	f7f5 f8c4 	bl	8000168 <__aeabi_dsub>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4630      	mov	r0, r6
 800afe6:	4639      	mov	r1, r7
 800afe8:	f7f5 fce8 	bl	80009bc <__aeabi_dcmplt>
 800afec:	2800      	cmp	r0, #0
 800afee:	f43f af1e 	beq.w	800ae2e <_dtoa_r+0x466>
 800aff2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aff4:	1e7b      	subs	r3, r7, #1
 800aff6:	9314      	str	r3, [sp, #80]	; 0x50
 800aff8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800affc:	2b30      	cmp	r3, #48	; 0x30
 800affe:	d0f8      	beq.n	800aff2 <_dtoa_r+0x62a>
 800b000:	46c3      	mov	fp, r8
 800b002:	e03b      	b.n	800b07c <_dtoa_r+0x6b4>
 800b004:	4b9e      	ldr	r3, [pc, #632]	; (800b280 <_dtoa_r+0x8b8>)
 800b006:	f7f5 fa67 	bl	80004d8 <__aeabi_dmul>
 800b00a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b00e:	e7bc      	b.n	800af8a <_dtoa_r+0x5c2>
 800b010:	9f03      	ldr	r7, [sp, #12]
 800b012:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b01a:	4640      	mov	r0, r8
 800b01c:	4649      	mov	r1, r9
 800b01e:	f7f5 fb85 	bl	800072c <__aeabi_ddiv>
 800b022:	f7f5 fd09 	bl	8000a38 <__aeabi_d2iz>
 800b026:	4604      	mov	r4, r0
 800b028:	f7f5 f9ec 	bl	8000404 <__aeabi_i2d>
 800b02c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b030:	f7f5 fa52 	bl	80004d8 <__aeabi_dmul>
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	4640      	mov	r0, r8
 800b03a:	4649      	mov	r1, r9
 800b03c:	f7f5 f894 	bl	8000168 <__aeabi_dsub>
 800b040:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b044:	f807 6b01 	strb.w	r6, [r7], #1
 800b048:	9e03      	ldr	r6, [sp, #12]
 800b04a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b04e:	1bbe      	subs	r6, r7, r6
 800b050:	45b4      	cmp	ip, r6
 800b052:	4602      	mov	r2, r0
 800b054:	460b      	mov	r3, r1
 800b056:	d136      	bne.n	800b0c6 <_dtoa_r+0x6fe>
 800b058:	f7f5 f888 	bl	800016c <__adddf3>
 800b05c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b060:	4680      	mov	r8, r0
 800b062:	4689      	mov	r9, r1
 800b064:	f7f5 fcc8 	bl	80009f8 <__aeabi_dcmpgt>
 800b068:	bb58      	cbnz	r0, 800b0c2 <_dtoa_r+0x6fa>
 800b06a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b06e:	4640      	mov	r0, r8
 800b070:	4649      	mov	r1, r9
 800b072:	f7f5 fc99 	bl	80009a8 <__aeabi_dcmpeq>
 800b076:	b108      	cbz	r0, 800b07c <_dtoa_r+0x6b4>
 800b078:	07e3      	lsls	r3, r4, #31
 800b07a:	d422      	bmi.n	800b0c2 <_dtoa_r+0x6fa>
 800b07c:	4651      	mov	r1, sl
 800b07e:	4628      	mov	r0, r5
 800b080:	f000 fbc2 	bl	800b808 <_Bfree>
 800b084:	2300      	movs	r3, #0
 800b086:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b088:	703b      	strb	r3, [r7, #0]
 800b08a:	f10b 0301 	add.w	r3, fp, #1
 800b08e:	6013      	str	r3, [r2, #0]
 800b090:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b092:	2b00      	cmp	r3, #0
 800b094:	f43f ace6 	beq.w	800aa64 <_dtoa_r+0x9c>
 800b098:	601f      	str	r7, [r3, #0]
 800b09a:	e4e3      	b.n	800aa64 <_dtoa_r+0x9c>
 800b09c:	4627      	mov	r7, r4
 800b09e:	463b      	mov	r3, r7
 800b0a0:	461f      	mov	r7, r3
 800b0a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0a6:	2a39      	cmp	r2, #57	; 0x39
 800b0a8:	d107      	bne.n	800b0ba <_dtoa_r+0x6f2>
 800b0aa:	9a03      	ldr	r2, [sp, #12]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d1f7      	bne.n	800b0a0 <_dtoa_r+0x6d8>
 800b0b0:	2230      	movs	r2, #48	; 0x30
 800b0b2:	9903      	ldr	r1, [sp, #12]
 800b0b4:	f108 0801 	add.w	r8, r8, #1
 800b0b8:	700a      	strb	r2, [r1, #0]
 800b0ba:	781a      	ldrb	r2, [r3, #0]
 800b0bc:	3201      	adds	r2, #1
 800b0be:	701a      	strb	r2, [r3, #0]
 800b0c0:	e79e      	b.n	800b000 <_dtoa_r+0x638>
 800b0c2:	46d8      	mov	r8, fp
 800b0c4:	e7eb      	b.n	800b09e <_dtoa_r+0x6d6>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	4b6d      	ldr	r3, [pc, #436]	; (800b280 <_dtoa_r+0x8b8>)
 800b0ca:	f7f5 fa05 	bl	80004d8 <__aeabi_dmul>
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	4680      	mov	r8, r0
 800b0d4:	4689      	mov	r9, r1
 800b0d6:	f7f5 fc67 	bl	80009a8 <__aeabi_dcmpeq>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d09b      	beq.n	800b016 <_dtoa_r+0x64e>
 800b0de:	e7cd      	b.n	800b07c <_dtoa_r+0x6b4>
 800b0e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0e2:	2a00      	cmp	r2, #0
 800b0e4:	f000 80c4 	beq.w	800b270 <_dtoa_r+0x8a8>
 800b0e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b0ea:	2a01      	cmp	r2, #1
 800b0ec:	f300 80a8 	bgt.w	800b240 <_dtoa_r+0x878>
 800b0f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b0f2:	2a00      	cmp	r2, #0
 800b0f4:	f000 80a0 	beq.w	800b238 <_dtoa_r+0x870>
 800b0f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0fc:	464f      	mov	r7, r9
 800b0fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b102:	2101      	movs	r1, #1
 800b104:	441a      	add	r2, r3
 800b106:	4628      	mov	r0, r5
 800b108:	4499      	add	r9, r3
 800b10a:	9209      	str	r2, [sp, #36]	; 0x24
 800b10c:	f000 fc7c 	bl	800ba08 <__i2b>
 800b110:	4606      	mov	r6, r0
 800b112:	b15f      	cbz	r7, 800b12c <_dtoa_r+0x764>
 800b114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b116:	2b00      	cmp	r3, #0
 800b118:	dd08      	ble.n	800b12c <_dtoa_r+0x764>
 800b11a:	42bb      	cmp	r3, r7
 800b11c:	bfa8      	it	ge
 800b11e:	463b      	movge	r3, r7
 800b120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b122:	eba9 0903 	sub.w	r9, r9, r3
 800b126:	1aff      	subs	r7, r7, r3
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	9309      	str	r3, [sp, #36]	; 0x24
 800b12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b12e:	b1f3      	cbz	r3, 800b16e <_dtoa_r+0x7a6>
 800b130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b132:	2b00      	cmp	r3, #0
 800b134:	f000 80a0 	beq.w	800b278 <_dtoa_r+0x8b0>
 800b138:	2c00      	cmp	r4, #0
 800b13a:	dd10      	ble.n	800b15e <_dtoa_r+0x796>
 800b13c:	4631      	mov	r1, r6
 800b13e:	4622      	mov	r2, r4
 800b140:	4628      	mov	r0, r5
 800b142:	f000 fd1f 	bl	800bb84 <__pow5mult>
 800b146:	4652      	mov	r2, sl
 800b148:	4601      	mov	r1, r0
 800b14a:	4606      	mov	r6, r0
 800b14c:	4628      	mov	r0, r5
 800b14e:	f000 fc71 	bl	800ba34 <__multiply>
 800b152:	4680      	mov	r8, r0
 800b154:	4651      	mov	r1, sl
 800b156:	4628      	mov	r0, r5
 800b158:	f000 fb56 	bl	800b808 <_Bfree>
 800b15c:	46c2      	mov	sl, r8
 800b15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b160:	1b1a      	subs	r2, r3, r4
 800b162:	d004      	beq.n	800b16e <_dtoa_r+0x7a6>
 800b164:	4651      	mov	r1, sl
 800b166:	4628      	mov	r0, r5
 800b168:	f000 fd0c 	bl	800bb84 <__pow5mult>
 800b16c:	4682      	mov	sl, r0
 800b16e:	2101      	movs	r1, #1
 800b170:	4628      	mov	r0, r5
 800b172:	f000 fc49 	bl	800ba08 <__i2b>
 800b176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b178:	4604      	mov	r4, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f340 8082 	ble.w	800b284 <_dtoa_r+0x8bc>
 800b180:	461a      	mov	r2, r3
 800b182:	4601      	mov	r1, r0
 800b184:	4628      	mov	r0, r5
 800b186:	f000 fcfd 	bl	800bb84 <__pow5mult>
 800b18a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b18c:	4604      	mov	r4, r0
 800b18e:	2b01      	cmp	r3, #1
 800b190:	dd7b      	ble.n	800b28a <_dtoa_r+0x8c2>
 800b192:	f04f 0800 	mov.w	r8, #0
 800b196:	6923      	ldr	r3, [r4, #16]
 800b198:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b19c:	6918      	ldr	r0, [r3, #16]
 800b19e:	f000 fbe5 	bl	800b96c <__hi0bits>
 800b1a2:	f1c0 0020 	rsb	r0, r0, #32
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	4418      	add	r0, r3
 800b1aa:	f010 001f 	ands.w	r0, r0, #31
 800b1ae:	f000 8092 	beq.w	800b2d6 <_dtoa_r+0x90e>
 800b1b2:	f1c0 0320 	rsb	r3, r0, #32
 800b1b6:	2b04      	cmp	r3, #4
 800b1b8:	f340 8085 	ble.w	800b2c6 <_dtoa_r+0x8fe>
 800b1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1be:	f1c0 001c 	rsb	r0, r0, #28
 800b1c2:	4403      	add	r3, r0
 800b1c4:	4481      	add	r9, r0
 800b1c6:	4407      	add	r7, r0
 800b1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ca:	f1b9 0f00 	cmp.w	r9, #0
 800b1ce:	dd05      	ble.n	800b1dc <_dtoa_r+0x814>
 800b1d0:	4651      	mov	r1, sl
 800b1d2:	464a      	mov	r2, r9
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	f000 fd2f 	bl	800bc38 <__lshift>
 800b1da:	4682      	mov	sl, r0
 800b1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	dd05      	ble.n	800b1ee <_dtoa_r+0x826>
 800b1e2:	4621      	mov	r1, r4
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f000 fd26 	bl	800bc38 <__lshift>
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d072      	beq.n	800b2da <_dtoa_r+0x912>
 800b1f4:	4621      	mov	r1, r4
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	f000 fd8a 	bl	800bd10 <__mcmp>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	da6c      	bge.n	800b2da <_dtoa_r+0x912>
 800b200:	2300      	movs	r3, #0
 800b202:	4651      	mov	r1, sl
 800b204:	220a      	movs	r2, #10
 800b206:	4628      	mov	r0, r5
 800b208:	f000 fb20 	bl	800b84c <__multadd>
 800b20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b20e:	4682      	mov	sl, r0
 800b210:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 81ac 	beq.w	800b572 <_dtoa_r+0xbaa>
 800b21a:	2300      	movs	r3, #0
 800b21c:	4631      	mov	r1, r6
 800b21e:	220a      	movs	r2, #10
 800b220:	4628      	mov	r0, r5
 800b222:	f000 fb13 	bl	800b84c <__multadd>
 800b226:	9b06      	ldr	r3, [sp, #24]
 800b228:	4606      	mov	r6, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f300 8093 	bgt.w	800b356 <_dtoa_r+0x98e>
 800b230:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b232:	2b02      	cmp	r3, #2
 800b234:	dc59      	bgt.n	800b2ea <_dtoa_r+0x922>
 800b236:	e08e      	b.n	800b356 <_dtoa_r+0x98e>
 800b238:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b23a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b23e:	e75d      	b.n	800b0fc <_dtoa_r+0x734>
 800b240:	9b08      	ldr	r3, [sp, #32]
 800b242:	1e5c      	subs	r4, r3, #1
 800b244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b246:	42a3      	cmp	r3, r4
 800b248:	bfbf      	itttt	lt
 800b24a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b24c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b24e:	1ae3      	sublt	r3, r4, r3
 800b250:	18d2      	addlt	r2, r2, r3
 800b252:	bfa8      	it	ge
 800b254:	1b1c      	subge	r4, r3, r4
 800b256:	9b08      	ldr	r3, [sp, #32]
 800b258:	bfbe      	ittt	lt
 800b25a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b25c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800b25e:	2400      	movlt	r4, #0
 800b260:	2b00      	cmp	r3, #0
 800b262:	bfb5      	itete	lt
 800b264:	eba9 0703 	sublt.w	r7, r9, r3
 800b268:	464f      	movge	r7, r9
 800b26a:	2300      	movlt	r3, #0
 800b26c:	9b08      	ldrge	r3, [sp, #32]
 800b26e:	e747      	b.n	800b100 <_dtoa_r+0x738>
 800b270:	464f      	mov	r7, r9
 800b272:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b274:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b276:	e74c      	b.n	800b112 <_dtoa_r+0x74a>
 800b278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b27a:	e773      	b.n	800b164 <_dtoa_r+0x79c>
 800b27c:	3fe00000 	.word	0x3fe00000
 800b280:	40240000 	.word	0x40240000
 800b284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b286:	2b01      	cmp	r3, #1
 800b288:	dc18      	bgt.n	800b2bc <_dtoa_r+0x8f4>
 800b28a:	9b04      	ldr	r3, [sp, #16]
 800b28c:	b9b3      	cbnz	r3, 800b2bc <_dtoa_r+0x8f4>
 800b28e:	9b05      	ldr	r3, [sp, #20]
 800b290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b294:	b993      	cbnz	r3, 800b2bc <_dtoa_r+0x8f4>
 800b296:	9b05      	ldr	r3, [sp, #20]
 800b298:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b29c:	0d1b      	lsrs	r3, r3, #20
 800b29e:	051b      	lsls	r3, r3, #20
 800b2a0:	b17b      	cbz	r3, 800b2c2 <_dtoa_r+0x8fa>
 800b2a2:	f04f 0801 	mov.w	r8, #1
 800b2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a8:	f109 0901 	add.w	r9, r9, #1
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f47f af6f 	bne.w	800b196 <_dtoa_r+0x7ce>
 800b2b8:	2001      	movs	r0, #1
 800b2ba:	e774      	b.n	800b1a6 <_dtoa_r+0x7de>
 800b2bc:	f04f 0800 	mov.w	r8, #0
 800b2c0:	e7f6      	b.n	800b2b0 <_dtoa_r+0x8e8>
 800b2c2:	4698      	mov	r8, r3
 800b2c4:	e7f4      	b.n	800b2b0 <_dtoa_r+0x8e8>
 800b2c6:	d080      	beq.n	800b1ca <_dtoa_r+0x802>
 800b2c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ca:	331c      	adds	r3, #28
 800b2cc:	441a      	add	r2, r3
 800b2ce:	4499      	add	r9, r3
 800b2d0:	441f      	add	r7, r3
 800b2d2:	9209      	str	r2, [sp, #36]	; 0x24
 800b2d4:	e779      	b.n	800b1ca <_dtoa_r+0x802>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	e7f6      	b.n	800b2c8 <_dtoa_r+0x900>
 800b2da:	9b08      	ldr	r3, [sp, #32]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	dc34      	bgt.n	800b34a <_dtoa_r+0x982>
 800b2e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	dd31      	ble.n	800b34a <_dtoa_r+0x982>
 800b2e6:	9b08      	ldr	r3, [sp, #32]
 800b2e8:	9306      	str	r3, [sp, #24]
 800b2ea:	9b06      	ldr	r3, [sp, #24]
 800b2ec:	b963      	cbnz	r3, 800b308 <_dtoa_r+0x940>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	2205      	movs	r2, #5
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	f000 faaa 	bl	800b84c <__multadd>
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	4650      	mov	r0, sl
 800b2fe:	f000 fd07 	bl	800bd10 <__mcmp>
 800b302:	2800      	cmp	r0, #0
 800b304:	f73f adbf 	bgt.w	800ae86 <_dtoa_r+0x4be>
 800b308:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b30a:	9f03      	ldr	r7, [sp, #12]
 800b30c:	ea6f 0b03 	mvn.w	fp, r3
 800b310:	f04f 0800 	mov.w	r8, #0
 800b314:	4621      	mov	r1, r4
 800b316:	4628      	mov	r0, r5
 800b318:	f000 fa76 	bl	800b808 <_Bfree>
 800b31c:	2e00      	cmp	r6, #0
 800b31e:	f43f aead 	beq.w	800b07c <_dtoa_r+0x6b4>
 800b322:	f1b8 0f00 	cmp.w	r8, #0
 800b326:	d005      	beq.n	800b334 <_dtoa_r+0x96c>
 800b328:	45b0      	cmp	r8, r6
 800b32a:	d003      	beq.n	800b334 <_dtoa_r+0x96c>
 800b32c:	4641      	mov	r1, r8
 800b32e:	4628      	mov	r0, r5
 800b330:	f000 fa6a 	bl	800b808 <_Bfree>
 800b334:	4631      	mov	r1, r6
 800b336:	4628      	mov	r0, r5
 800b338:	f000 fa66 	bl	800b808 <_Bfree>
 800b33c:	e69e      	b.n	800b07c <_dtoa_r+0x6b4>
 800b33e:	2400      	movs	r4, #0
 800b340:	4626      	mov	r6, r4
 800b342:	e7e1      	b.n	800b308 <_dtoa_r+0x940>
 800b344:	46c3      	mov	fp, r8
 800b346:	4626      	mov	r6, r4
 800b348:	e59d      	b.n	800ae86 <_dtoa_r+0x4be>
 800b34a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 80c8 	beq.w	800b4e2 <_dtoa_r+0xb1a>
 800b352:	9b08      	ldr	r3, [sp, #32]
 800b354:	9306      	str	r3, [sp, #24]
 800b356:	2f00      	cmp	r7, #0
 800b358:	dd05      	ble.n	800b366 <_dtoa_r+0x99e>
 800b35a:	4631      	mov	r1, r6
 800b35c:	463a      	mov	r2, r7
 800b35e:	4628      	mov	r0, r5
 800b360:	f000 fc6a 	bl	800bc38 <__lshift>
 800b364:	4606      	mov	r6, r0
 800b366:	f1b8 0f00 	cmp.w	r8, #0
 800b36a:	d05b      	beq.n	800b424 <_dtoa_r+0xa5c>
 800b36c:	4628      	mov	r0, r5
 800b36e:	6871      	ldr	r1, [r6, #4]
 800b370:	f000 fa0a 	bl	800b788 <_Balloc>
 800b374:	4607      	mov	r7, r0
 800b376:	b928      	cbnz	r0, 800b384 <_dtoa_r+0x9bc>
 800b378:	4602      	mov	r2, r0
 800b37a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b37e:	4b81      	ldr	r3, [pc, #516]	; (800b584 <_dtoa_r+0xbbc>)
 800b380:	f7ff bb36 	b.w	800a9f0 <_dtoa_r+0x28>
 800b384:	6932      	ldr	r2, [r6, #16]
 800b386:	f106 010c 	add.w	r1, r6, #12
 800b38a:	3202      	adds	r2, #2
 800b38c:	0092      	lsls	r2, r2, #2
 800b38e:	300c      	adds	r0, #12
 800b390:	f7ff fa7d 	bl	800a88e <memcpy>
 800b394:	2201      	movs	r2, #1
 800b396:	4639      	mov	r1, r7
 800b398:	4628      	mov	r0, r5
 800b39a:	f000 fc4d 	bl	800bc38 <__lshift>
 800b39e:	46b0      	mov	r8, r6
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	9b03      	ldr	r3, [sp, #12]
 800b3a4:	9a03      	ldr	r2, [sp, #12]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	9308      	str	r3, [sp, #32]
 800b3aa:	9b06      	ldr	r3, [sp, #24]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3b0:	9b04      	ldr	r3, [sp, #16]
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b3b8:	9b08      	ldr	r3, [sp, #32]
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	4650      	mov	r0, sl
 800b3c0:	9304      	str	r3, [sp, #16]
 800b3c2:	f7ff fa77 	bl	800a8b4 <quorem>
 800b3c6:	4641      	mov	r1, r8
 800b3c8:	9006      	str	r0, [sp, #24]
 800b3ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b3ce:	4650      	mov	r0, sl
 800b3d0:	f000 fc9e 	bl	800bd10 <__mcmp>
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	9009      	str	r0, [sp, #36]	; 0x24
 800b3d8:	4621      	mov	r1, r4
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f000 fcb4 	bl	800bd48 <__mdiff>
 800b3e0:	68c2      	ldr	r2, [r0, #12]
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	bb02      	cbnz	r2, 800b428 <_dtoa_r+0xa60>
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	f000 fc91 	bl	800bd10 <__mcmp>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	4639      	mov	r1, r7
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	920c      	str	r2, [sp, #48]	; 0x30
 800b3f6:	f000 fa07 	bl	800b808 <_Bfree>
 800b3fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3fe:	9f08      	ldr	r7, [sp, #32]
 800b400:	ea43 0102 	orr.w	r1, r3, r2
 800b404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b406:	4319      	orrs	r1, r3
 800b408:	d110      	bne.n	800b42c <_dtoa_r+0xa64>
 800b40a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b40e:	d029      	beq.n	800b464 <_dtoa_r+0xa9c>
 800b410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b412:	2b00      	cmp	r3, #0
 800b414:	dd02      	ble.n	800b41c <_dtoa_r+0xa54>
 800b416:	9b06      	ldr	r3, [sp, #24]
 800b418:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b41c:	9b04      	ldr	r3, [sp, #16]
 800b41e:	f883 9000 	strb.w	r9, [r3]
 800b422:	e777      	b.n	800b314 <_dtoa_r+0x94c>
 800b424:	4630      	mov	r0, r6
 800b426:	e7ba      	b.n	800b39e <_dtoa_r+0x9d6>
 800b428:	2201      	movs	r2, #1
 800b42a:	e7e1      	b.n	800b3f0 <_dtoa_r+0xa28>
 800b42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42e:	2b00      	cmp	r3, #0
 800b430:	db04      	blt.n	800b43c <_dtoa_r+0xa74>
 800b432:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b434:	430b      	orrs	r3, r1
 800b436:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b438:	430b      	orrs	r3, r1
 800b43a:	d120      	bne.n	800b47e <_dtoa_r+0xab6>
 800b43c:	2a00      	cmp	r2, #0
 800b43e:	dded      	ble.n	800b41c <_dtoa_r+0xa54>
 800b440:	4651      	mov	r1, sl
 800b442:	2201      	movs	r2, #1
 800b444:	4628      	mov	r0, r5
 800b446:	f000 fbf7 	bl	800bc38 <__lshift>
 800b44a:	4621      	mov	r1, r4
 800b44c:	4682      	mov	sl, r0
 800b44e:	f000 fc5f 	bl	800bd10 <__mcmp>
 800b452:	2800      	cmp	r0, #0
 800b454:	dc03      	bgt.n	800b45e <_dtoa_r+0xa96>
 800b456:	d1e1      	bne.n	800b41c <_dtoa_r+0xa54>
 800b458:	f019 0f01 	tst.w	r9, #1
 800b45c:	d0de      	beq.n	800b41c <_dtoa_r+0xa54>
 800b45e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b462:	d1d8      	bne.n	800b416 <_dtoa_r+0xa4e>
 800b464:	2339      	movs	r3, #57	; 0x39
 800b466:	9a04      	ldr	r2, [sp, #16]
 800b468:	7013      	strb	r3, [r2, #0]
 800b46a:	463b      	mov	r3, r7
 800b46c:	461f      	mov	r7, r3
 800b46e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b472:	3b01      	subs	r3, #1
 800b474:	2a39      	cmp	r2, #57	; 0x39
 800b476:	d06b      	beq.n	800b550 <_dtoa_r+0xb88>
 800b478:	3201      	adds	r2, #1
 800b47a:	701a      	strb	r2, [r3, #0]
 800b47c:	e74a      	b.n	800b314 <_dtoa_r+0x94c>
 800b47e:	2a00      	cmp	r2, #0
 800b480:	dd07      	ble.n	800b492 <_dtoa_r+0xaca>
 800b482:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b486:	d0ed      	beq.n	800b464 <_dtoa_r+0xa9c>
 800b488:	9a04      	ldr	r2, [sp, #16]
 800b48a:	f109 0301 	add.w	r3, r9, #1
 800b48e:	7013      	strb	r3, [r2, #0]
 800b490:	e740      	b.n	800b314 <_dtoa_r+0x94c>
 800b492:	9b08      	ldr	r3, [sp, #32]
 800b494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b496:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d042      	beq.n	800b524 <_dtoa_r+0xb5c>
 800b49e:	4651      	mov	r1, sl
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	220a      	movs	r2, #10
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f000 f9d1 	bl	800b84c <__multadd>
 800b4aa:	45b0      	cmp	r8, r6
 800b4ac:	4682      	mov	sl, r0
 800b4ae:	f04f 0300 	mov.w	r3, #0
 800b4b2:	f04f 020a 	mov.w	r2, #10
 800b4b6:	4641      	mov	r1, r8
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	d107      	bne.n	800b4cc <_dtoa_r+0xb04>
 800b4bc:	f000 f9c6 	bl	800b84c <__multadd>
 800b4c0:	4680      	mov	r8, r0
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	9b08      	ldr	r3, [sp, #32]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	9308      	str	r3, [sp, #32]
 800b4ca:	e775      	b.n	800b3b8 <_dtoa_r+0x9f0>
 800b4cc:	f000 f9be 	bl	800b84c <__multadd>
 800b4d0:	4631      	mov	r1, r6
 800b4d2:	4680      	mov	r8, r0
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	220a      	movs	r2, #10
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f000 f9b7 	bl	800b84c <__multadd>
 800b4de:	4606      	mov	r6, r0
 800b4e0:	e7f0      	b.n	800b4c4 <_dtoa_r+0xafc>
 800b4e2:	9b08      	ldr	r3, [sp, #32]
 800b4e4:	9306      	str	r3, [sp, #24]
 800b4e6:	9f03      	ldr	r7, [sp, #12]
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	4650      	mov	r0, sl
 800b4ec:	f7ff f9e2 	bl	800a8b4 <quorem>
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b4f6:	f807 9b01 	strb.w	r9, [r7], #1
 800b4fa:	1afa      	subs	r2, r7, r3
 800b4fc:	9b06      	ldr	r3, [sp, #24]
 800b4fe:	4293      	cmp	r3, r2
 800b500:	dd07      	ble.n	800b512 <_dtoa_r+0xb4a>
 800b502:	4651      	mov	r1, sl
 800b504:	2300      	movs	r3, #0
 800b506:	220a      	movs	r2, #10
 800b508:	4628      	mov	r0, r5
 800b50a:	f000 f99f 	bl	800b84c <__multadd>
 800b50e:	4682      	mov	sl, r0
 800b510:	e7ea      	b.n	800b4e8 <_dtoa_r+0xb20>
 800b512:	9b06      	ldr	r3, [sp, #24]
 800b514:	f04f 0800 	mov.w	r8, #0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bfcc      	ite	gt
 800b51c:	461f      	movgt	r7, r3
 800b51e:	2701      	movle	r7, #1
 800b520:	9b03      	ldr	r3, [sp, #12]
 800b522:	441f      	add	r7, r3
 800b524:	4651      	mov	r1, sl
 800b526:	2201      	movs	r2, #1
 800b528:	4628      	mov	r0, r5
 800b52a:	f000 fb85 	bl	800bc38 <__lshift>
 800b52e:	4621      	mov	r1, r4
 800b530:	4682      	mov	sl, r0
 800b532:	f000 fbed 	bl	800bd10 <__mcmp>
 800b536:	2800      	cmp	r0, #0
 800b538:	dc97      	bgt.n	800b46a <_dtoa_r+0xaa2>
 800b53a:	d102      	bne.n	800b542 <_dtoa_r+0xb7a>
 800b53c:	f019 0f01 	tst.w	r9, #1
 800b540:	d193      	bne.n	800b46a <_dtoa_r+0xaa2>
 800b542:	463b      	mov	r3, r7
 800b544:	461f      	mov	r7, r3
 800b546:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b54a:	2a30      	cmp	r2, #48	; 0x30
 800b54c:	d0fa      	beq.n	800b544 <_dtoa_r+0xb7c>
 800b54e:	e6e1      	b.n	800b314 <_dtoa_r+0x94c>
 800b550:	9a03      	ldr	r2, [sp, #12]
 800b552:	429a      	cmp	r2, r3
 800b554:	d18a      	bne.n	800b46c <_dtoa_r+0xaa4>
 800b556:	2331      	movs	r3, #49	; 0x31
 800b558:	f10b 0b01 	add.w	fp, fp, #1
 800b55c:	e797      	b.n	800b48e <_dtoa_r+0xac6>
 800b55e:	4b0a      	ldr	r3, [pc, #40]	; (800b588 <_dtoa_r+0xbc0>)
 800b560:	f7ff ba9f 	b.w	800aaa2 <_dtoa_r+0xda>
 800b564:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b566:	2b00      	cmp	r3, #0
 800b568:	f47f aa77 	bne.w	800aa5a <_dtoa_r+0x92>
 800b56c:	4b07      	ldr	r3, [pc, #28]	; (800b58c <_dtoa_r+0xbc4>)
 800b56e:	f7ff ba98 	b.w	800aaa2 <_dtoa_r+0xda>
 800b572:	9b06      	ldr	r3, [sp, #24]
 800b574:	2b00      	cmp	r3, #0
 800b576:	dcb6      	bgt.n	800b4e6 <_dtoa_r+0xb1e>
 800b578:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	f73f aeb5 	bgt.w	800b2ea <_dtoa_r+0x922>
 800b580:	e7b1      	b.n	800b4e6 <_dtoa_r+0xb1e>
 800b582:	bf00      	nop
 800b584:	0800e13f 	.word	0x0800e13f
 800b588:	0800e09a 	.word	0x0800e09a
 800b58c:	0800e0c3 	.word	0x0800e0c3

0800b590 <_free_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	4605      	mov	r5, r0
 800b594:	2900      	cmp	r1, #0
 800b596:	d040      	beq.n	800b61a <_free_r+0x8a>
 800b598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b59c:	1f0c      	subs	r4, r1, #4
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	bfb8      	it	lt
 800b5a2:	18e4      	addlt	r4, r4, r3
 800b5a4:	f000 f8e4 	bl	800b770 <__malloc_lock>
 800b5a8:	4a1c      	ldr	r2, [pc, #112]	; (800b61c <_free_r+0x8c>)
 800b5aa:	6813      	ldr	r3, [r2, #0]
 800b5ac:	b933      	cbnz	r3, 800b5bc <_free_r+0x2c>
 800b5ae:	6063      	str	r3, [r4, #4]
 800b5b0:	6014      	str	r4, [r2, #0]
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5b8:	f000 b8e0 	b.w	800b77c <__malloc_unlock>
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	d908      	bls.n	800b5d2 <_free_r+0x42>
 800b5c0:	6820      	ldr	r0, [r4, #0]
 800b5c2:	1821      	adds	r1, r4, r0
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	bf01      	itttt	eq
 800b5c8:	6819      	ldreq	r1, [r3, #0]
 800b5ca:	685b      	ldreq	r3, [r3, #4]
 800b5cc:	1809      	addeq	r1, r1, r0
 800b5ce:	6021      	streq	r1, [r4, #0]
 800b5d0:	e7ed      	b.n	800b5ae <_free_r+0x1e>
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	b10b      	cbz	r3, 800b5dc <_free_r+0x4c>
 800b5d8:	42a3      	cmp	r3, r4
 800b5da:	d9fa      	bls.n	800b5d2 <_free_r+0x42>
 800b5dc:	6811      	ldr	r1, [r2, #0]
 800b5de:	1850      	adds	r0, r2, r1
 800b5e0:	42a0      	cmp	r0, r4
 800b5e2:	d10b      	bne.n	800b5fc <_free_r+0x6c>
 800b5e4:	6820      	ldr	r0, [r4, #0]
 800b5e6:	4401      	add	r1, r0
 800b5e8:	1850      	adds	r0, r2, r1
 800b5ea:	4283      	cmp	r3, r0
 800b5ec:	6011      	str	r1, [r2, #0]
 800b5ee:	d1e0      	bne.n	800b5b2 <_free_r+0x22>
 800b5f0:	6818      	ldr	r0, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	4408      	add	r0, r1
 800b5f6:	6010      	str	r0, [r2, #0]
 800b5f8:	6053      	str	r3, [r2, #4]
 800b5fa:	e7da      	b.n	800b5b2 <_free_r+0x22>
 800b5fc:	d902      	bls.n	800b604 <_free_r+0x74>
 800b5fe:	230c      	movs	r3, #12
 800b600:	602b      	str	r3, [r5, #0]
 800b602:	e7d6      	b.n	800b5b2 <_free_r+0x22>
 800b604:	6820      	ldr	r0, [r4, #0]
 800b606:	1821      	adds	r1, r4, r0
 800b608:	428b      	cmp	r3, r1
 800b60a:	bf01      	itttt	eq
 800b60c:	6819      	ldreq	r1, [r3, #0]
 800b60e:	685b      	ldreq	r3, [r3, #4]
 800b610:	1809      	addeq	r1, r1, r0
 800b612:	6021      	streq	r1, [r4, #0]
 800b614:	6063      	str	r3, [r4, #4]
 800b616:	6054      	str	r4, [r2, #4]
 800b618:	e7cb      	b.n	800b5b2 <_free_r+0x22>
 800b61a:	bd38      	pop	{r3, r4, r5, pc}
 800b61c:	20001e8c 	.word	0x20001e8c

0800b620 <malloc>:
 800b620:	4b02      	ldr	r3, [pc, #8]	; (800b62c <malloc+0xc>)
 800b622:	4601      	mov	r1, r0
 800b624:	6818      	ldr	r0, [r3, #0]
 800b626:	f000 b823 	b.w	800b670 <_malloc_r>
 800b62a:	bf00      	nop
 800b62c:	20000068 	.word	0x20000068

0800b630 <sbrk_aligned>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	4e0e      	ldr	r6, [pc, #56]	; (800b66c <sbrk_aligned+0x3c>)
 800b634:	460c      	mov	r4, r1
 800b636:	6831      	ldr	r1, [r6, #0]
 800b638:	4605      	mov	r5, r0
 800b63a:	b911      	cbnz	r1, 800b642 <sbrk_aligned+0x12>
 800b63c:	f001 ffd2 	bl	800d5e4 <_sbrk_r>
 800b640:	6030      	str	r0, [r6, #0]
 800b642:	4621      	mov	r1, r4
 800b644:	4628      	mov	r0, r5
 800b646:	f001 ffcd 	bl	800d5e4 <_sbrk_r>
 800b64a:	1c43      	adds	r3, r0, #1
 800b64c:	d00a      	beq.n	800b664 <sbrk_aligned+0x34>
 800b64e:	1cc4      	adds	r4, r0, #3
 800b650:	f024 0403 	bic.w	r4, r4, #3
 800b654:	42a0      	cmp	r0, r4
 800b656:	d007      	beq.n	800b668 <sbrk_aligned+0x38>
 800b658:	1a21      	subs	r1, r4, r0
 800b65a:	4628      	mov	r0, r5
 800b65c:	f001 ffc2 	bl	800d5e4 <_sbrk_r>
 800b660:	3001      	adds	r0, #1
 800b662:	d101      	bne.n	800b668 <sbrk_aligned+0x38>
 800b664:	f04f 34ff 	mov.w	r4, #4294967295
 800b668:	4620      	mov	r0, r4
 800b66a:	bd70      	pop	{r4, r5, r6, pc}
 800b66c:	20001e90 	.word	0x20001e90

0800b670 <_malloc_r>:
 800b670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b674:	1ccd      	adds	r5, r1, #3
 800b676:	f025 0503 	bic.w	r5, r5, #3
 800b67a:	3508      	adds	r5, #8
 800b67c:	2d0c      	cmp	r5, #12
 800b67e:	bf38      	it	cc
 800b680:	250c      	movcc	r5, #12
 800b682:	2d00      	cmp	r5, #0
 800b684:	4607      	mov	r7, r0
 800b686:	db01      	blt.n	800b68c <_malloc_r+0x1c>
 800b688:	42a9      	cmp	r1, r5
 800b68a:	d905      	bls.n	800b698 <_malloc_r+0x28>
 800b68c:	230c      	movs	r3, #12
 800b68e:	2600      	movs	r6, #0
 800b690:	603b      	str	r3, [r7, #0]
 800b692:	4630      	mov	r0, r6
 800b694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b698:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b76c <_malloc_r+0xfc>
 800b69c:	f000 f868 	bl	800b770 <__malloc_lock>
 800b6a0:	f8d8 3000 	ldr.w	r3, [r8]
 800b6a4:	461c      	mov	r4, r3
 800b6a6:	bb5c      	cbnz	r4, 800b700 <_malloc_r+0x90>
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	f7ff ffc0 	bl	800b630 <sbrk_aligned>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	d155      	bne.n	800b762 <_malloc_r+0xf2>
 800b6b6:	f8d8 4000 	ldr.w	r4, [r8]
 800b6ba:	4626      	mov	r6, r4
 800b6bc:	2e00      	cmp	r6, #0
 800b6be:	d145      	bne.n	800b74c <_malloc_r+0xdc>
 800b6c0:	2c00      	cmp	r4, #0
 800b6c2:	d048      	beq.n	800b756 <_malloc_r+0xe6>
 800b6c4:	6823      	ldr	r3, [r4, #0]
 800b6c6:	4631      	mov	r1, r6
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	eb04 0903 	add.w	r9, r4, r3
 800b6ce:	f001 ff89 	bl	800d5e4 <_sbrk_r>
 800b6d2:	4581      	cmp	r9, r0
 800b6d4:	d13f      	bne.n	800b756 <_malloc_r+0xe6>
 800b6d6:	6821      	ldr	r1, [r4, #0]
 800b6d8:	4638      	mov	r0, r7
 800b6da:	1a6d      	subs	r5, r5, r1
 800b6dc:	4629      	mov	r1, r5
 800b6de:	f7ff ffa7 	bl	800b630 <sbrk_aligned>
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	d037      	beq.n	800b756 <_malloc_r+0xe6>
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	442b      	add	r3, r5
 800b6ea:	6023      	str	r3, [r4, #0]
 800b6ec:	f8d8 3000 	ldr.w	r3, [r8]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d038      	beq.n	800b766 <_malloc_r+0xf6>
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	42a2      	cmp	r2, r4
 800b6f8:	d12b      	bne.n	800b752 <_malloc_r+0xe2>
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	605a      	str	r2, [r3, #4]
 800b6fe:	e00f      	b.n	800b720 <_malloc_r+0xb0>
 800b700:	6822      	ldr	r2, [r4, #0]
 800b702:	1b52      	subs	r2, r2, r5
 800b704:	d41f      	bmi.n	800b746 <_malloc_r+0xd6>
 800b706:	2a0b      	cmp	r2, #11
 800b708:	d917      	bls.n	800b73a <_malloc_r+0xca>
 800b70a:	1961      	adds	r1, r4, r5
 800b70c:	42a3      	cmp	r3, r4
 800b70e:	6025      	str	r5, [r4, #0]
 800b710:	bf18      	it	ne
 800b712:	6059      	strne	r1, [r3, #4]
 800b714:	6863      	ldr	r3, [r4, #4]
 800b716:	bf08      	it	eq
 800b718:	f8c8 1000 	streq.w	r1, [r8]
 800b71c:	5162      	str	r2, [r4, r5]
 800b71e:	604b      	str	r3, [r1, #4]
 800b720:	4638      	mov	r0, r7
 800b722:	f104 060b 	add.w	r6, r4, #11
 800b726:	f000 f829 	bl	800b77c <__malloc_unlock>
 800b72a:	f026 0607 	bic.w	r6, r6, #7
 800b72e:	1d23      	adds	r3, r4, #4
 800b730:	1af2      	subs	r2, r6, r3
 800b732:	d0ae      	beq.n	800b692 <_malloc_r+0x22>
 800b734:	1b9b      	subs	r3, r3, r6
 800b736:	50a3      	str	r3, [r4, r2]
 800b738:	e7ab      	b.n	800b692 <_malloc_r+0x22>
 800b73a:	42a3      	cmp	r3, r4
 800b73c:	6862      	ldr	r2, [r4, #4]
 800b73e:	d1dd      	bne.n	800b6fc <_malloc_r+0x8c>
 800b740:	f8c8 2000 	str.w	r2, [r8]
 800b744:	e7ec      	b.n	800b720 <_malloc_r+0xb0>
 800b746:	4623      	mov	r3, r4
 800b748:	6864      	ldr	r4, [r4, #4]
 800b74a:	e7ac      	b.n	800b6a6 <_malloc_r+0x36>
 800b74c:	4634      	mov	r4, r6
 800b74e:	6876      	ldr	r6, [r6, #4]
 800b750:	e7b4      	b.n	800b6bc <_malloc_r+0x4c>
 800b752:	4613      	mov	r3, r2
 800b754:	e7cc      	b.n	800b6f0 <_malloc_r+0x80>
 800b756:	230c      	movs	r3, #12
 800b758:	4638      	mov	r0, r7
 800b75a:	603b      	str	r3, [r7, #0]
 800b75c:	f000 f80e 	bl	800b77c <__malloc_unlock>
 800b760:	e797      	b.n	800b692 <_malloc_r+0x22>
 800b762:	6025      	str	r5, [r4, #0]
 800b764:	e7dc      	b.n	800b720 <_malloc_r+0xb0>
 800b766:	605b      	str	r3, [r3, #4]
 800b768:	deff      	udf	#255	; 0xff
 800b76a:	bf00      	nop
 800b76c:	20001e8c 	.word	0x20001e8c

0800b770 <__malloc_lock>:
 800b770:	4801      	ldr	r0, [pc, #4]	; (800b778 <__malloc_lock+0x8>)
 800b772:	f7ff b87c 	b.w	800a86e <__retarget_lock_acquire_recursive>
 800b776:	bf00      	nop
 800b778:	20001e88 	.word	0x20001e88

0800b77c <__malloc_unlock>:
 800b77c:	4801      	ldr	r0, [pc, #4]	; (800b784 <__malloc_unlock+0x8>)
 800b77e:	f7ff b877 	b.w	800a870 <__retarget_lock_release_recursive>
 800b782:	bf00      	nop
 800b784:	20001e88 	.word	0x20001e88

0800b788 <_Balloc>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	69c6      	ldr	r6, [r0, #28]
 800b78c:	4604      	mov	r4, r0
 800b78e:	460d      	mov	r5, r1
 800b790:	b976      	cbnz	r6, 800b7b0 <_Balloc+0x28>
 800b792:	2010      	movs	r0, #16
 800b794:	f7ff ff44 	bl	800b620 <malloc>
 800b798:	4602      	mov	r2, r0
 800b79a:	61e0      	str	r0, [r4, #28]
 800b79c:	b920      	cbnz	r0, 800b7a8 <_Balloc+0x20>
 800b79e:	216b      	movs	r1, #107	; 0x6b
 800b7a0:	4b17      	ldr	r3, [pc, #92]	; (800b800 <_Balloc+0x78>)
 800b7a2:	4818      	ldr	r0, [pc, #96]	; (800b804 <_Balloc+0x7c>)
 800b7a4:	f001 ff34 	bl	800d610 <__assert_func>
 800b7a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7ac:	6006      	str	r6, [r0, #0]
 800b7ae:	60c6      	str	r6, [r0, #12]
 800b7b0:	69e6      	ldr	r6, [r4, #28]
 800b7b2:	68f3      	ldr	r3, [r6, #12]
 800b7b4:	b183      	cbz	r3, 800b7d8 <_Balloc+0x50>
 800b7b6:	69e3      	ldr	r3, [r4, #28]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7be:	b9b8      	cbnz	r0, 800b7f0 <_Balloc+0x68>
 800b7c0:	2101      	movs	r1, #1
 800b7c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b7c6:	1d72      	adds	r2, r6, #5
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	0092      	lsls	r2, r2, #2
 800b7cc:	f001 ff3e 	bl	800d64c <_calloc_r>
 800b7d0:	b160      	cbz	r0, 800b7ec <_Balloc+0x64>
 800b7d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7d6:	e00e      	b.n	800b7f6 <_Balloc+0x6e>
 800b7d8:	2221      	movs	r2, #33	; 0x21
 800b7da:	2104      	movs	r1, #4
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f001 ff35 	bl	800d64c <_calloc_r>
 800b7e2:	69e3      	ldr	r3, [r4, #28]
 800b7e4:	60f0      	str	r0, [r6, #12]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1e4      	bne.n	800b7b6 <_Balloc+0x2e>
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	6802      	ldr	r2, [r0, #0]
 800b7f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7fc:	e7f7      	b.n	800b7ee <_Balloc+0x66>
 800b7fe:	bf00      	nop
 800b800:	0800e0d0 	.word	0x0800e0d0
 800b804:	0800e150 	.word	0x0800e150

0800b808 <_Bfree>:
 800b808:	b570      	push	{r4, r5, r6, lr}
 800b80a:	69c6      	ldr	r6, [r0, #28]
 800b80c:	4605      	mov	r5, r0
 800b80e:	460c      	mov	r4, r1
 800b810:	b976      	cbnz	r6, 800b830 <_Bfree+0x28>
 800b812:	2010      	movs	r0, #16
 800b814:	f7ff ff04 	bl	800b620 <malloc>
 800b818:	4602      	mov	r2, r0
 800b81a:	61e8      	str	r0, [r5, #28]
 800b81c:	b920      	cbnz	r0, 800b828 <_Bfree+0x20>
 800b81e:	218f      	movs	r1, #143	; 0x8f
 800b820:	4b08      	ldr	r3, [pc, #32]	; (800b844 <_Bfree+0x3c>)
 800b822:	4809      	ldr	r0, [pc, #36]	; (800b848 <_Bfree+0x40>)
 800b824:	f001 fef4 	bl	800d610 <__assert_func>
 800b828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b82c:	6006      	str	r6, [r0, #0]
 800b82e:	60c6      	str	r6, [r0, #12]
 800b830:	b13c      	cbz	r4, 800b842 <_Bfree+0x3a>
 800b832:	69eb      	ldr	r3, [r5, #28]
 800b834:	6862      	ldr	r2, [r4, #4]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b83c:	6021      	str	r1, [r4, #0]
 800b83e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b842:	bd70      	pop	{r4, r5, r6, pc}
 800b844:	0800e0d0 	.word	0x0800e0d0
 800b848:	0800e150 	.word	0x0800e150

0800b84c <__multadd>:
 800b84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b850:	4607      	mov	r7, r0
 800b852:	460c      	mov	r4, r1
 800b854:	461e      	mov	r6, r3
 800b856:	2000      	movs	r0, #0
 800b858:	690d      	ldr	r5, [r1, #16]
 800b85a:	f101 0c14 	add.w	ip, r1, #20
 800b85e:	f8dc 3000 	ldr.w	r3, [ip]
 800b862:	3001      	adds	r0, #1
 800b864:	b299      	uxth	r1, r3
 800b866:	fb02 6101 	mla	r1, r2, r1, r6
 800b86a:	0c1e      	lsrs	r6, r3, #16
 800b86c:	0c0b      	lsrs	r3, r1, #16
 800b86e:	fb02 3306 	mla	r3, r2, r6, r3
 800b872:	b289      	uxth	r1, r1
 800b874:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b878:	4285      	cmp	r5, r0
 800b87a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b87e:	f84c 1b04 	str.w	r1, [ip], #4
 800b882:	dcec      	bgt.n	800b85e <__multadd+0x12>
 800b884:	b30e      	cbz	r6, 800b8ca <__multadd+0x7e>
 800b886:	68a3      	ldr	r3, [r4, #8]
 800b888:	42ab      	cmp	r3, r5
 800b88a:	dc19      	bgt.n	800b8c0 <__multadd+0x74>
 800b88c:	6861      	ldr	r1, [r4, #4]
 800b88e:	4638      	mov	r0, r7
 800b890:	3101      	adds	r1, #1
 800b892:	f7ff ff79 	bl	800b788 <_Balloc>
 800b896:	4680      	mov	r8, r0
 800b898:	b928      	cbnz	r0, 800b8a6 <__multadd+0x5a>
 800b89a:	4602      	mov	r2, r0
 800b89c:	21ba      	movs	r1, #186	; 0xba
 800b89e:	4b0c      	ldr	r3, [pc, #48]	; (800b8d0 <__multadd+0x84>)
 800b8a0:	480c      	ldr	r0, [pc, #48]	; (800b8d4 <__multadd+0x88>)
 800b8a2:	f001 feb5 	bl	800d610 <__assert_func>
 800b8a6:	6922      	ldr	r2, [r4, #16]
 800b8a8:	f104 010c 	add.w	r1, r4, #12
 800b8ac:	3202      	adds	r2, #2
 800b8ae:	0092      	lsls	r2, r2, #2
 800b8b0:	300c      	adds	r0, #12
 800b8b2:	f7fe ffec 	bl	800a88e <memcpy>
 800b8b6:	4621      	mov	r1, r4
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f7ff ffa5 	bl	800b808 <_Bfree>
 800b8be:	4644      	mov	r4, r8
 800b8c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8c4:	3501      	adds	r5, #1
 800b8c6:	615e      	str	r6, [r3, #20]
 800b8c8:	6125      	str	r5, [r4, #16]
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d0:	0800e13f 	.word	0x0800e13f
 800b8d4:	0800e150 	.word	0x0800e150

0800b8d8 <__s2b>:
 800b8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8dc:	4615      	mov	r5, r2
 800b8de:	2209      	movs	r2, #9
 800b8e0:	461f      	mov	r7, r3
 800b8e2:	3308      	adds	r3, #8
 800b8e4:	460c      	mov	r4, r1
 800b8e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	db09      	blt.n	800b908 <__s2b+0x30>
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7ff ff47 	bl	800b788 <_Balloc>
 800b8fa:	b940      	cbnz	r0, 800b90e <__s2b+0x36>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	21d3      	movs	r1, #211	; 0xd3
 800b900:	4b18      	ldr	r3, [pc, #96]	; (800b964 <__s2b+0x8c>)
 800b902:	4819      	ldr	r0, [pc, #100]	; (800b968 <__s2b+0x90>)
 800b904:	f001 fe84 	bl	800d610 <__assert_func>
 800b908:	0052      	lsls	r2, r2, #1
 800b90a:	3101      	adds	r1, #1
 800b90c:	e7f0      	b.n	800b8f0 <__s2b+0x18>
 800b90e:	9b08      	ldr	r3, [sp, #32]
 800b910:	2d09      	cmp	r5, #9
 800b912:	6143      	str	r3, [r0, #20]
 800b914:	f04f 0301 	mov.w	r3, #1
 800b918:	6103      	str	r3, [r0, #16]
 800b91a:	dd16      	ble.n	800b94a <__s2b+0x72>
 800b91c:	f104 0909 	add.w	r9, r4, #9
 800b920:	46c8      	mov	r8, r9
 800b922:	442c      	add	r4, r5
 800b924:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b928:	4601      	mov	r1, r0
 800b92a:	220a      	movs	r2, #10
 800b92c:	4630      	mov	r0, r6
 800b92e:	3b30      	subs	r3, #48	; 0x30
 800b930:	f7ff ff8c 	bl	800b84c <__multadd>
 800b934:	45a0      	cmp	r8, r4
 800b936:	d1f5      	bne.n	800b924 <__s2b+0x4c>
 800b938:	f1a5 0408 	sub.w	r4, r5, #8
 800b93c:	444c      	add	r4, r9
 800b93e:	1b2d      	subs	r5, r5, r4
 800b940:	1963      	adds	r3, r4, r5
 800b942:	42bb      	cmp	r3, r7
 800b944:	db04      	blt.n	800b950 <__s2b+0x78>
 800b946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b94a:	2509      	movs	r5, #9
 800b94c:	340a      	adds	r4, #10
 800b94e:	e7f6      	b.n	800b93e <__s2b+0x66>
 800b950:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b954:	4601      	mov	r1, r0
 800b956:	220a      	movs	r2, #10
 800b958:	4630      	mov	r0, r6
 800b95a:	3b30      	subs	r3, #48	; 0x30
 800b95c:	f7ff ff76 	bl	800b84c <__multadd>
 800b960:	e7ee      	b.n	800b940 <__s2b+0x68>
 800b962:	bf00      	nop
 800b964:	0800e13f 	.word	0x0800e13f
 800b968:	0800e150 	.word	0x0800e150

0800b96c <__hi0bits>:
 800b96c:	0c02      	lsrs	r2, r0, #16
 800b96e:	0412      	lsls	r2, r2, #16
 800b970:	4603      	mov	r3, r0
 800b972:	b9ca      	cbnz	r2, 800b9a8 <__hi0bits+0x3c>
 800b974:	0403      	lsls	r3, r0, #16
 800b976:	2010      	movs	r0, #16
 800b978:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b97c:	bf04      	itt	eq
 800b97e:	021b      	lsleq	r3, r3, #8
 800b980:	3008      	addeq	r0, #8
 800b982:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b986:	bf04      	itt	eq
 800b988:	011b      	lsleq	r3, r3, #4
 800b98a:	3004      	addeq	r0, #4
 800b98c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b990:	bf04      	itt	eq
 800b992:	009b      	lsleq	r3, r3, #2
 800b994:	3002      	addeq	r0, #2
 800b996:	2b00      	cmp	r3, #0
 800b998:	db05      	blt.n	800b9a6 <__hi0bits+0x3a>
 800b99a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b99e:	f100 0001 	add.w	r0, r0, #1
 800b9a2:	bf08      	it	eq
 800b9a4:	2020      	moveq	r0, #32
 800b9a6:	4770      	bx	lr
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	e7e5      	b.n	800b978 <__hi0bits+0xc>

0800b9ac <__lo0bits>:
 800b9ac:	6803      	ldr	r3, [r0, #0]
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	f013 0007 	ands.w	r0, r3, #7
 800b9b4:	d00b      	beq.n	800b9ce <__lo0bits+0x22>
 800b9b6:	07d9      	lsls	r1, r3, #31
 800b9b8:	d421      	bmi.n	800b9fe <__lo0bits+0x52>
 800b9ba:	0798      	lsls	r0, r3, #30
 800b9bc:	bf49      	itett	mi
 800b9be:	085b      	lsrmi	r3, r3, #1
 800b9c0:	089b      	lsrpl	r3, r3, #2
 800b9c2:	2001      	movmi	r0, #1
 800b9c4:	6013      	strmi	r3, [r2, #0]
 800b9c6:	bf5c      	itt	pl
 800b9c8:	2002      	movpl	r0, #2
 800b9ca:	6013      	strpl	r3, [r2, #0]
 800b9cc:	4770      	bx	lr
 800b9ce:	b299      	uxth	r1, r3
 800b9d0:	b909      	cbnz	r1, 800b9d6 <__lo0bits+0x2a>
 800b9d2:	2010      	movs	r0, #16
 800b9d4:	0c1b      	lsrs	r3, r3, #16
 800b9d6:	b2d9      	uxtb	r1, r3
 800b9d8:	b909      	cbnz	r1, 800b9de <__lo0bits+0x32>
 800b9da:	3008      	adds	r0, #8
 800b9dc:	0a1b      	lsrs	r3, r3, #8
 800b9de:	0719      	lsls	r1, r3, #28
 800b9e0:	bf04      	itt	eq
 800b9e2:	091b      	lsreq	r3, r3, #4
 800b9e4:	3004      	addeq	r0, #4
 800b9e6:	0799      	lsls	r1, r3, #30
 800b9e8:	bf04      	itt	eq
 800b9ea:	089b      	lsreq	r3, r3, #2
 800b9ec:	3002      	addeq	r0, #2
 800b9ee:	07d9      	lsls	r1, r3, #31
 800b9f0:	d403      	bmi.n	800b9fa <__lo0bits+0x4e>
 800b9f2:	085b      	lsrs	r3, r3, #1
 800b9f4:	f100 0001 	add.w	r0, r0, #1
 800b9f8:	d003      	beq.n	800ba02 <__lo0bits+0x56>
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	4770      	bx	lr
 800b9fe:	2000      	movs	r0, #0
 800ba00:	4770      	bx	lr
 800ba02:	2020      	movs	r0, #32
 800ba04:	4770      	bx	lr
	...

0800ba08 <__i2b>:
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	2101      	movs	r1, #1
 800ba0e:	f7ff febb 	bl	800b788 <_Balloc>
 800ba12:	4602      	mov	r2, r0
 800ba14:	b928      	cbnz	r0, 800ba22 <__i2b+0x1a>
 800ba16:	f240 1145 	movw	r1, #325	; 0x145
 800ba1a:	4b04      	ldr	r3, [pc, #16]	; (800ba2c <__i2b+0x24>)
 800ba1c:	4804      	ldr	r0, [pc, #16]	; (800ba30 <__i2b+0x28>)
 800ba1e:	f001 fdf7 	bl	800d610 <__assert_func>
 800ba22:	2301      	movs	r3, #1
 800ba24:	6144      	str	r4, [r0, #20]
 800ba26:	6103      	str	r3, [r0, #16]
 800ba28:	bd10      	pop	{r4, pc}
 800ba2a:	bf00      	nop
 800ba2c:	0800e13f 	.word	0x0800e13f
 800ba30:	0800e150 	.word	0x0800e150

0800ba34 <__multiply>:
 800ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	4691      	mov	r9, r2
 800ba3a:	690a      	ldr	r2, [r1, #16]
 800ba3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba40:	460c      	mov	r4, r1
 800ba42:	429a      	cmp	r2, r3
 800ba44:	bfbe      	ittt	lt
 800ba46:	460b      	movlt	r3, r1
 800ba48:	464c      	movlt	r4, r9
 800ba4a:	4699      	movlt	r9, r3
 800ba4c:	6927      	ldr	r7, [r4, #16]
 800ba4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba52:	68a3      	ldr	r3, [r4, #8]
 800ba54:	6861      	ldr	r1, [r4, #4]
 800ba56:	eb07 060a 	add.w	r6, r7, sl
 800ba5a:	42b3      	cmp	r3, r6
 800ba5c:	b085      	sub	sp, #20
 800ba5e:	bfb8      	it	lt
 800ba60:	3101      	addlt	r1, #1
 800ba62:	f7ff fe91 	bl	800b788 <_Balloc>
 800ba66:	b930      	cbnz	r0, 800ba76 <__multiply+0x42>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ba6e:	4b43      	ldr	r3, [pc, #268]	; (800bb7c <__multiply+0x148>)
 800ba70:	4843      	ldr	r0, [pc, #268]	; (800bb80 <__multiply+0x14c>)
 800ba72:	f001 fdcd 	bl	800d610 <__assert_func>
 800ba76:	f100 0514 	add.w	r5, r0, #20
 800ba7a:	462b      	mov	r3, r5
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba82:	4543      	cmp	r3, r8
 800ba84:	d321      	bcc.n	800baca <__multiply+0x96>
 800ba86:	f104 0314 	add.w	r3, r4, #20
 800ba8a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba8e:	f109 0314 	add.w	r3, r9, #20
 800ba92:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba96:	9202      	str	r2, [sp, #8]
 800ba98:	1b3a      	subs	r2, r7, r4
 800ba9a:	3a15      	subs	r2, #21
 800ba9c:	f022 0203 	bic.w	r2, r2, #3
 800baa0:	3204      	adds	r2, #4
 800baa2:	f104 0115 	add.w	r1, r4, #21
 800baa6:	428f      	cmp	r7, r1
 800baa8:	bf38      	it	cc
 800baaa:	2204      	movcc	r2, #4
 800baac:	9201      	str	r2, [sp, #4]
 800baae:	9a02      	ldr	r2, [sp, #8]
 800bab0:	9303      	str	r3, [sp, #12]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d80c      	bhi.n	800bad0 <__multiply+0x9c>
 800bab6:	2e00      	cmp	r6, #0
 800bab8:	dd03      	ble.n	800bac2 <__multiply+0x8e>
 800baba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d05a      	beq.n	800bb78 <__multiply+0x144>
 800bac2:	6106      	str	r6, [r0, #16]
 800bac4:	b005      	add	sp, #20
 800bac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baca:	f843 2b04 	str.w	r2, [r3], #4
 800bace:	e7d8      	b.n	800ba82 <__multiply+0x4e>
 800bad0:	f8b3 a000 	ldrh.w	sl, [r3]
 800bad4:	f1ba 0f00 	cmp.w	sl, #0
 800bad8:	d023      	beq.n	800bb22 <__multiply+0xee>
 800bada:	46a9      	mov	r9, r5
 800badc:	f04f 0c00 	mov.w	ip, #0
 800bae0:	f104 0e14 	add.w	lr, r4, #20
 800bae4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bae8:	f8d9 1000 	ldr.w	r1, [r9]
 800baec:	fa1f fb82 	uxth.w	fp, r2
 800baf0:	b289      	uxth	r1, r1
 800baf2:	fb0a 110b 	mla	r1, sl, fp, r1
 800baf6:	4461      	add	r1, ip
 800baf8:	f8d9 c000 	ldr.w	ip, [r9]
 800bafc:	0c12      	lsrs	r2, r2, #16
 800bafe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bb02:	fb0a c202 	mla	r2, sl, r2, ip
 800bb06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb0a:	b289      	uxth	r1, r1
 800bb0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb10:	4577      	cmp	r7, lr
 800bb12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb16:	f849 1b04 	str.w	r1, [r9], #4
 800bb1a:	d8e3      	bhi.n	800bae4 <__multiply+0xb0>
 800bb1c:	9a01      	ldr	r2, [sp, #4]
 800bb1e:	f845 c002 	str.w	ip, [r5, r2]
 800bb22:	9a03      	ldr	r2, [sp, #12]
 800bb24:	3304      	adds	r3, #4
 800bb26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb2a:	f1b9 0f00 	cmp.w	r9, #0
 800bb2e:	d021      	beq.n	800bb74 <__multiply+0x140>
 800bb30:	46ae      	mov	lr, r5
 800bb32:	f04f 0a00 	mov.w	sl, #0
 800bb36:	6829      	ldr	r1, [r5, #0]
 800bb38:	f104 0c14 	add.w	ip, r4, #20
 800bb3c:	f8bc b000 	ldrh.w	fp, [ip]
 800bb40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb44:	b289      	uxth	r1, r1
 800bb46:	fb09 220b 	mla	r2, r9, fp, r2
 800bb4a:	4452      	add	r2, sl
 800bb4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb50:	f84e 1b04 	str.w	r1, [lr], #4
 800bb54:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bb58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb5c:	f8be 1000 	ldrh.w	r1, [lr]
 800bb60:	4567      	cmp	r7, ip
 800bb62:	fb09 110a 	mla	r1, r9, sl, r1
 800bb66:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bb6a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb6e:	d8e5      	bhi.n	800bb3c <__multiply+0x108>
 800bb70:	9a01      	ldr	r2, [sp, #4]
 800bb72:	50a9      	str	r1, [r5, r2]
 800bb74:	3504      	adds	r5, #4
 800bb76:	e79a      	b.n	800baae <__multiply+0x7a>
 800bb78:	3e01      	subs	r6, #1
 800bb7a:	e79c      	b.n	800bab6 <__multiply+0x82>
 800bb7c:	0800e13f 	.word	0x0800e13f
 800bb80:	0800e150 	.word	0x0800e150

0800bb84 <__pow5mult>:
 800bb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb88:	4615      	mov	r5, r2
 800bb8a:	f012 0203 	ands.w	r2, r2, #3
 800bb8e:	4606      	mov	r6, r0
 800bb90:	460f      	mov	r7, r1
 800bb92:	d007      	beq.n	800bba4 <__pow5mult+0x20>
 800bb94:	4c25      	ldr	r4, [pc, #148]	; (800bc2c <__pow5mult+0xa8>)
 800bb96:	3a01      	subs	r2, #1
 800bb98:	2300      	movs	r3, #0
 800bb9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb9e:	f7ff fe55 	bl	800b84c <__multadd>
 800bba2:	4607      	mov	r7, r0
 800bba4:	10ad      	asrs	r5, r5, #2
 800bba6:	d03d      	beq.n	800bc24 <__pow5mult+0xa0>
 800bba8:	69f4      	ldr	r4, [r6, #28]
 800bbaa:	b97c      	cbnz	r4, 800bbcc <__pow5mult+0x48>
 800bbac:	2010      	movs	r0, #16
 800bbae:	f7ff fd37 	bl	800b620 <malloc>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	61f0      	str	r0, [r6, #28]
 800bbb6:	b928      	cbnz	r0, 800bbc4 <__pow5mult+0x40>
 800bbb8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bbbc:	4b1c      	ldr	r3, [pc, #112]	; (800bc30 <__pow5mult+0xac>)
 800bbbe:	481d      	ldr	r0, [pc, #116]	; (800bc34 <__pow5mult+0xb0>)
 800bbc0:	f001 fd26 	bl	800d610 <__assert_func>
 800bbc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbc8:	6004      	str	r4, [r0, #0]
 800bbca:	60c4      	str	r4, [r0, #12]
 800bbcc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bbd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbd4:	b94c      	cbnz	r4, 800bbea <__pow5mult+0x66>
 800bbd6:	f240 2171 	movw	r1, #625	; 0x271
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f7ff ff14 	bl	800ba08 <__i2b>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbe8:	6003      	str	r3, [r0, #0]
 800bbea:	f04f 0900 	mov.w	r9, #0
 800bbee:	07eb      	lsls	r3, r5, #31
 800bbf0:	d50a      	bpl.n	800bc08 <__pow5mult+0x84>
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	f7ff ff1c 	bl	800ba34 <__multiply>
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	4639      	mov	r1, r7
 800bc00:	4630      	mov	r0, r6
 800bc02:	f7ff fe01 	bl	800b808 <_Bfree>
 800bc06:	4647      	mov	r7, r8
 800bc08:	106d      	asrs	r5, r5, #1
 800bc0a:	d00b      	beq.n	800bc24 <__pow5mult+0xa0>
 800bc0c:	6820      	ldr	r0, [r4, #0]
 800bc0e:	b938      	cbnz	r0, 800bc20 <__pow5mult+0x9c>
 800bc10:	4622      	mov	r2, r4
 800bc12:	4621      	mov	r1, r4
 800bc14:	4630      	mov	r0, r6
 800bc16:	f7ff ff0d 	bl	800ba34 <__multiply>
 800bc1a:	6020      	str	r0, [r4, #0]
 800bc1c:	f8c0 9000 	str.w	r9, [r0]
 800bc20:	4604      	mov	r4, r0
 800bc22:	e7e4      	b.n	800bbee <__pow5mult+0x6a>
 800bc24:	4638      	mov	r0, r7
 800bc26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc2a:	bf00      	nop
 800bc2c:	0800e2a0 	.word	0x0800e2a0
 800bc30:	0800e0d0 	.word	0x0800e0d0
 800bc34:	0800e150 	.word	0x0800e150

0800bc38 <__lshift>:
 800bc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	4607      	mov	r7, r0
 800bc40:	4691      	mov	r9, r2
 800bc42:	6923      	ldr	r3, [r4, #16]
 800bc44:	6849      	ldr	r1, [r1, #4]
 800bc46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc4a:	68a3      	ldr	r3, [r4, #8]
 800bc4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc50:	f108 0601 	add.w	r6, r8, #1
 800bc54:	42b3      	cmp	r3, r6
 800bc56:	db0b      	blt.n	800bc70 <__lshift+0x38>
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7ff fd95 	bl	800b788 <_Balloc>
 800bc5e:	4605      	mov	r5, r0
 800bc60:	b948      	cbnz	r0, 800bc76 <__lshift+0x3e>
 800bc62:	4602      	mov	r2, r0
 800bc64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bc68:	4b27      	ldr	r3, [pc, #156]	; (800bd08 <__lshift+0xd0>)
 800bc6a:	4828      	ldr	r0, [pc, #160]	; (800bd0c <__lshift+0xd4>)
 800bc6c:	f001 fcd0 	bl	800d610 <__assert_func>
 800bc70:	3101      	adds	r1, #1
 800bc72:	005b      	lsls	r3, r3, #1
 800bc74:	e7ee      	b.n	800bc54 <__lshift+0x1c>
 800bc76:	2300      	movs	r3, #0
 800bc78:	f100 0114 	add.w	r1, r0, #20
 800bc7c:	f100 0210 	add.w	r2, r0, #16
 800bc80:	4618      	mov	r0, r3
 800bc82:	4553      	cmp	r3, sl
 800bc84:	db33      	blt.n	800bcee <__lshift+0xb6>
 800bc86:	6920      	ldr	r0, [r4, #16]
 800bc88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc8c:	f104 0314 	add.w	r3, r4, #20
 800bc90:	f019 091f 	ands.w	r9, r9, #31
 800bc94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc9c:	d02b      	beq.n	800bcf6 <__lshift+0xbe>
 800bc9e:	468a      	mov	sl, r1
 800bca0:	2200      	movs	r2, #0
 800bca2:	f1c9 0e20 	rsb	lr, r9, #32
 800bca6:	6818      	ldr	r0, [r3, #0]
 800bca8:	fa00 f009 	lsl.w	r0, r0, r9
 800bcac:	4310      	orrs	r0, r2
 800bcae:	f84a 0b04 	str.w	r0, [sl], #4
 800bcb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcb6:	459c      	cmp	ip, r3
 800bcb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bcbc:	d8f3      	bhi.n	800bca6 <__lshift+0x6e>
 800bcbe:	ebac 0304 	sub.w	r3, ip, r4
 800bcc2:	3b15      	subs	r3, #21
 800bcc4:	f023 0303 	bic.w	r3, r3, #3
 800bcc8:	3304      	adds	r3, #4
 800bcca:	f104 0015 	add.w	r0, r4, #21
 800bcce:	4584      	cmp	ip, r0
 800bcd0:	bf38      	it	cc
 800bcd2:	2304      	movcc	r3, #4
 800bcd4:	50ca      	str	r2, [r1, r3]
 800bcd6:	b10a      	cbz	r2, 800bcdc <__lshift+0xa4>
 800bcd8:	f108 0602 	add.w	r6, r8, #2
 800bcdc:	3e01      	subs	r6, #1
 800bcde:	4638      	mov	r0, r7
 800bce0:	4621      	mov	r1, r4
 800bce2:	612e      	str	r6, [r5, #16]
 800bce4:	f7ff fd90 	bl	800b808 <_Bfree>
 800bce8:	4628      	mov	r0, r5
 800bcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcee:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	e7c5      	b.n	800bc82 <__lshift+0x4a>
 800bcf6:	3904      	subs	r1, #4
 800bcf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcfc:	459c      	cmp	ip, r3
 800bcfe:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd02:	d8f9      	bhi.n	800bcf8 <__lshift+0xc0>
 800bd04:	e7ea      	b.n	800bcdc <__lshift+0xa4>
 800bd06:	bf00      	nop
 800bd08:	0800e13f 	.word	0x0800e13f
 800bd0c:	0800e150 	.word	0x0800e150

0800bd10 <__mcmp>:
 800bd10:	4603      	mov	r3, r0
 800bd12:	690a      	ldr	r2, [r1, #16]
 800bd14:	6900      	ldr	r0, [r0, #16]
 800bd16:	b530      	push	{r4, r5, lr}
 800bd18:	1a80      	subs	r0, r0, r2
 800bd1a:	d10d      	bne.n	800bd38 <__mcmp+0x28>
 800bd1c:	3314      	adds	r3, #20
 800bd1e:	3114      	adds	r1, #20
 800bd20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd30:	4295      	cmp	r5, r2
 800bd32:	d002      	beq.n	800bd3a <__mcmp+0x2a>
 800bd34:	d304      	bcc.n	800bd40 <__mcmp+0x30>
 800bd36:	2001      	movs	r0, #1
 800bd38:	bd30      	pop	{r4, r5, pc}
 800bd3a:	42a3      	cmp	r3, r4
 800bd3c:	d3f4      	bcc.n	800bd28 <__mcmp+0x18>
 800bd3e:	e7fb      	b.n	800bd38 <__mcmp+0x28>
 800bd40:	f04f 30ff 	mov.w	r0, #4294967295
 800bd44:	e7f8      	b.n	800bd38 <__mcmp+0x28>
	...

0800bd48 <__mdiff>:
 800bd48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	460d      	mov	r5, r1
 800bd4e:	4607      	mov	r7, r0
 800bd50:	4611      	mov	r1, r2
 800bd52:	4628      	mov	r0, r5
 800bd54:	4614      	mov	r4, r2
 800bd56:	f7ff ffdb 	bl	800bd10 <__mcmp>
 800bd5a:	1e06      	subs	r6, r0, #0
 800bd5c:	d111      	bne.n	800bd82 <__mdiff+0x3a>
 800bd5e:	4631      	mov	r1, r6
 800bd60:	4638      	mov	r0, r7
 800bd62:	f7ff fd11 	bl	800b788 <_Balloc>
 800bd66:	4602      	mov	r2, r0
 800bd68:	b928      	cbnz	r0, 800bd76 <__mdiff+0x2e>
 800bd6a:	f240 2137 	movw	r1, #567	; 0x237
 800bd6e:	4b3a      	ldr	r3, [pc, #232]	; (800be58 <__mdiff+0x110>)
 800bd70:	483a      	ldr	r0, [pc, #232]	; (800be5c <__mdiff+0x114>)
 800bd72:	f001 fc4d 	bl	800d610 <__assert_func>
 800bd76:	2301      	movs	r3, #1
 800bd78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd82:	bfa4      	itt	ge
 800bd84:	4623      	movge	r3, r4
 800bd86:	462c      	movge	r4, r5
 800bd88:	4638      	mov	r0, r7
 800bd8a:	6861      	ldr	r1, [r4, #4]
 800bd8c:	bfa6      	itte	ge
 800bd8e:	461d      	movge	r5, r3
 800bd90:	2600      	movge	r6, #0
 800bd92:	2601      	movlt	r6, #1
 800bd94:	f7ff fcf8 	bl	800b788 <_Balloc>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	b918      	cbnz	r0, 800bda4 <__mdiff+0x5c>
 800bd9c:	f240 2145 	movw	r1, #581	; 0x245
 800bda0:	4b2d      	ldr	r3, [pc, #180]	; (800be58 <__mdiff+0x110>)
 800bda2:	e7e5      	b.n	800bd70 <__mdiff+0x28>
 800bda4:	f102 0814 	add.w	r8, r2, #20
 800bda8:	46c2      	mov	sl, r8
 800bdaa:	f04f 0c00 	mov.w	ip, #0
 800bdae:	6927      	ldr	r7, [r4, #16]
 800bdb0:	60c6      	str	r6, [r0, #12]
 800bdb2:	692e      	ldr	r6, [r5, #16]
 800bdb4:	f104 0014 	add.w	r0, r4, #20
 800bdb8:	f105 0914 	add.w	r9, r5, #20
 800bdbc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800bdc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bdc4:	3410      	adds	r4, #16
 800bdc6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800bdca:	f859 3b04 	ldr.w	r3, [r9], #4
 800bdce:	fa1f f18b 	uxth.w	r1, fp
 800bdd2:	4461      	add	r1, ip
 800bdd4:	fa1f fc83 	uxth.w	ip, r3
 800bdd8:	0c1b      	lsrs	r3, r3, #16
 800bdda:	eba1 010c 	sub.w	r1, r1, ip
 800bdde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bde2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bde6:	b289      	uxth	r1, r1
 800bde8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bdec:	454e      	cmp	r6, r9
 800bdee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bdf2:	f84a 1b04 	str.w	r1, [sl], #4
 800bdf6:	d8e6      	bhi.n	800bdc6 <__mdiff+0x7e>
 800bdf8:	1b73      	subs	r3, r6, r5
 800bdfa:	3b15      	subs	r3, #21
 800bdfc:	f023 0303 	bic.w	r3, r3, #3
 800be00:	3515      	adds	r5, #21
 800be02:	3304      	adds	r3, #4
 800be04:	42ae      	cmp	r6, r5
 800be06:	bf38      	it	cc
 800be08:	2304      	movcc	r3, #4
 800be0a:	4418      	add	r0, r3
 800be0c:	4443      	add	r3, r8
 800be0e:	461e      	mov	r6, r3
 800be10:	4605      	mov	r5, r0
 800be12:	4575      	cmp	r5, lr
 800be14:	d30e      	bcc.n	800be34 <__mdiff+0xec>
 800be16:	f10e 0103 	add.w	r1, lr, #3
 800be1a:	1a09      	subs	r1, r1, r0
 800be1c:	f021 0103 	bic.w	r1, r1, #3
 800be20:	3803      	subs	r0, #3
 800be22:	4586      	cmp	lr, r0
 800be24:	bf38      	it	cc
 800be26:	2100      	movcc	r1, #0
 800be28:	440b      	add	r3, r1
 800be2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be2e:	b189      	cbz	r1, 800be54 <__mdiff+0x10c>
 800be30:	6117      	str	r7, [r2, #16]
 800be32:	e7a3      	b.n	800bd7c <__mdiff+0x34>
 800be34:	f855 8b04 	ldr.w	r8, [r5], #4
 800be38:	fa1f f188 	uxth.w	r1, r8
 800be3c:	4461      	add	r1, ip
 800be3e:	140c      	asrs	r4, r1, #16
 800be40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be44:	b289      	uxth	r1, r1
 800be46:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800be4a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800be4e:	f846 1b04 	str.w	r1, [r6], #4
 800be52:	e7de      	b.n	800be12 <__mdiff+0xca>
 800be54:	3f01      	subs	r7, #1
 800be56:	e7e8      	b.n	800be2a <__mdiff+0xe2>
 800be58:	0800e13f 	.word	0x0800e13f
 800be5c:	0800e150 	.word	0x0800e150

0800be60 <__ulp>:
 800be60:	4b0e      	ldr	r3, [pc, #56]	; (800be9c <__ulp+0x3c>)
 800be62:	400b      	ands	r3, r1
 800be64:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800be68:	2b00      	cmp	r3, #0
 800be6a:	dc08      	bgt.n	800be7e <__ulp+0x1e>
 800be6c:	425b      	negs	r3, r3
 800be6e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800be72:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be76:	da04      	bge.n	800be82 <__ulp+0x22>
 800be78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be7c:	4113      	asrs	r3, r2
 800be7e:	2200      	movs	r2, #0
 800be80:	e008      	b.n	800be94 <__ulp+0x34>
 800be82:	f1a2 0314 	sub.w	r3, r2, #20
 800be86:	2b1e      	cmp	r3, #30
 800be88:	bfd6      	itet	le
 800be8a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800be8e:	2201      	movgt	r2, #1
 800be90:	40da      	lsrle	r2, r3
 800be92:	2300      	movs	r3, #0
 800be94:	4619      	mov	r1, r3
 800be96:	4610      	mov	r0, r2
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	7ff00000 	.word	0x7ff00000

0800bea0 <__b2d>:
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	6905      	ldr	r5, [r0, #16]
 800bea4:	f100 0714 	add.w	r7, r0, #20
 800bea8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800beac:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800beb0:	1f2e      	subs	r6, r5, #4
 800beb2:	4620      	mov	r0, r4
 800beb4:	f7ff fd5a 	bl	800b96c <__hi0bits>
 800beb8:	f1c0 0220 	rsb	r2, r0, #32
 800bebc:	280a      	cmp	r0, #10
 800bebe:	4603      	mov	r3, r0
 800bec0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800bf2c <__b2d+0x8c>
 800bec4:	600a      	str	r2, [r1, #0]
 800bec6:	dc12      	bgt.n	800beee <__b2d+0x4e>
 800bec8:	f1c0 0e0b 	rsb	lr, r0, #11
 800becc:	fa24 f20e 	lsr.w	r2, r4, lr
 800bed0:	42b7      	cmp	r7, r6
 800bed2:	ea42 010c 	orr.w	r1, r2, ip
 800bed6:	bf2c      	ite	cs
 800bed8:	2200      	movcs	r2, #0
 800beda:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800bede:	3315      	adds	r3, #21
 800bee0:	fa04 f303 	lsl.w	r3, r4, r3
 800bee4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bee8:	431a      	orrs	r2, r3
 800beea:	4610      	mov	r0, r2
 800beec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beee:	42b7      	cmp	r7, r6
 800bef0:	bf2e      	itee	cs
 800bef2:	2200      	movcs	r2, #0
 800bef4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800bef8:	f1a5 0608 	subcc.w	r6, r5, #8
 800befc:	3b0b      	subs	r3, #11
 800befe:	d012      	beq.n	800bf26 <__b2d+0x86>
 800bf00:	f1c3 0520 	rsb	r5, r3, #32
 800bf04:	fa22 f105 	lsr.w	r1, r2, r5
 800bf08:	409c      	lsls	r4, r3
 800bf0a:	430c      	orrs	r4, r1
 800bf0c:	42be      	cmp	r6, r7
 800bf0e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800bf12:	bf94      	ite	ls
 800bf14:	2400      	movls	r4, #0
 800bf16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bf1a:	409a      	lsls	r2, r3
 800bf1c:	40ec      	lsrs	r4, r5
 800bf1e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bf22:	4322      	orrs	r2, r4
 800bf24:	e7e1      	b.n	800beea <__b2d+0x4a>
 800bf26:	ea44 010c 	orr.w	r1, r4, ip
 800bf2a:	e7de      	b.n	800beea <__b2d+0x4a>
 800bf2c:	3ff00000 	.word	0x3ff00000

0800bf30 <__d2b>:
 800bf30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf32:	2101      	movs	r1, #1
 800bf34:	4617      	mov	r7, r2
 800bf36:	461c      	mov	r4, r3
 800bf38:	9e08      	ldr	r6, [sp, #32]
 800bf3a:	f7ff fc25 	bl	800b788 <_Balloc>
 800bf3e:	4605      	mov	r5, r0
 800bf40:	b930      	cbnz	r0, 800bf50 <__d2b+0x20>
 800bf42:	4602      	mov	r2, r0
 800bf44:	f240 310f 	movw	r1, #783	; 0x30f
 800bf48:	4b22      	ldr	r3, [pc, #136]	; (800bfd4 <__d2b+0xa4>)
 800bf4a:	4823      	ldr	r0, [pc, #140]	; (800bfd8 <__d2b+0xa8>)
 800bf4c:	f001 fb60 	bl	800d610 <__assert_func>
 800bf50:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bf54:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800bf58:	bb24      	cbnz	r4, 800bfa4 <__d2b+0x74>
 800bf5a:	2f00      	cmp	r7, #0
 800bf5c:	9301      	str	r3, [sp, #4]
 800bf5e:	d026      	beq.n	800bfae <__d2b+0x7e>
 800bf60:	4668      	mov	r0, sp
 800bf62:	9700      	str	r7, [sp, #0]
 800bf64:	f7ff fd22 	bl	800b9ac <__lo0bits>
 800bf68:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf6c:	b1e8      	cbz	r0, 800bfaa <__d2b+0x7a>
 800bf6e:	f1c0 0320 	rsb	r3, r0, #32
 800bf72:	fa02 f303 	lsl.w	r3, r2, r3
 800bf76:	430b      	orrs	r3, r1
 800bf78:	40c2      	lsrs	r2, r0
 800bf7a:	616b      	str	r3, [r5, #20]
 800bf7c:	9201      	str	r2, [sp, #4]
 800bf7e:	9b01      	ldr	r3, [sp, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	bf14      	ite	ne
 800bf84:	2102      	movne	r1, #2
 800bf86:	2101      	moveq	r1, #1
 800bf88:	61ab      	str	r3, [r5, #24]
 800bf8a:	6129      	str	r1, [r5, #16]
 800bf8c:	b1bc      	cbz	r4, 800bfbe <__d2b+0x8e>
 800bf8e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bf92:	4404      	add	r4, r0
 800bf94:	6034      	str	r4, [r6, #0]
 800bf96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf9c:	6018      	str	r0, [r3, #0]
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	b003      	add	sp, #12
 800bfa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfa8:	e7d7      	b.n	800bf5a <__d2b+0x2a>
 800bfaa:	6169      	str	r1, [r5, #20]
 800bfac:	e7e7      	b.n	800bf7e <__d2b+0x4e>
 800bfae:	a801      	add	r0, sp, #4
 800bfb0:	f7ff fcfc 	bl	800b9ac <__lo0bits>
 800bfb4:	9b01      	ldr	r3, [sp, #4]
 800bfb6:	2101      	movs	r1, #1
 800bfb8:	616b      	str	r3, [r5, #20]
 800bfba:	3020      	adds	r0, #32
 800bfbc:	e7e5      	b.n	800bf8a <__d2b+0x5a>
 800bfbe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bfc2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800bfc6:	6030      	str	r0, [r6, #0]
 800bfc8:	6918      	ldr	r0, [r3, #16]
 800bfca:	f7ff fccf 	bl	800b96c <__hi0bits>
 800bfce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bfd2:	e7e2      	b.n	800bf9a <__d2b+0x6a>
 800bfd4:	0800e13f 	.word	0x0800e13f
 800bfd8:	0800e150 	.word	0x0800e150

0800bfdc <__ratio>:
 800bfdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe0:	4688      	mov	r8, r1
 800bfe2:	4669      	mov	r1, sp
 800bfe4:	4681      	mov	r9, r0
 800bfe6:	f7ff ff5b 	bl	800bea0 <__b2d>
 800bfea:	460f      	mov	r7, r1
 800bfec:	4604      	mov	r4, r0
 800bfee:	460d      	mov	r5, r1
 800bff0:	4640      	mov	r0, r8
 800bff2:	a901      	add	r1, sp, #4
 800bff4:	f7ff ff54 	bl	800bea0 <__b2d>
 800bff8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bffc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c000:	468b      	mov	fp, r1
 800c002:	eba3 0c02 	sub.w	ip, r3, r2
 800c006:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c00a:	1a9b      	subs	r3, r3, r2
 800c00c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c010:	2b00      	cmp	r3, #0
 800c012:	bfd5      	itete	le
 800c014:	460a      	movle	r2, r1
 800c016:	462a      	movgt	r2, r5
 800c018:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c01c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c020:	bfd8      	it	le
 800c022:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c026:	465b      	mov	r3, fp
 800c028:	4602      	mov	r2, r0
 800c02a:	4639      	mov	r1, r7
 800c02c:	4620      	mov	r0, r4
 800c02e:	f7f4 fb7d 	bl	800072c <__aeabi_ddiv>
 800c032:	b003      	add	sp, #12
 800c034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c038 <__copybits>:
 800c038:	3901      	subs	r1, #1
 800c03a:	b570      	push	{r4, r5, r6, lr}
 800c03c:	1149      	asrs	r1, r1, #5
 800c03e:	6914      	ldr	r4, [r2, #16]
 800c040:	3101      	adds	r1, #1
 800c042:	f102 0314 	add.w	r3, r2, #20
 800c046:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c04a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c04e:	1f05      	subs	r5, r0, #4
 800c050:	42a3      	cmp	r3, r4
 800c052:	d30c      	bcc.n	800c06e <__copybits+0x36>
 800c054:	1aa3      	subs	r3, r4, r2
 800c056:	3b11      	subs	r3, #17
 800c058:	f023 0303 	bic.w	r3, r3, #3
 800c05c:	3211      	adds	r2, #17
 800c05e:	42a2      	cmp	r2, r4
 800c060:	bf88      	it	hi
 800c062:	2300      	movhi	r3, #0
 800c064:	4418      	add	r0, r3
 800c066:	2300      	movs	r3, #0
 800c068:	4288      	cmp	r0, r1
 800c06a:	d305      	bcc.n	800c078 <__copybits+0x40>
 800c06c:	bd70      	pop	{r4, r5, r6, pc}
 800c06e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c072:	f845 6f04 	str.w	r6, [r5, #4]!
 800c076:	e7eb      	b.n	800c050 <__copybits+0x18>
 800c078:	f840 3b04 	str.w	r3, [r0], #4
 800c07c:	e7f4      	b.n	800c068 <__copybits+0x30>

0800c07e <__any_on>:
 800c07e:	f100 0214 	add.w	r2, r0, #20
 800c082:	6900      	ldr	r0, [r0, #16]
 800c084:	114b      	asrs	r3, r1, #5
 800c086:	4298      	cmp	r0, r3
 800c088:	b510      	push	{r4, lr}
 800c08a:	db11      	blt.n	800c0b0 <__any_on+0x32>
 800c08c:	dd0a      	ble.n	800c0a4 <__any_on+0x26>
 800c08e:	f011 011f 	ands.w	r1, r1, #31
 800c092:	d007      	beq.n	800c0a4 <__any_on+0x26>
 800c094:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c098:	fa24 f001 	lsr.w	r0, r4, r1
 800c09c:	fa00 f101 	lsl.w	r1, r0, r1
 800c0a0:	428c      	cmp	r4, r1
 800c0a2:	d10b      	bne.n	800c0bc <__any_on+0x3e>
 800c0a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d803      	bhi.n	800c0b4 <__any_on+0x36>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	bd10      	pop	{r4, pc}
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	e7f7      	b.n	800c0a4 <__any_on+0x26>
 800c0b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0b8:	2900      	cmp	r1, #0
 800c0ba:	d0f5      	beq.n	800c0a8 <__any_on+0x2a>
 800c0bc:	2001      	movs	r0, #1
 800c0be:	e7f6      	b.n	800c0ae <__any_on+0x30>

0800c0c0 <sulp>:
 800c0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c4:	460f      	mov	r7, r1
 800c0c6:	4690      	mov	r8, r2
 800c0c8:	f7ff feca 	bl	800be60 <__ulp>
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	460d      	mov	r5, r1
 800c0d0:	f1b8 0f00 	cmp.w	r8, #0
 800c0d4:	d011      	beq.n	800c0fa <sulp+0x3a>
 800c0d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c0da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	dd0b      	ble.n	800c0fa <sulp+0x3a>
 800c0e2:	2400      	movs	r4, #0
 800c0e4:	051b      	lsls	r3, r3, #20
 800c0e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c0ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c0ee:	4622      	mov	r2, r4
 800c0f0:	462b      	mov	r3, r5
 800c0f2:	f7f4 f9f1 	bl	80004d8 <__aeabi_dmul>
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	460d      	mov	r5, r1
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c102:	0000      	movs	r0, r0
 800c104:	0000      	movs	r0, r0
	...

0800c108 <_strtod_l>:
 800c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10c:	b09f      	sub	sp, #124	; 0x7c
 800c10e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c110:	2200      	movs	r2, #0
 800c112:	4604      	mov	r4, r0
 800c114:	921a      	str	r2, [sp, #104]	; 0x68
 800c116:	460d      	mov	r5, r1
 800c118:	f04f 0800 	mov.w	r8, #0
 800c11c:	f04f 0900 	mov.w	r9, #0
 800c120:	460a      	mov	r2, r1
 800c122:	9219      	str	r2, [sp, #100]	; 0x64
 800c124:	7811      	ldrb	r1, [r2, #0]
 800c126:	292b      	cmp	r1, #43	; 0x2b
 800c128:	d04a      	beq.n	800c1c0 <_strtod_l+0xb8>
 800c12a:	d838      	bhi.n	800c19e <_strtod_l+0x96>
 800c12c:	290d      	cmp	r1, #13
 800c12e:	d832      	bhi.n	800c196 <_strtod_l+0x8e>
 800c130:	2908      	cmp	r1, #8
 800c132:	d832      	bhi.n	800c19a <_strtod_l+0x92>
 800c134:	2900      	cmp	r1, #0
 800c136:	d03b      	beq.n	800c1b0 <_strtod_l+0xa8>
 800c138:	2200      	movs	r2, #0
 800c13a:	920e      	str	r2, [sp, #56]	; 0x38
 800c13c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c13e:	7832      	ldrb	r2, [r6, #0]
 800c140:	2a30      	cmp	r2, #48	; 0x30
 800c142:	f040 80b2 	bne.w	800c2aa <_strtod_l+0x1a2>
 800c146:	7872      	ldrb	r2, [r6, #1]
 800c148:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c14c:	2a58      	cmp	r2, #88	; 0x58
 800c14e:	d16e      	bne.n	800c22e <_strtod_l+0x126>
 800c150:	9302      	str	r3, [sp, #8]
 800c152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c154:	4620      	mov	r0, r4
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	ab1a      	add	r3, sp, #104	; 0x68
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	4a8c      	ldr	r2, [pc, #560]	; (800c390 <_strtod_l+0x288>)
 800c15e:	ab1b      	add	r3, sp, #108	; 0x6c
 800c160:	a919      	add	r1, sp, #100	; 0x64
 800c162:	f001 faef 	bl	800d744 <__gethex>
 800c166:	f010 070f 	ands.w	r7, r0, #15
 800c16a:	4605      	mov	r5, r0
 800c16c:	d005      	beq.n	800c17a <_strtod_l+0x72>
 800c16e:	2f06      	cmp	r7, #6
 800c170:	d128      	bne.n	800c1c4 <_strtod_l+0xbc>
 800c172:	2300      	movs	r3, #0
 800c174:	3601      	adds	r6, #1
 800c176:	9619      	str	r6, [sp, #100]	; 0x64
 800c178:	930e      	str	r3, [sp, #56]	; 0x38
 800c17a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f040 85a0 	bne.w	800ccc2 <_strtod_l+0xbba>
 800c182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c184:	b1cb      	cbz	r3, 800c1ba <_strtod_l+0xb2>
 800c186:	4642      	mov	r2, r8
 800c188:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c18c:	4610      	mov	r0, r2
 800c18e:	4619      	mov	r1, r3
 800c190:	b01f      	add	sp, #124	; 0x7c
 800c192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c196:	2920      	cmp	r1, #32
 800c198:	d1ce      	bne.n	800c138 <_strtod_l+0x30>
 800c19a:	3201      	adds	r2, #1
 800c19c:	e7c1      	b.n	800c122 <_strtod_l+0x1a>
 800c19e:	292d      	cmp	r1, #45	; 0x2d
 800c1a0:	d1ca      	bne.n	800c138 <_strtod_l+0x30>
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	910e      	str	r1, [sp, #56]	; 0x38
 800c1a6:	1c51      	adds	r1, r2, #1
 800c1a8:	9119      	str	r1, [sp, #100]	; 0x64
 800c1aa:	7852      	ldrb	r2, [r2, #1]
 800c1ac:	2a00      	cmp	r2, #0
 800c1ae:	d1c5      	bne.n	800c13c <_strtod_l+0x34>
 800c1b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1b2:	9519      	str	r5, [sp, #100]	; 0x64
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f040 8582 	bne.w	800ccbe <_strtod_l+0xbb6>
 800c1ba:	4642      	mov	r2, r8
 800c1bc:	464b      	mov	r3, r9
 800c1be:	e7e5      	b.n	800c18c <_strtod_l+0x84>
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	e7ef      	b.n	800c1a4 <_strtod_l+0x9c>
 800c1c4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c1c6:	b13a      	cbz	r2, 800c1d8 <_strtod_l+0xd0>
 800c1c8:	2135      	movs	r1, #53	; 0x35
 800c1ca:	a81c      	add	r0, sp, #112	; 0x70
 800c1cc:	f7ff ff34 	bl	800c038 <__copybits>
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c1d4:	f7ff fb18 	bl	800b808 <_Bfree>
 800c1d8:	3f01      	subs	r7, #1
 800c1da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c1dc:	2f04      	cmp	r7, #4
 800c1de:	d806      	bhi.n	800c1ee <_strtod_l+0xe6>
 800c1e0:	e8df f007 	tbb	[pc, r7]
 800c1e4:	201d0314 	.word	0x201d0314
 800c1e8:	14          	.byte	0x14
 800c1e9:	00          	.byte	0x00
 800c1ea:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800c1ee:	05e9      	lsls	r1, r5, #23
 800c1f0:	bf48      	it	mi
 800c1f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c1f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c1fa:	0d1b      	lsrs	r3, r3, #20
 800c1fc:	051b      	lsls	r3, r3, #20
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1bb      	bne.n	800c17a <_strtod_l+0x72>
 800c202:	f7fe fb09 	bl	800a818 <__errno>
 800c206:	2322      	movs	r3, #34	; 0x22
 800c208:	6003      	str	r3, [r0, #0]
 800c20a:	e7b6      	b.n	800c17a <_strtod_l+0x72>
 800c20c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c210:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800c214:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c218:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c21c:	e7e7      	b.n	800c1ee <_strtod_l+0xe6>
 800c21e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c394 <_strtod_l+0x28c>
 800c222:	e7e4      	b.n	800c1ee <_strtod_l+0xe6>
 800c224:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c228:	f04f 38ff 	mov.w	r8, #4294967295
 800c22c:	e7df      	b.n	800c1ee <_strtod_l+0xe6>
 800c22e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c230:	1c5a      	adds	r2, r3, #1
 800c232:	9219      	str	r2, [sp, #100]	; 0x64
 800c234:	785b      	ldrb	r3, [r3, #1]
 800c236:	2b30      	cmp	r3, #48	; 0x30
 800c238:	d0f9      	beq.n	800c22e <_strtod_l+0x126>
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d09d      	beq.n	800c17a <_strtod_l+0x72>
 800c23e:	2301      	movs	r3, #1
 800c240:	f04f 0a00 	mov.w	sl, #0
 800c244:	220a      	movs	r2, #10
 800c246:	46d3      	mov	fp, sl
 800c248:	9305      	str	r3, [sp, #20]
 800c24a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c24c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800c250:	930b      	str	r3, [sp, #44]	; 0x2c
 800c252:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c254:	7806      	ldrb	r6, [r0, #0]
 800c256:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c25a:	b2d9      	uxtb	r1, r3
 800c25c:	2909      	cmp	r1, #9
 800c25e:	d926      	bls.n	800c2ae <_strtod_l+0x1a6>
 800c260:	2201      	movs	r2, #1
 800c262:	494d      	ldr	r1, [pc, #308]	; (800c398 <_strtod_l+0x290>)
 800c264:	f001 f989 	bl	800d57a <strncmp>
 800c268:	2800      	cmp	r0, #0
 800c26a:	d030      	beq.n	800c2ce <_strtod_l+0x1c6>
 800c26c:	2000      	movs	r0, #0
 800c26e:	4632      	mov	r2, r6
 800c270:	4603      	mov	r3, r0
 800c272:	465e      	mov	r6, fp
 800c274:	9008      	str	r0, [sp, #32]
 800c276:	2a65      	cmp	r2, #101	; 0x65
 800c278:	d001      	beq.n	800c27e <_strtod_l+0x176>
 800c27a:	2a45      	cmp	r2, #69	; 0x45
 800c27c:	d113      	bne.n	800c2a6 <_strtod_l+0x19e>
 800c27e:	b91e      	cbnz	r6, 800c288 <_strtod_l+0x180>
 800c280:	9a05      	ldr	r2, [sp, #20]
 800c282:	4302      	orrs	r2, r0
 800c284:	d094      	beq.n	800c1b0 <_strtod_l+0xa8>
 800c286:	2600      	movs	r6, #0
 800c288:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c28a:	1c6a      	adds	r2, r5, #1
 800c28c:	9219      	str	r2, [sp, #100]	; 0x64
 800c28e:	786a      	ldrb	r2, [r5, #1]
 800c290:	2a2b      	cmp	r2, #43	; 0x2b
 800c292:	d074      	beq.n	800c37e <_strtod_l+0x276>
 800c294:	2a2d      	cmp	r2, #45	; 0x2d
 800c296:	d078      	beq.n	800c38a <_strtod_l+0x282>
 800c298:	f04f 0c00 	mov.w	ip, #0
 800c29c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c2a0:	2909      	cmp	r1, #9
 800c2a2:	d97f      	bls.n	800c3a4 <_strtod_l+0x29c>
 800c2a4:	9519      	str	r5, [sp, #100]	; 0x64
 800c2a6:	2700      	movs	r7, #0
 800c2a8:	e09e      	b.n	800c3e8 <_strtod_l+0x2e0>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	e7c8      	b.n	800c240 <_strtod_l+0x138>
 800c2ae:	f1bb 0f08 	cmp.w	fp, #8
 800c2b2:	bfd8      	it	le
 800c2b4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800c2b6:	f100 0001 	add.w	r0, r0, #1
 800c2ba:	bfd6      	itet	le
 800c2bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c2c0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c2c4:	930a      	strle	r3, [sp, #40]	; 0x28
 800c2c6:	f10b 0b01 	add.w	fp, fp, #1
 800c2ca:	9019      	str	r0, [sp, #100]	; 0x64
 800c2cc:	e7c1      	b.n	800c252 <_strtod_l+0x14a>
 800c2ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2d0:	1c5a      	adds	r2, r3, #1
 800c2d2:	9219      	str	r2, [sp, #100]	; 0x64
 800c2d4:	785a      	ldrb	r2, [r3, #1]
 800c2d6:	f1bb 0f00 	cmp.w	fp, #0
 800c2da:	d037      	beq.n	800c34c <_strtod_l+0x244>
 800c2dc:	465e      	mov	r6, fp
 800c2de:	9008      	str	r0, [sp, #32]
 800c2e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c2e4:	2b09      	cmp	r3, #9
 800c2e6:	d912      	bls.n	800c30e <_strtod_l+0x206>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e7c4      	b.n	800c276 <_strtod_l+0x16e>
 800c2ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2ee:	3001      	adds	r0, #1
 800c2f0:	1c5a      	adds	r2, r3, #1
 800c2f2:	9219      	str	r2, [sp, #100]	; 0x64
 800c2f4:	785a      	ldrb	r2, [r3, #1]
 800c2f6:	2a30      	cmp	r2, #48	; 0x30
 800c2f8:	d0f8      	beq.n	800c2ec <_strtod_l+0x1e4>
 800c2fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c2fe:	2b08      	cmp	r3, #8
 800c300:	f200 84e4 	bhi.w	800cccc <_strtod_l+0xbc4>
 800c304:	9008      	str	r0, [sp, #32]
 800c306:	2000      	movs	r0, #0
 800c308:	4606      	mov	r6, r0
 800c30a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c30c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c30e:	3a30      	subs	r2, #48	; 0x30
 800c310:	f100 0301 	add.w	r3, r0, #1
 800c314:	d014      	beq.n	800c340 <_strtod_l+0x238>
 800c316:	9908      	ldr	r1, [sp, #32]
 800c318:	eb00 0c06 	add.w	ip, r0, r6
 800c31c:	4419      	add	r1, r3
 800c31e:	9108      	str	r1, [sp, #32]
 800c320:	4633      	mov	r3, r6
 800c322:	210a      	movs	r1, #10
 800c324:	4563      	cmp	r3, ip
 800c326:	d113      	bne.n	800c350 <_strtod_l+0x248>
 800c328:	1833      	adds	r3, r6, r0
 800c32a:	2b08      	cmp	r3, #8
 800c32c:	f106 0601 	add.w	r6, r6, #1
 800c330:	4406      	add	r6, r0
 800c332:	dc1a      	bgt.n	800c36a <_strtod_l+0x262>
 800c334:	230a      	movs	r3, #10
 800c336:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c338:	fb03 2301 	mla	r3, r3, r1, r2
 800c33c:	930a      	str	r3, [sp, #40]	; 0x28
 800c33e:	2300      	movs	r3, #0
 800c340:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c342:	4618      	mov	r0, r3
 800c344:	1c51      	adds	r1, r2, #1
 800c346:	9119      	str	r1, [sp, #100]	; 0x64
 800c348:	7852      	ldrb	r2, [r2, #1]
 800c34a:	e7c9      	b.n	800c2e0 <_strtod_l+0x1d8>
 800c34c:	4658      	mov	r0, fp
 800c34e:	e7d2      	b.n	800c2f6 <_strtod_l+0x1ee>
 800c350:	2b08      	cmp	r3, #8
 800c352:	f103 0301 	add.w	r3, r3, #1
 800c356:	dc03      	bgt.n	800c360 <_strtod_l+0x258>
 800c358:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c35a:	434f      	muls	r7, r1
 800c35c:	970a      	str	r7, [sp, #40]	; 0x28
 800c35e:	e7e1      	b.n	800c324 <_strtod_l+0x21c>
 800c360:	2b10      	cmp	r3, #16
 800c362:	bfd8      	it	le
 800c364:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c368:	e7dc      	b.n	800c324 <_strtod_l+0x21c>
 800c36a:	2e10      	cmp	r6, #16
 800c36c:	bfdc      	itt	le
 800c36e:	230a      	movle	r3, #10
 800c370:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c374:	e7e3      	b.n	800c33e <_strtod_l+0x236>
 800c376:	2300      	movs	r3, #0
 800c378:	9308      	str	r3, [sp, #32]
 800c37a:	2301      	movs	r3, #1
 800c37c:	e780      	b.n	800c280 <_strtod_l+0x178>
 800c37e:	f04f 0c00 	mov.w	ip, #0
 800c382:	1caa      	adds	r2, r5, #2
 800c384:	9219      	str	r2, [sp, #100]	; 0x64
 800c386:	78aa      	ldrb	r2, [r5, #2]
 800c388:	e788      	b.n	800c29c <_strtod_l+0x194>
 800c38a:	f04f 0c01 	mov.w	ip, #1
 800c38e:	e7f8      	b.n	800c382 <_strtod_l+0x27a>
 800c390:	0800e2b0 	.word	0x0800e2b0
 800c394:	7ff00000 	.word	0x7ff00000
 800c398:	0800e2ac 	.word	0x0800e2ac
 800c39c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c39e:	1c51      	adds	r1, r2, #1
 800c3a0:	9119      	str	r1, [sp, #100]	; 0x64
 800c3a2:	7852      	ldrb	r2, [r2, #1]
 800c3a4:	2a30      	cmp	r2, #48	; 0x30
 800c3a6:	d0f9      	beq.n	800c39c <_strtod_l+0x294>
 800c3a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c3ac:	2908      	cmp	r1, #8
 800c3ae:	f63f af7a 	bhi.w	800c2a6 <_strtod_l+0x19e>
 800c3b2:	3a30      	subs	r2, #48	; 0x30
 800c3b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c3b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c3b8:	920c      	str	r2, [sp, #48]	; 0x30
 800c3ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c3bc:	1c57      	adds	r7, r2, #1
 800c3be:	9719      	str	r7, [sp, #100]	; 0x64
 800c3c0:	7852      	ldrb	r2, [r2, #1]
 800c3c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c3c6:	f1be 0f09 	cmp.w	lr, #9
 800c3ca:	d938      	bls.n	800c43e <_strtod_l+0x336>
 800c3cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c3ce:	1a7f      	subs	r7, r7, r1
 800c3d0:	2f08      	cmp	r7, #8
 800c3d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c3d6:	dc03      	bgt.n	800c3e0 <_strtod_l+0x2d8>
 800c3d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3da:	428f      	cmp	r7, r1
 800c3dc:	bfa8      	it	ge
 800c3de:	460f      	movge	r7, r1
 800c3e0:	f1bc 0f00 	cmp.w	ip, #0
 800c3e4:	d000      	beq.n	800c3e8 <_strtod_l+0x2e0>
 800c3e6:	427f      	negs	r7, r7
 800c3e8:	2e00      	cmp	r6, #0
 800c3ea:	d14f      	bne.n	800c48c <_strtod_l+0x384>
 800c3ec:	9905      	ldr	r1, [sp, #20]
 800c3ee:	4301      	orrs	r1, r0
 800c3f0:	f47f aec3 	bne.w	800c17a <_strtod_l+0x72>
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f47f aedb 	bne.w	800c1b0 <_strtod_l+0xa8>
 800c3fa:	2a69      	cmp	r2, #105	; 0x69
 800c3fc:	d029      	beq.n	800c452 <_strtod_l+0x34a>
 800c3fe:	dc26      	bgt.n	800c44e <_strtod_l+0x346>
 800c400:	2a49      	cmp	r2, #73	; 0x49
 800c402:	d026      	beq.n	800c452 <_strtod_l+0x34a>
 800c404:	2a4e      	cmp	r2, #78	; 0x4e
 800c406:	f47f aed3 	bne.w	800c1b0 <_strtod_l+0xa8>
 800c40a:	499a      	ldr	r1, [pc, #616]	; (800c674 <_strtod_l+0x56c>)
 800c40c:	a819      	add	r0, sp, #100	; 0x64
 800c40e:	f001 fbdb 	bl	800dbc8 <__match>
 800c412:	2800      	cmp	r0, #0
 800c414:	f43f aecc 	beq.w	800c1b0 <_strtod_l+0xa8>
 800c418:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	2b28      	cmp	r3, #40	; 0x28
 800c41e:	d12f      	bne.n	800c480 <_strtod_l+0x378>
 800c420:	4995      	ldr	r1, [pc, #596]	; (800c678 <_strtod_l+0x570>)
 800c422:	aa1c      	add	r2, sp, #112	; 0x70
 800c424:	a819      	add	r0, sp, #100	; 0x64
 800c426:	f001 fbe3 	bl	800dbf0 <__hexnan>
 800c42a:	2805      	cmp	r0, #5
 800c42c:	d128      	bne.n	800c480 <_strtod_l+0x378>
 800c42e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c430:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800c434:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c438:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c43c:	e69d      	b.n	800c17a <_strtod_l+0x72>
 800c43e:	210a      	movs	r1, #10
 800c440:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c442:	fb01 2107 	mla	r1, r1, r7, r2
 800c446:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c44a:	9209      	str	r2, [sp, #36]	; 0x24
 800c44c:	e7b5      	b.n	800c3ba <_strtod_l+0x2b2>
 800c44e:	2a6e      	cmp	r2, #110	; 0x6e
 800c450:	e7d9      	b.n	800c406 <_strtod_l+0x2fe>
 800c452:	498a      	ldr	r1, [pc, #552]	; (800c67c <_strtod_l+0x574>)
 800c454:	a819      	add	r0, sp, #100	; 0x64
 800c456:	f001 fbb7 	bl	800dbc8 <__match>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	f43f aea8 	beq.w	800c1b0 <_strtod_l+0xa8>
 800c460:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c462:	4987      	ldr	r1, [pc, #540]	; (800c680 <_strtod_l+0x578>)
 800c464:	3b01      	subs	r3, #1
 800c466:	a819      	add	r0, sp, #100	; 0x64
 800c468:	9319      	str	r3, [sp, #100]	; 0x64
 800c46a:	f001 fbad 	bl	800dbc8 <__match>
 800c46e:	b910      	cbnz	r0, 800c476 <_strtod_l+0x36e>
 800c470:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c472:	3301      	adds	r3, #1
 800c474:	9319      	str	r3, [sp, #100]	; 0x64
 800c476:	f04f 0800 	mov.w	r8, #0
 800c47a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800c684 <_strtod_l+0x57c>
 800c47e:	e67c      	b.n	800c17a <_strtod_l+0x72>
 800c480:	4881      	ldr	r0, [pc, #516]	; (800c688 <_strtod_l+0x580>)
 800c482:	f001 f8bf 	bl	800d604 <nan>
 800c486:	4680      	mov	r8, r0
 800c488:	4689      	mov	r9, r1
 800c48a:	e676      	b.n	800c17a <_strtod_l+0x72>
 800c48c:	9b08      	ldr	r3, [sp, #32]
 800c48e:	f1bb 0f00 	cmp.w	fp, #0
 800c492:	bf08      	it	eq
 800c494:	46b3      	moveq	fp, r6
 800c496:	1afb      	subs	r3, r7, r3
 800c498:	2e10      	cmp	r6, #16
 800c49a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c49c:	4635      	mov	r5, r6
 800c49e:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a0:	bfa8      	it	ge
 800c4a2:	2510      	movge	r5, #16
 800c4a4:	f7f3 ff9e 	bl	80003e4 <__aeabi_ui2d>
 800c4a8:	2e09      	cmp	r6, #9
 800c4aa:	4680      	mov	r8, r0
 800c4ac:	4689      	mov	r9, r1
 800c4ae:	dd13      	ble.n	800c4d8 <_strtod_l+0x3d0>
 800c4b0:	4b76      	ldr	r3, [pc, #472]	; (800c68c <_strtod_l+0x584>)
 800c4b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c4b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c4ba:	f7f4 f80d 	bl	80004d8 <__aeabi_dmul>
 800c4be:	4680      	mov	r8, r0
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	4689      	mov	r9, r1
 800c4c4:	f7f3 ff8e 	bl	80003e4 <__aeabi_ui2d>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	f7f3 fe4c 	bl	800016c <__adddf3>
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	4689      	mov	r9, r1
 800c4d8:	2e0f      	cmp	r6, #15
 800c4da:	dc36      	bgt.n	800c54a <_strtod_l+0x442>
 800c4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f43f ae4b 	beq.w	800c17a <_strtod_l+0x72>
 800c4e4:	dd22      	ble.n	800c52c <_strtod_l+0x424>
 800c4e6:	2b16      	cmp	r3, #22
 800c4e8:	dc09      	bgt.n	800c4fe <_strtod_l+0x3f6>
 800c4ea:	4968      	ldr	r1, [pc, #416]	; (800c68c <_strtod_l+0x584>)
 800c4ec:	4642      	mov	r2, r8
 800c4ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4f2:	464b      	mov	r3, r9
 800c4f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4f8:	f7f3 ffee 	bl	80004d8 <__aeabi_dmul>
 800c4fc:	e7c3      	b.n	800c486 <_strtod_l+0x37e>
 800c4fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c500:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c504:	4293      	cmp	r3, r2
 800c506:	db20      	blt.n	800c54a <_strtod_l+0x442>
 800c508:	4c60      	ldr	r4, [pc, #384]	; (800c68c <_strtod_l+0x584>)
 800c50a:	f1c6 060f 	rsb	r6, r6, #15
 800c50e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c512:	4642      	mov	r2, r8
 800c514:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c518:	464b      	mov	r3, r9
 800c51a:	f7f3 ffdd 	bl	80004d8 <__aeabi_dmul>
 800c51e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c520:	1b9e      	subs	r6, r3, r6
 800c522:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c526:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c52a:	e7e5      	b.n	800c4f8 <_strtod_l+0x3f0>
 800c52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c52e:	3316      	adds	r3, #22
 800c530:	db0b      	blt.n	800c54a <_strtod_l+0x442>
 800c532:	9b08      	ldr	r3, [sp, #32]
 800c534:	4640      	mov	r0, r8
 800c536:	1bdf      	subs	r7, r3, r7
 800c538:	4b54      	ldr	r3, [pc, #336]	; (800c68c <_strtod_l+0x584>)
 800c53a:	4649      	mov	r1, r9
 800c53c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c540:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c544:	f7f4 f8f2 	bl	800072c <__aeabi_ddiv>
 800c548:	e79d      	b.n	800c486 <_strtod_l+0x37e>
 800c54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c54c:	1b75      	subs	r5, r6, r5
 800c54e:	441d      	add	r5, r3
 800c550:	2d00      	cmp	r5, #0
 800c552:	dd70      	ble.n	800c636 <_strtod_l+0x52e>
 800c554:	f015 030f 	ands.w	r3, r5, #15
 800c558:	d00a      	beq.n	800c570 <_strtod_l+0x468>
 800c55a:	494c      	ldr	r1, [pc, #304]	; (800c68c <_strtod_l+0x584>)
 800c55c:	4642      	mov	r2, r8
 800c55e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c562:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c566:	464b      	mov	r3, r9
 800c568:	f7f3 ffb6 	bl	80004d8 <__aeabi_dmul>
 800c56c:	4680      	mov	r8, r0
 800c56e:	4689      	mov	r9, r1
 800c570:	f035 050f 	bics.w	r5, r5, #15
 800c574:	d04d      	beq.n	800c612 <_strtod_l+0x50a>
 800c576:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c57a:	dd22      	ble.n	800c5c2 <_strtod_l+0x4ba>
 800c57c:	2600      	movs	r6, #0
 800c57e:	46b3      	mov	fp, r6
 800c580:	960b      	str	r6, [sp, #44]	; 0x2c
 800c582:	9608      	str	r6, [sp, #32]
 800c584:	2322      	movs	r3, #34	; 0x22
 800c586:	f04f 0800 	mov.w	r8, #0
 800c58a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800c684 <_strtod_l+0x57c>
 800c58e:	6023      	str	r3, [r4, #0]
 800c590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c592:	2b00      	cmp	r3, #0
 800c594:	f43f adf1 	beq.w	800c17a <_strtod_l+0x72>
 800c598:	4620      	mov	r0, r4
 800c59a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c59c:	f7ff f934 	bl	800b808 <_Bfree>
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	9908      	ldr	r1, [sp, #32]
 800c5a4:	f7ff f930 	bl	800b808 <_Bfree>
 800c5a8:	4659      	mov	r1, fp
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f7ff f92c 	bl	800b808 <_Bfree>
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5b4:	f7ff f928 	bl	800b808 <_Bfree>
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f7ff f924 	bl	800b808 <_Bfree>
 800c5c0:	e5db      	b.n	800c17a <_strtod_l+0x72>
 800c5c2:	4b33      	ldr	r3, [pc, #204]	; (800c690 <_strtod_l+0x588>)
 800c5c4:	4640      	mov	r0, r8
 800c5c6:	9305      	str	r3, [sp, #20]
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	4649      	mov	r1, r9
 800c5cc:	469a      	mov	sl, r3
 800c5ce:	112d      	asrs	r5, r5, #4
 800c5d0:	2d01      	cmp	r5, #1
 800c5d2:	dc21      	bgt.n	800c618 <_strtod_l+0x510>
 800c5d4:	b10b      	cbz	r3, 800c5da <_strtod_l+0x4d2>
 800c5d6:	4680      	mov	r8, r0
 800c5d8:	4689      	mov	r9, r1
 800c5da:	492d      	ldr	r1, [pc, #180]	; (800c690 <_strtod_l+0x588>)
 800c5dc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c5e0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c5e4:	4642      	mov	r2, r8
 800c5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ea:	464b      	mov	r3, r9
 800c5ec:	f7f3 ff74 	bl	80004d8 <__aeabi_dmul>
 800c5f0:	4b24      	ldr	r3, [pc, #144]	; (800c684 <_strtod_l+0x57c>)
 800c5f2:	460a      	mov	r2, r1
 800c5f4:	400b      	ands	r3, r1
 800c5f6:	4927      	ldr	r1, [pc, #156]	; (800c694 <_strtod_l+0x58c>)
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	428b      	cmp	r3, r1
 800c5fc:	d8be      	bhi.n	800c57c <_strtod_l+0x474>
 800c5fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c602:	428b      	cmp	r3, r1
 800c604:	bf86      	itte	hi
 800c606:	f04f 38ff 	movhi.w	r8, #4294967295
 800c60a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800c698 <_strtod_l+0x590>
 800c60e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c612:	2300      	movs	r3, #0
 800c614:	9305      	str	r3, [sp, #20]
 800c616:	e07b      	b.n	800c710 <_strtod_l+0x608>
 800c618:	07ea      	lsls	r2, r5, #31
 800c61a:	d505      	bpl.n	800c628 <_strtod_l+0x520>
 800c61c:	9b05      	ldr	r3, [sp, #20]
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	f7f3 ff59 	bl	80004d8 <__aeabi_dmul>
 800c626:	2301      	movs	r3, #1
 800c628:	9a05      	ldr	r2, [sp, #20]
 800c62a:	f10a 0a01 	add.w	sl, sl, #1
 800c62e:	3208      	adds	r2, #8
 800c630:	106d      	asrs	r5, r5, #1
 800c632:	9205      	str	r2, [sp, #20]
 800c634:	e7cc      	b.n	800c5d0 <_strtod_l+0x4c8>
 800c636:	d0ec      	beq.n	800c612 <_strtod_l+0x50a>
 800c638:	426d      	negs	r5, r5
 800c63a:	f015 020f 	ands.w	r2, r5, #15
 800c63e:	d00a      	beq.n	800c656 <_strtod_l+0x54e>
 800c640:	4b12      	ldr	r3, [pc, #72]	; (800c68c <_strtod_l+0x584>)
 800c642:	4640      	mov	r0, r8
 800c644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c648:	4649      	mov	r1, r9
 800c64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64e:	f7f4 f86d 	bl	800072c <__aeabi_ddiv>
 800c652:	4680      	mov	r8, r0
 800c654:	4689      	mov	r9, r1
 800c656:	112d      	asrs	r5, r5, #4
 800c658:	d0db      	beq.n	800c612 <_strtod_l+0x50a>
 800c65a:	2d1f      	cmp	r5, #31
 800c65c:	dd1e      	ble.n	800c69c <_strtod_l+0x594>
 800c65e:	2600      	movs	r6, #0
 800c660:	46b3      	mov	fp, r6
 800c662:	960b      	str	r6, [sp, #44]	; 0x2c
 800c664:	9608      	str	r6, [sp, #32]
 800c666:	2322      	movs	r3, #34	; 0x22
 800c668:	f04f 0800 	mov.w	r8, #0
 800c66c:	f04f 0900 	mov.w	r9, #0
 800c670:	6023      	str	r3, [r4, #0]
 800c672:	e78d      	b.n	800c590 <_strtod_l+0x488>
 800c674:	0800e097 	.word	0x0800e097
 800c678:	0800e2c4 	.word	0x0800e2c4
 800c67c:	0800e08f 	.word	0x0800e08f
 800c680:	0800e0c6 	.word	0x0800e0c6
 800c684:	7ff00000 	.word	0x7ff00000
 800c688:	0800e455 	.word	0x0800e455
 800c68c:	0800e1d8 	.word	0x0800e1d8
 800c690:	0800e1b0 	.word	0x0800e1b0
 800c694:	7ca00000 	.word	0x7ca00000
 800c698:	7fefffff 	.word	0x7fefffff
 800c69c:	f015 0310 	ands.w	r3, r5, #16
 800c6a0:	bf18      	it	ne
 800c6a2:	236a      	movne	r3, #106	; 0x6a
 800c6a4:	4640      	mov	r0, r8
 800c6a6:	9305      	str	r3, [sp, #20]
 800c6a8:	4649      	mov	r1, r9
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800c978 <_strtod_l+0x870>
 800c6b0:	07ea      	lsls	r2, r5, #31
 800c6b2:	d504      	bpl.n	800c6be <_strtod_l+0x5b6>
 800c6b4:	e9da 2300 	ldrd	r2, r3, [sl]
 800c6b8:	f7f3 ff0e 	bl	80004d8 <__aeabi_dmul>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	106d      	asrs	r5, r5, #1
 800c6c0:	f10a 0a08 	add.w	sl, sl, #8
 800c6c4:	d1f4      	bne.n	800c6b0 <_strtod_l+0x5a8>
 800c6c6:	b10b      	cbz	r3, 800c6cc <_strtod_l+0x5c4>
 800c6c8:	4680      	mov	r8, r0
 800c6ca:	4689      	mov	r9, r1
 800c6cc:	9b05      	ldr	r3, [sp, #20]
 800c6ce:	b1bb      	cbz	r3, 800c700 <_strtod_l+0x5f8>
 800c6d0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c6d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	4649      	mov	r1, r9
 800c6dc:	dd10      	ble.n	800c700 <_strtod_l+0x5f8>
 800c6de:	2b1f      	cmp	r3, #31
 800c6e0:	f340 8128 	ble.w	800c934 <_strtod_l+0x82c>
 800c6e4:	2b34      	cmp	r3, #52	; 0x34
 800c6e6:	bfd8      	it	le
 800c6e8:	f04f 33ff 	movle.w	r3, #4294967295
 800c6ec:	f04f 0800 	mov.w	r8, #0
 800c6f0:	bfcf      	iteee	gt
 800c6f2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c6f6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c6fa:	4093      	lslle	r3, r2
 800c6fc:	ea03 0901 	andle.w	r9, r3, r1
 800c700:	2200      	movs	r2, #0
 800c702:	2300      	movs	r3, #0
 800c704:	4640      	mov	r0, r8
 800c706:	4649      	mov	r1, r9
 800c708:	f7f4 f94e 	bl	80009a8 <__aeabi_dcmpeq>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d1a6      	bne.n	800c65e <_strtod_l+0x556>
 800c710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c712:	465a      	mov	r2, fp
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	4620      	mov	r0, r4
 800c718:	4633      	mov	r3, r6
 800c71a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c71c:	f7ff f8dc 	bl	800b8d8 <__s2b>
 800c720:	900b      	str	r0, [sp, #44]	; 0x2c
 800c722:	2800      	cmp	r0, #0
 800c724:	f43f af2a 	beq.w	800c57c <_strtod_l+0x474>
 800c728:	2600      	movs	r6, #0
 800c72a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c72c:	9b08      	ldr	r3, [sp, #32]
 800c72e:	2a00      	cmp	r2, #0
 800c730:	eba3 0307 	sub.w	r3, r3, r7
 800c734:	bfa8      	it	ge
 800c736:	2300      	movge	r3, #0
 800c738:	46b3      	mov	fp, r6
 800c73a:	9312      	str	r3, [sp, #72]	; 0x48
 800c73c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c740:	9316      	str	r3, [sp, #88]	; 0x58
 800c742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c744:	4620      	mov	r0, r4
 800c746:	6859      	ldr	r1, [r3, #4]
 800c748:	f7ff f81e 	bl	800b788 <_Balloc>
 800c74c:	9008      	str	r0, [sp, #32]
 800c74e:	2800      	cmp	r0, #0
 800c750:	f43f af18 	beq.w	800c584 <_strtod_l+0x47c>
 800c754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c756:	300c      	adds	r0, #12
 800c758:	691a      	ldr	r2, [r3, #16]
 800c75a:	f103 010c 	add.w	r1, r3, #12
 800c75e:	3202      	adds	r2, #2
 800c760:	0092      	lsls	r2, r2, #2
 800c762:	f7fe f894 	bl	800a88e <memcpy>
 800c766:	ab1c      	add	r3, sp, #112	; 0x70
 800c768:	9301      	str	r3, [sp, #4]
 800c76a:	ab1b      	add	r3, sp, #108	; 0x6c
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	4642      	mov	r2, r8
 800c770:	464b      	mov	r3, r9
 800c772:	4620      	mov	r0, r4
 800c774:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800c778:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800c77c:	f7ff fbd8 	bl	800bf30 <__d2b>
 800c780:	901a      	str	r0, [sp, #104]	; 0x68
 800c782:	2800      	cmp	r0, #0
 800c784:	f43f aefe 	beq.w	800c584 <_strtod_l+0x47c>
 800c788:	2101      	movs	r1, #1
 800c78a:	4620      	mov	r0, r4
 800c78c:	f7ff f93c 	bl	800ba08 <__i2b>
 800c790:	4683      	mov	fp, r0
 800c792:	2800      	cmp	r0, #0
 800c794:	f43f aef6 	beq.w	800c584 <_strtod_l+0x47c>
 800c798:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c79a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c79c:	2f00      	cmp	r7, #0
 800c79e:	bfab      	itete	ge
 800c7a0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800c7a2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c7a4:	eb07 0a03 	addge.w	sl, r7, r3
 800c7a8:	1bdd      	sublt	r5, r3, r7
 800c7aa:	9b05      	ldr	r3, [sp, #20]
 800c7ac:	bfa8      	it	ge
 800c7ae:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c7b0:	eba7 0703 	sub.w	r7, r7, r3
 800c7b4:	4417      	add	r7, r2
 800c7b6:	4b71      	ldr	r3, [pc, #452]	; (800c97c <_strtod_l+0x874>)
 800c7b8:	f107 37ff 	add.w	r7, r7, #4294967295
 800c7bc:	bfb8      	it	lt
 800c7be:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800c7c2:	429f      	cmp	r7, r3
 800c7c4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c7c8:	f280 80c7 	bge.w	800c95a <_strtod_l+0x852>
 800c7cc:	1bdb      	subs	r3, r3, r7
 800c7ce:	2b1f      	cmp	r3, #31
 800c7d0:	f04f 0101 	mov.w	r1, #1
 800c7d4:	eba2 0203 	sub.w	r2, r2, r3
 800c7d8:	f300 80b3 	bgt.w	800c942 <_strtod_l+0x83a>
 800c7dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c7e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9310      	str	r3, [sp, #64]	; 0x40
 800c7e6:	eb0a 0702 	add.w	r7, sl, r2
 800c7ea:	9b05      	ldr	r3, [sp, #20]
 800c7ec:	45ba      	cmp	sl, r7
 800c7ee:	4415      	add	r5, r2
 800c7f0:	441d      	add	r5, r3
 800c7f2:	4653      	mov	r3, sl
 800c7f4:	bfa8      	it	ge
 800c7f6:	463b      	movge	r3, r7
 800c7f8:	42ab      	cmp	r3, r5
 800c7fa:	bfa8      	it	ge
 800c7fc:	462b      	movge	r3, r5
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	bfc2      	ittt	gt
 800c802:	1aff      	subgt	r7, r7, r3
 800c804:	1aed      	subgt	r5, r5, r3
 800c806:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c80a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	dd17      	ble.n	800c840 <_strtod_l+0x738>
 800c810:	4659      	mov	r1, fp
 800c812:	461a      	mov	r2, r3
 800c814:	4620      	mov	r0, r4
 800c816:	f7ff f9b5 	bl	800bb84 <__pow5mult>
 800c81a:	4683      	mov	fp, r0
 800c81c:	2800      	cmp	r0, #0
 800c81e:	f43f aeb1 	beq.w	800c584 <_strtod_l+0x47c>
 800c822:	4601      	mov	r1, r0
 800c824:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c826:	4620      	mov	r0, r4
 800c828:	f7ff f904 	bl	800ba34 <__multiply>
 800c82c:	900a      	str	r0, [sp, #40]	; 0x28
 800c82e:	2800      	cmp	r0, #0
 800c830:	f43f aea8 	beq.w	800c584 <_strtod_l+0x47c>
 800c834:	4620      	mov	r0, r4
 800c836:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c838:	f7fe ffe6 	bl	800b808 <_Bfree>
 800c83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c83e:	931a      	str	r3, [sp, #104]	; 0x68
 800c840:	2f00      	cmp	r7, #0
 800c842:	f300 808f 	bgt.w	800c964 <_strtod_l+0x85c>
 800c846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c848:	2b00      	cmp	r3, #0
 800c84a:	dd08      	ble.n	800c85e <_strtod_l+0x756>
 800c84c:	4620      	mov	r0, r4
 800c84e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c850:	9908      	ldr	r1, [sp, #32]
 800c852:	f7ff f997 	bl	800bb84 <__pow5mult>
 800c856:	9008      	str	r0, [sp, #32]
 800c858:	2800      	cmp	r0, #0
 800c85a:	f43f ae93 	beq.w	800c584 <_strtod_l+0x47c>
 800c85e:	2d00      	cmp	r5, #0
 800c860:	dd08      	ble.n	800c874 <_strtod_l+0x76c>
 800c862:	462a      	mov	r2, r5
 800c864:	4620      	mov	r0, r4
 800c866:	9908      	ldr	r1, [sp, #32]
 800c868:	f7ff f9e6 	bl	800bc38 <__lshift>
 800c86c:	9008      	str	r0, [sp, #32]
 800c86e:	2800      	cmp	r0, #0
 800c870:	f43f ae88 	beq.w	800c584 <_strtod_l+0x47c>
 800c874:	f1ba 0f00 	cmp.w	sl, #0
 800c878:	dd08      	ble.n	800c88c <_strtod_l+0x784>
 800c87a:	4659      	mov	r1, fp
 800c87c:	4652      	mov	r2, sl
 800c87e:	4620      	mov	r0, r4
 800c880:	f7ff f9da 	bl	800bc38 <__lshift>
 800c884:	4683      	mov	fp, r0
 800c886:	2800      	cmp	r0, #0
 800c888:	f43f ae7c 	beq.w	800c584 <_strtod_l+0x47c>
 800c88c:	4620      	mov	r0, r4
 800c88e:	9a08      	ldr	r2, [sp, #32]
 800c890:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c892:	f7ff fa59 	bl	800bd48 <__mdiff>
 800c896:	4606      	mov	r6, r0
 800c898:	2800      	cmp	r0, #0
 800c89a:	f43f ae73 	beq.w	800c584 <_strtod_l+0x47c>
 800c89e:	2500      	movs	r5, #0
 800c8a0:	68c3      	ldr	r3, [r0, #12]
 800c8a2:	4659      	mov	r1, fp
 800c8a4:	60c5      	str	r5, [r0, #12]
 800c8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8a8:	f7ff fa32 	bl	800bd10 <__mcmp>
 800c8ac:	42a8      	cmp	r0, r5
 800c8ae:	da6b      	bge.n	800c988 <_strtod_l+0x880>
 800c8b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8b2:	ea53 0308 	orrs.w	r3, r3, r8
 800c8b6:	f040 808f 	bne.w	800c9d8 <_strtod_l+0x8d0>
 800c8ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f040 808a 	bne.w	800c9d8 <_strtod_l+0x8d0>
 800c8c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8c8:	0d1b      	lsrs	r3, r3, #20
 800c8ca:	051b      	lsls	r3, r3, #20
 800c8cc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c8d0:	f240 8082 	bls.w	800c9d8 <_strtod_l+0x8d0>
 800c8d4:	6973      	ldr	r3, [r6, #20]
 800c8d6:	b913      	cbnz	r3, 800c8de <_strtod_l+0x7d6>
 800c8d8:	6933      	ldr	r3, [r6, #16]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	dd7c      	ble.n	800c9d8 <_strtod_l+0x8d0>
 800c8de:	4631      	mov	r1, r6
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f7ff f9a8 	bl	800bc38 <__lshift>
 800c8e8:	4659      	mov	r1, fp
 800c8ea:	4606      	mov	r6, r0
 800c8ec:	f7ff fa10 	bl	800bd10 <__mcmp>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	dd71      	ble.n	800c9d8 <_strtod_l+0x8d0>
 800c8f4:	9905      	ldr	r1, [sp, #20]
 800c8f6:	464b      	mov	r3, r9
 800c8f8:	4a21      	ldr	r2, [pc, #132]	; (800c980 <_strtod_l+0x878>)
 800c8fa:	2900      	cmp	r1, #0
 800c8fc:	f000 808d 	beq.w	800ca1a <_strtod_l+0x912>
 800c900:	ea02 0109 	and.w	r1, r2, r9
 800c904:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c908:	f300 8087 	bgt.w	800ca1a <_strtod_l+0x912>
 800c90c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c910:	f77f aea9 	ble.w	800c666 <_strtod_l+0x55e>
 800c914:	4640      	mov	r0, r8
 800c916:	4649      	mov	r1, r9
 800c918:	4b1a      	ldr	r3, [pc, #104]	; (800c984 <_strtod_l+0x87c>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	f7f3 fddc 	bl	80004d8 <__aeabi_dmul>
 800c920:	4b17      	ldr	r3, [pc, #92]	; (800c980 <_strtod_l+0x878>)
 800c922:	4680      	mov	r8, r0
 800c924:	400b      	ands	r3, r1
 800c926:	4689      	mov	r9, r1
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f47f ae35 	bne.w	800c598 <_strtod_l+0x490>
 800c92e:	2322      	movs	r3, #34	; 0x22
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	e631      	b.n	800c598 <_strtod_l+0x490>
 800c934:	f04f 32ff 	mov.w	r2, #4294967295
 800c938:	fa02 f303 	lsl.w	r3, r2, r3
 800c93c:	ea03 0808 	and.w	r8, r3, r8
 800c940:	e6de      	b.n	800c700 <_strtod_l+0x5f8>
 800c942:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800c946:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800c94a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800c94e:	37e2      	adds	r7, #226	; 0xe2
 800c950:	fa01 f307 	lsl.w	r3, r1, r7
 800c954:	9310      	str	r3, [sp, #64]	; 0x40
 800c956:	9113      	str	r1, [sp, #76]	; 0x4c
 800c958:	e745      	b.n	800c7e6 <_strtod_l+0x6de>
 800c95a:	2300      	movs	r3, #0
 800c95c:	9310      	str	r3, [sp, #64]	; 0x40
 800c95e:	2301      	movs	r3, #1
 800c960:	9313      	str	r3, [sp, #76]	; 0x4c
 800c962:	e740      	b.n	800c7e6 <_strtod_l+0x6de>
 800c964:	463a      	mov	r2, r7
 800c966:	4620      	mov	r0, r4
 800c968:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c96a:	f7ff f965 	bl	800bc38 <__lshift>
 800c96e:	901a      	str	r0, [sp, #104]	; 0x68
 800c970:	2800      	cmp	r0, #0
 800c972:	f47f af68 	bne.w	800c846 <_strtod_l+0x73e>
 800c976:	e605      	b.n	800c584 <_strtod_l+0x47c>
 800c978:	0800e2d8 	.word	0x0800e2d8
 800c97c:	fffffc02 	.word	0xfffffc02
 800c980:	7ff00000 	.word	0x7ff00000
 800c984:	39500000 	.word	0x39500000
 800c988:	46ca      	mov	sl, r9
 800c98a:	d165      	bne.n	800ca58 <_strtod_l+0x950>
 800c98c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c98e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c992:	b352      	cbz	r2, 800c9ea <_strtod_l+0x8e2>
 800c994:	4a9e      	ldr	r2, [pc, #632]	; (800cc10 <_strtod_l+0xb08>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d12a      	bne.n	800c9f0 <_strtod_l+0x8e8>
 800c99a:	9b05      	ldr	r3, [sp, #20]
 800c99c:	4641      	mov	r1, r8
 800c99e:	b1fb      	cbz	r3, 800c9e0 <_strtod_l+0x8d8>
 800c9a0:	4b9c      	ldr	r3, [pc, #624]	; (800cc14 <_strtod_l+0xb0c>)
 800c9a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a6:	ea09 0303 	and.w	r3, r9, r3
 800c9aa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c9ae:	d81a      	bhi.n	800c9e6 <_strtod_l+0x8de>
 800c9b0:	0d1b      	lsrs	r3, r3, #20
 800c9b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c9b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ba:	4299      	cmp	r1, r3
 800c9bc:	d118      	bne.n	800c9f0 <_strtod_l+0x8e8>
 800c9be:	4b96      	ldr	r3, [pc, #600]	; (800cc18 <_strtod_l+0xb10>)
 800c9c0:	459a      	cmp	sl, r3
 800c9c2:	d102      	bne.n	800c9ca <_strtod_l+0x8c2>
 800c9c4:	3101      	adds	r1, #1
 800c9c6:	f43f addd 	beq.w	800c584 <_strtod_l+0x47c>
 800c9ca:	f04f 0800 	mov.w	r8, #0
 800c9ce:	4b91      	ldr	r3, [pc, #580]	; (800cc14 <_strtod_l+0xb0c>)
 800c9d0:	ea0a 0303 	and.w	r3, sl, r3
 800c9d4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c9d8:	9b05      	ldr	r3, [sp, #20]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d19a      	bne.n	800c914 <_strtod_l+0x80c>
 800c9de:	e5db      	b.n	800c598 <_strtod_l+0x490>
 800c9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e4:	e7e9      	b.n	800c9ba <_strtod_l+0x8b2>
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	e7e7      	b.n	800c9ba <_strtod_l+0x8b2>
 800c9ea:	ea53 0308 	orrs.w	r3, r3, r8
 800c9ee:	d081      	beq.n	800c8f4 <_strtod_l+0x7ec>
 800c9f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9f2:	b1e3      	cbz	r3, 800ca2e <_strtod_l+0x926>
 800c9f4:	ea13 0f0a 	tst.w	r3, sl
 800c9f8:	d0ee      	beq.n	800c9d8 <_strtod_l+0x8d0>
 800c9fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	4649      	mov	r1, r9
 800ca00:	9a05      	ldr	r2, [sp, #20]
 800ca02:	b1c3      	cbz	r3, 800ca36 <_strtod_l+0x92e>
 800ca04:	f7ff fb5c 	bl	800c0c0 <sulp>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ca10:	f7f3 fbac 	bl	800016c <__adddf3>
 800ca14:	4680      	mov	r8, r0
 800ca16:	4689      	mov	r9, r1
 800ca18:	e7de      	b.n	800c9d8 <_strtod_l+0x8d0>
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ca20:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ca24:	f04f 38ff 	mov.w	r8, #4294967295
 800ca28:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ca2c:	e7d4      	b.n	800c9d8 <_strtod_l+0x8d0>
 800ca2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca30:	ea13 0f08 	tst.w	r3, r8
 800ca34:	e7e0      	b.n	800c9f8 <_strtod_l+0x8f0>
 800ca36:	f7ff fb43 	bl	800c0c0 <sulp>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ca42:	f7f3 fb91 	bl	8000168 <__aeabi_dsub>
 800ca46:	2200      	movs	r2, #0
 800ca48:	2300      	movs	r3, #0
 800ca4a:	4680      	mov	r8, r0
 800ca4c:	4689      	mov	r9, r1
 800ca4e:	f7f3 ffab 	bl	80009a8 <__aeabi_dcmpeq>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	d0c0      	beq.n	800c9d8 <_strtod_l+0x8d0>
 800ca56:	e606      	b.n	800c666 <_strtod_l+0x55e>
 800ca58:	4659      	mov	r1, fp
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f7ff fabe 	bl	800bfdc <__ratio>
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca6e:	f7f3 ffaf 	bl	80009d0 <__aeabi_dcmple>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d06f      	beq.n	800cb56 <_strtod_l+0xa4e>
 800ca76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d17c      	bne.n	800cb76 <_strtod_l+0xa6e>
 800ca7c:	f1b8 0f00 	cmp.w	r8, #0
 800ca80:	d159      	bne.n	800cb36 <_strtod_l+0xa2e>
 800ca82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d17b      	bne.n	800cb82 <_strtod_l+0xa7a>
 800ca8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca8e:	2200      	movs	r2, #0
 800ca90:	4b62      	ldr	r3, [pc, #392]	; (800cc1c <_strtod_l+0xb14>)
 800ca92:	f7f3 ff93 	bl	80009bc <__aeabi_dcmplt>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d15a      	bne.n	800cb50 <_strtod_l+0xa48>
 800ca9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca9e:	2200      	movs	r2, #0
 800caa0:	4b5f      	ldr	r3, [pc, #380]	; (800cc20 <_strtod_l+0xb18>)
 800caa2:	f7f3 fd19 	bl	80004d8 <__aeabi_dmul>
 800caa6:	4605      	mov	r5, r0
 800caa8:	460f      	mov	r7, r1
 800caaa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800caae:	9506      	str	r5, [sp, #24]
 800cab0:	9307      	str	r3, [sp, #28]
 800cab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cab6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800caba:	4b56      	ldr	r3, [pc, #344]	; (800cc14 <_strtod_l+0xb0c>)
 800cabc:	4a55      	ldr	r2, [pc, #340]	; (800cc14 <_strtod_l+0xb0c>)
 800cabe:	ea0a 0303 	and.w	r3, sl, r3
 800cac2:	9313      	str	r3, [sp, #76]	; 0x4c
 800cac4:	4b57      	ldr	r3, [pc, #348]	; (800cc24 <_strtod_l+0xb1c>)
 800cac6:	ea0a 0202 	and.w	r2, sl, r2
 800caca:	429a      	cmp	r2, r3
 800cacc:	f040 80b0 	bne.w	800cc30 <_strtod_l+0xb28>
 800cad0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800cad4:	4640      	mov	r0, r8
 800cad6:	4649      	mov	r1, r9
 800cad8:	f7ff f9c2 	bl	800be60 <__ulp>
 800cadc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cae0:	f7f3 fcfa 	bl	80004d8 <__aeabi_dmul>
 800cae4:	4642      	mov	r2, r8
 800cae6:	464b      	mov	r3, r9
 800cae8:	f7f3 fb40 	bl	800016c <__adddf3>
 800caec:	f8df a124 	ldr.w	sl, [pc, #292]	; 800cc14 <_strtod_l+0xb0c>
 800caf0:	4a4d      	ldr	r2, [pc, #308]	; (800cc28 <_strtod_l+0xb20>)
 800caf2:	ea01 0a0a 	and.w	sl, r1, sl
 800caf6:	4592      	cmp	sl, r2
 800caf8:	4680      	mov	r8, r0
 800cafa:	d948      	bls.n	800cb8e <_strtod_l+0xa86>
 800cafc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cafe:	4b46      	ldr	r3, [pc, #280]	; (800cc18 <_strtod_l+0xb10>)
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d103      	bne.n	800cb0c <_strtod_l+0xa04>
 800cb04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb06:	3301      	adds	r3, #1
 800cb08:	f43f ad3c 	beq.w	800c584 <_strtod_l+0x47c>
 800cb0c:	f04f 38ff 	mov.w	r8, #4294967295
 800cb10:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800cc18 <_strtod_l+0xb10>
 800cb14:	4620      	mov	r0, r4
 800cb16:	991a      	ldr	r1, [sp, #104]	; 0x68
 800cb18:	f7fe fe76 	bl	800b808 <_Bfree>
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	9908      	ldr	r1, [sp, #32]
 800cb20:	f7fe fe72 	bl	800b808 <_Bfree>
 800cb24:	4659      	mov	r1, fp
 800cb26:	4620      	mov	r0, r4
 800cb28:	f7fe fe6e 	bl	800b808 <_Bfree>
 800cb2c:	4631      	mov	r1, r6
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7fe fe6a 	bl	800b808 <_Bfree>
 800cb34:	e605      	b.n	800c742 <_strtod_l+0x63a>
 800cb36:	f1b8 0f01 	cmp.w	r8, #1
 800cb3a:	d103      	bne.n	800cb44 <_strtod_l+0xa3c>
 800cb3c:	f1b9 0f00 	cmp.w	r9, #0
 800cb40:	f43f ad91 	beq.w	800c666 <_strtod_l+0x55e>
 800cb44:	2200      	movs	r2, #0
 800cb46:	4b39      	ldr	r3, [pc, #228]	; (800cc2c <_strtod_l+0xb24>)
 800cb48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cb4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb4e:	e016      	b.n	800cb7e <_strtod_l+0xa76>
 800cb50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cb52:	4f33      	ldr	r7, [pc, #204]	; (800cc20 <_strtod_l+0xb18>)
 800cb54:	e7a9      	b.n	800caaa <_strtod_l+0x9a2>
 800cb56:	4b32      	ldr	r3, [pc, #200]	; (800cc20 <_strtod_l+0xb18>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb5e:	f7f3 fcbb 	bl	80004d8 <__aeabi_dmul>
 800cb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb64:	4605      	mov	r5, r0
 800cb66:	460f      	mov	r7, r1
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d09e      	beq.n	800caaa <_strtod_l+0x9a2>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	460b      	mov	r3, r1
 800cb70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb74:	e79d      	b.n	800cab2 <_strtod_l+0x9aa>
 800cb76:	2200      	movs	r2, #0
 800cb78:	4b28      	ldr	r3, [pc, #160]	; (800cc1c <_strtod_l+0xb14>)
 800cb7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb7e:	4f27      	ldr	r7, [pc, #156]	; (800cc1c <_strtod_l+0xb14>)
 800cb80:	e797      	b.n	800cab2 <_strtod_l+0x9aa>
 800cb82:	2200      	movs	r2, #0
 800cb84:	4b29      	ldr	r3, [pc, #164]	; (800cc2c <_strtod_l+0xb24>)
 800cb86:	4645      	mov	r5, r8
 800cb88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb8c:	e7f7      	b.n	800cb7e <_strtod_l+0xa76>
 800cb8e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800cb92:	9b05      	ldr	r3, [sp, #20]
 800cb94:	46ca      	mov	sl, r9
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1bc      	bne.n	800cb14 <_strtod_l+0xa0c>
 800cb9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cba0:	0d1b      	lsrs	r3, r3, #20
 800cba2:	051b      	lsls	r3, r3, #20
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d1b5      	bne.n	800cb14 <_strtod_l+0xa0c>
 800cba8:	4628      	mov	r0, r5
 800cbaa:	4639      	mov	r1, r7
 800cbac:	f7f4 fa3a 	bl	8001024 <__aeabi_d2lz>
 800cbb0:	f7f3 fc64 	bl	800047c <__aeabi_l2d>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	4628      	mov	r0, r5
 800cbba:	4639      	mov	r1, r7
 800cbbc:	f7f3 fad4 	bl	8000168 <__aeabi_dsub>
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800cbc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800cbcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbce:	ea4a 0a08 	orr.w	sl, sl, r8
 800cbd2:	ea5a 0a03 	orrs.w	sl, sl, r3
 800cbd6:	d06c      	beq.n	800ccb2 <_strtod_l+0xbaa>
 800cbd8:	a309      	add	r3, pc, #36	; (adr r3, 800cc00 <_strtod_l+0xaf8>)
 800cbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbde:	f7f3 feed 	bl	80009bc <__aeabi_dcmplt>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	f47f acd8 	bne.w	800c598 <_strtod_l+0x490>
 800cbe8:	a307      	add	r3, pc, #28	; (adr r3, 800cc08 <_strtod_l+0xb00>)
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cbf2:	f7f3 ff01 	bl	80009f8 <__aeabi_dcmpgt>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d08c      	beq.n	800cb14 <_strtod_l+0xa0c>
 800cbfa:	e4cd      	b.n	800c598 <_strtod_l+0x490>
 800cbfc:	f3af 8000 	nop.w
 800cc00:	94a03595 	.word	0x94a03595
 800cc04:	3fdfffff 	.word	0x3fdfffff
 800cc08:	35afe535 	.word	0x35afe535
 800cc0c:	3fe00000 	.word	0x3fe00000
 800cc10:	000fffff 	.word	0x000fffff
 800cc14:	7ff00000 	.word	0x7ff00000
 800cc18:	7fefffff 	.word	0x7fefffff
 800cc1c:	3ff00000 	.word	0x3ff00000
 800cc20:	3fe00000 	.word	0x3fe00000
 800cc24:	7fe00000 	.word	0x7fe00000
 800cc28:	7c9fffff 	.word	0x7c9fffff
 800cc2c:	bff00000 	.word	0xbff00000
 800cc30:	9b05      	ldr	r3, [sp, #20]
 800cc32:	b333      	cbz	r3, 800cc82 <_strtod_l+0xb7a>
 800cc34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cc3a:	d822      	bhi.n	800cc82 <_strtod_l+0xb7a>
 800cc3c:	a328      	add	r3, pc, #160	; (adr r3, 800cce0 <_strtod_l+0xbd8>)
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	4628      	mov	r0, r5
 800cc44:	4639      	mov	r1, r7
 800cc46:	f7f3 fec3 	bl	80009d0 <__aeabi_dcmple>
 800cc4a:	b1a0      	cbz	r0, 800cc76 <_strtod_l+0xb6e>
 800cc4c:	4639      	mov	r1, r7
 800cc4e:	4628      	mov	r0, r5
 800cc50:	f7f3 ff1a 	bl	8000a88 <__aeabi_d2uiz>
 800cc54:	2801      	cmp	r0, #1
 800cc56:	bf38      	it	cc
 800cc58:	2001      	movcc	r0, #1
 800cc5a:	f7f3 fbc3 	bl	80003e4 <__aeabi_ui2d>
 800cc5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc60:	4605      	mov	r5, r0
 800cc62:	460f      	mov	r7, r1
 800cc64:	bb03      	cbnz	r3, 800cca8 <_strtod_l+0xba0>
 800cc66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc6a:	9014      	str	r0, [sp, #80]	; 0x50
 800cc6c:	9315      	str	r3, [sp, #84]	; 0x54
 800cc6e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cc72:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800cc76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cc7a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cc7e:	1a9b      	subs	r3, r3, r2
 800cc80:	9311      	str	r3, [sp, #68]	; 0x44
 800cc82:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cc86:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800cc8a:	f7ff f8e9 	bl	800be60 <__ulp>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	460b      	mov	r3, r1
 800cc92:	4640      	mov	r0, r8
 800cc94:	4649      	mov	r1, r9
 800cc96:	f7f3 fc1f 	bl	80004d8 <__aeabi_dmul>
 800cc9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc9e:	f7f3 fa65 	bl	800016c <__adddf3>
 800cca2:	4680      	mov	r8, r0
 800cca4:	4689      	mov	r9, r1
 800cca6:	e774      	b.n	800cb92 <_strtod_l+0xa8a>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ccb0:	e7dd      	b.n	800cc6e <_strtod_l+0xb66>
 800ccb2:	a30d      	add	r3, pc, #52	; (adr r3, 800cce8 <_strtod_l+0xbe0>)
 800ccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb8:	f7f3 fe80 	bl	80009bc <__aeabi_dcmplt>
 800ccbc:	e79b      	b.n	800cbf6 <_strtod_l+0xaee>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	930e      	str	r3, [sp, #56]	; 0x38
 800ccc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ccc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	f7ff ba5b 	b.w	800c182 <_strtod_l+0x7a>
 800cccc:	2a65      	cmp	r2, #101	; 0x65
 800ccce:	f43f ab52 	beq.w	800c376 <_strtod_l+0x26e>
 800ccd2:	2a45      	cmp	r2, #69	; 0x45
 800ccd4:	f43f ab4f 	beq.w	800c376 <_strtod_l+0x26e>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	f7ff bb87 	b.w	800c3ec <_strtod_l+0x2e4>
 800ccde:	bf00      	nop
 800cce0:	ffc00000 	.word	0xffc00000
 800cce4:	41dfffff 	.word	0x41dfffff
 800cce8:	94a03595 	.word	0x94a03595
 800ccec:	3fcfffff 	.word	0x3fcfffff

0800ccf0 <_strtod_r>:
 800ccf0:	4b01      	ldr	r3, [pc, #4]	; (800ccf8 <_strtod_r+0x8>)
 800ccf2:	f7ff ba09 	b.w	800c108 <_strtod_l>
 800ccf6:	bf00      	nop
 800ccf8:	2000006c 	.word	0x2000006c

0800ccfc <_strtol_l.constprop.0>:
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd02:	4686      	mov	lr, r0
 800cd04:	4690      	mov	r8, r2
 800cd06:	d001      	beq.n	800cd0c <_strtol_l.constprop.0+0x10>
 800cd08:	2b24      	cmp	r3, #36	; 0x24
 800cd0a:	d906      	bls.n	800cd1a <_strtol_l.constprop.0+0x1e>
 800cd0c:	f7fd fd84 	bl	800a818 <__errno>
 800cd10:	2316      	movs	r3, #22
 800cd12:	6003      	str	r3, [r0, #0]
 800cd14:	2000      	movs	r0, #0
 800cd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd1a:	460d      	mov	r5, r1
 800cd1c:	4835      	ldr	r0, [pc, #212]	; (800cdf4 <_strtol_l.constprop.0+0xf8>)
 800cd1e:	462a      	mov	r2, r5
 800cd20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd24:	5d06      	ldrb	r6, [r0, r4]
 800cd26:	f016 0608 	ands.w	r6, r6, #8
 800cd2a:	d1f8      	bne.n	800cd1e <_strtol_l.constprop.0+0x22>
 800cd2c:	2c2d      	cmp	r4, #45	; 0x2d
 800cd2e:	d12e      	bne.n	800cd8e <_strtol_l.constprop.0+0x92>
 800cd30:	2601      	movs	r6, #1
 800cd32:	782c      	ldrb	r4, [r5, #0]
 800cd34:	1c95      	adds	r5, r2, #2
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d057      	beq.n	800cdea <_strtol_l.constprop.0+0xee>
 800cd3a:	2b10      	cmp	r3, #16
 800cd3c:	d109      	bne.n	800cd52 <_strtol_l.constprop.0+0x56>
 800cd3e:	2c30      	cmp	r4, #48	; 0x30
 800cd40:	d107      	bne.n	800cd52 <_strtol_l.constprop.0+0x56>
 800cd42:	782a      	ldrb	r2, [r5, #0]
 800cd44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800cd48:	2a58      	cmp	r2, #88	; 0x58
 800cd4a:	d149      	bne.n	800cde0 <_strtol_l.constprop.0+0xe4>
 800cd4c:	2310      	movs	r3, #16
 800cd4e:	786c      	ldrb	r4, [r5, #1]
 800cd50:	3502      	adds	r5, #2
 800cd52:	2200      	movs	r2, #0
 800cd54:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800cd58:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cd5c:	fbbc f9f3 	udiv	r9, ip, r3
 800cd60:	4610      	mov	r0, r2
 800cd62:	fb03 ca19 	mls	sl, r3, r9, ip
 800cd66:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800cd6a:	2f09      	cmp	r7, #9
 800cd6c:	d814      	bhi.n	800cd98 <_strtol_l.constprop.0+0x9c>
 800cd6e:	463c      	mov	r4, r7
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	dd20      	ble.n	800cdb6 <_strtol_l.constprop.0+0xba>
 800cd74:	1c57      	adds	r7, r2, #1
 800cd76:	d007      	beq.n	800cd88 <_strtol_l.constprop.0+0x8c>
 800cd78:	4581      	cmp	r9, r0
 800cd7a:	d319      	bcc.n	800cdb0 <_strtol_l.constprop.0+0xb4>
 800cd7c:	d101      	bne.n	800cd82 <_strtol_l.constprop.0+0x86>
 800cd7e:	45a2      	cmp	sl, r4
 800cd80:	db16      	blt.n	800cdb0 <_strtol_l.constprop.0+0xb4>
 800cd82:	2201      	movs	r2, #1
 800cd84:	fb00 4003 	mla	r0, r0, r3, r4
 800cd88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd8c:	e7eb      	b.n	800cd66 <_strtol_l.constprop.0+0x6a>
 800cd8e:	2c2b      	cmp	r4, #43	; 0x2b
 800cd90:	bf04      	itt	eq
 800cd92:	782c      	ldrbeq	r4, [r5, #0]
 800cd94:	1c95      	addeq	r5, r2, #2
 800cd96:	e7ce      	b.n	800cd36 <_strtol_l.constprop.0+0x3a>
 800cd98:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800cd9c:	2f19      	cmp	r7, #25
 800cd9e:	d801      	bhi.n	800cda4 <_strtol_l.constprop.0+0xa8>
 800cda0:	3c37      	subs	r4, #55	; 0x37
 800cda2:	e7e5      	b.n	800cd70 <_strtol_l.constprop.0+0x74>
 800cda4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800cda8:	2f19      	cmp	r7, #25
 800cdaa:	d804      	bhi.n	800cdb6 <_strtol_l.constprop.0+0xba>
 800cdac:	3c57      	subs	r4, #87	; 0x57
 800cdae:	e7df      	b.n	800cd70 <_strtol_l.constprop.0+0x74>
 800cdb0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb4:	e7e8      	b.n	800cd88 <_strtol_l.constprop.0+0x8c>
 800cdb6:	1c53      	adds	r3, r2, #1
 800cdb8:	d108      	bne.n	800cdcc <_strtol_l.constprop.0+0xd0>
 800cdba:	2322      	movs	r3, #34	; 0x22
 800cdbc:	4660      	mov	r0, ip
 800cdbe:	f8ce 3000 	str.w	r3, [lr]
 800cdc2:	f1b8 0f00 	cmp.w	r8, #0
 800cdc6:	d0a6      	beq.n	800cd16 <_strtol_l.constprop.0+0x1a>
 800cdc8:	1e69      	subs	r1, r5, #1
 800cdca:	e006      	b.n	800cdda <_strtol_l.constprop.0+0xde>
 800cdcc:	b106      	cbz	r6, 800cdd0 <_strtol_l.constprop.0+0xd4>
 800cdce:	4240      	negs	r0, r0
 800cdd0:	f1b8 0f00 	cmp.w	r8, #0
 800cdd4:	d09f      	beq.n	800cd16 <_strtol_l.constprop.0+0x1a>
 800cdd6:	2a00      	cmp	r2, #0
 800cdd8:	d1f6      	bne.n	800cdc8 <_strtol_l.constprop.0+0xcc>
 800cdda:	f8c8 1000 	str.w	r1, [r8]
 800cdde:	e79a      	b.n	800cd16 <_strtol_l.constprop.0+0x1a>
 800cde0:	2430      	movs	r4, #48	; 0x30
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1b5      	bne.n	800cd52 <_strtol_l.constprop.0+0x56>
 800cde6:	2308      	movs	r3, #8
 800cde8:	e7b3      	b.n	800cd52 <_strtol_l.constprop.0+0x56>
 800cdea:	2c30      	cmp	r4, #48	; 0x30
 800cdec:	d0a9      	beq.n	800cd42 <_strtol_l.constprop.0+0x46>
 800cdee:	230a      	movs	r3, #10
 800cdf0:	e7af      	b.n	800cd52 <_strtol_l.constprop.0+0x56>
 800cdf2:	bf00      	nop
 800cdf4:	0800e301 	.word	0x0800e301

0800cdf8 <_strtol_r>:
 800cdf8:	f7ff bf80 	b.w	800ccfc <_strtol_l.constprop.0>

0800cdfc <__ssputs_r>:
 800cdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce00:	461f      	mov	r7, r3
 800ce02:	688e      	ldr	r6, [r1, #8]
 800ce04:	4682      	mov	sl, r0
 800ce06:	42be      	cmp	r6, r7
 800ce08:	460c      	mov	r4, r1
 800ce0a:	4690      	mov	r8, r2
 800ce0c:	680b      	ldr	r3, [r1, #0]
 800ce0e:	d82c      	bhi.n	800ce6a <__ssputs_r+0x6e>
 800ce10:	898a      	ldrh	r2, [r1, #12]
 800ce12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce16:	d026      	beq.n	800ce66 <__ssputs_r+0x6a>
 800ce18:	6965      	ldr	r5, [r4, #20]
 800ce1a:	6909      	ldr	r1, [r1, #16]
 800ce1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce20:	eba3 0901 	sub.w	r9, r3, r1
 800ce24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce28:	1c7b      	adds	r3, r7, #1
 800ce2a:	444b      	add	r3, r9
 800ce2c:	106d      	asrs	r5, r5, #1
 800ce2e:	429d      	cmp	r5, r3
 800ce30:	bf38      	it	cc
 800ce32:	461d      	movcc	r5, r3
 800ce34:	0553      	lsls	r3, r2, #21
 800ce36:	d527      	bpl.n	800ce88 <__ssputs_r+0x8c>
 800ce38:	4629      	mov	r1, r5
 800ce3a:	f7fe fc19 	bl	800b670 <_malloc_r>
 800ce3e:	4606      	mov	r6, r0
 800ce40:	b360      	cbz	r0, 800ce9c <__ssputs_r+0xa0>
 800ce42:	464a      	mov	r2, r9
 800ce44:	6921      	ldr	r1, [r4, #16]
 800ce46:	f7fd fd22 	bl	800a88e <memcpy>
 800ce4a:	89a3      	ldrh	r3, [r4, #12]
 800ce4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce54:	81a3      	strh	r3, [r4, #12]
 800ce56:	6126      	str	r6, [r4, #16]
 800ce58:	444e      	add	r6, r9
 800ce5a:	6026      	str	r6, [r4, #0]
 800ce5c:	463e      	mov	r6, r7
 800ce5e:	6165      	str	r5, [r4, #20]
 800ce60:	eba5 0509 	sub.w	r5, r5, r9
 800ce64:	60a5      	str	r5, [r4, #8]
 800ce66:	42be      	cmp	r6, r7
 800ce68:	d900      	bls.n	800ce6c <__ssputs_r+0x70>
 800ce6a:	463e      	mov	r6, r7
 800ce6c:	4632      	mov	r2, r6
 800ce6e:	4641      	mov	r1, r8
 800ce70:	6820      	ldr	r0, [r4, #0]
 800ce72:	f000 fb68 	bl	800d546 <memmove>
 800ce76:	2000      	movs	r0, #0
 800ce78:	68a3      	ldr	r3, [r4, #8]
 800ce7a:	1b9b      	subs	r3, r3, r6
 800ce7c:	60a3      	str	r3, [r4, #8]
 800ce7e:	6823      	ldr	r3, [r4, #0]
 800ce80:	4433      	add	r3, r6
 800ce82:	6023      	str	r3, [r4, #0]
 800ce84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce88:	462a      	mov	r2, r5
 800ce8a:	f000 ff5e 	bl	800dd4a <_realloc_r>
 800ce8e:	4606      	mov	r6, r0
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d1e0      	bne.n	800ce56 <__ssputs_r+0x5a>
 800ce94:	4650      	mov	r0, sl
 800ce96:	6921      	ldr	r1, [r4, #16]
 800ce98:	f7fe fb7a 	bl	800b590 <_free_r>
 800ce9c:	230c      	movs	r3, #12
 800ce9e:	f8ca 3000 	str.w	r3, [sl]
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	f04f 30ff 	mov.w	r0, #4294967295
 800cea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceac:	81a3      	strh	r3, [r4, #12]
 800ceae:	e7e9      	b.n	800ce84 <__ssputs_r+0x88>

0800ceb0 <_svfiprintf_r>:
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	4698      	mov	r8, r3
 800ceb6:	898b      	ldrh	r3, [r1, #12]
 800ceb8:	4607      	mov	r7, r0
 800ceba:	061b      	lsls	r3, r3, #24
 800cebc:	460d      	mov	r5, r1
 800cebe:	4614      	mov	r4, r2
 800cec0:	b09d      	sub	sp, #116	; 0x74
 800cec2:	d50e      	bpl.n	800cee2 <_svfiprintf_r+0x32>
 800cec4:	690b      	ldr	r3, [r1, #16]
 800cec6:	b963      	cbnz	r3, 800cee2 <_svfiprintf_r+0x32>
 800cec8:	2140      	movs	r1, #64	; 0x40
 800ceca:	f7fe fbd1 	bl	800b670 <_malloc_r>
 800cece:	6028      	str	r0, [r5, #0]
 800ced0:	6128      	str	r0, [r5, #16]
 800ced2:	b920      	cbnz	r0, 800cede <_svfiprintf_r+0x2e>
 800ced4:	230c      	movs	r3, #12
 800ced6:	603b      	str	r3, [r7, #0]
 800ced8:	f04f 30ff 	mov.w	r0, #4294967295
 800cedc:	e0d0      	b.n	800d080 <_svfiprintf_r+0x1d0>
 800cede:	2340      	movs	r3, #64	; 0x40
 800cee0:	616b      	str	r3, [r5, #20]
 800cee2:	2300      	movs	r3, #0
 800cee4:	9309      	str	r3, [sp, #36]	; 0x24
 800cee6:	2320      	movs	r3, #32
 800cee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ceec:	2330      	movs	r3, #48	; 0x30
 800ceee:	f04f 0901 	mov.w	r9, #1
 800cef2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cef6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d098 <_svfiprintf_r+0x1e8>
 800cefa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cefe:	4623      	mov	r3, r4
 800cf00:	469a      	mov	sl, r3
 800cf02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf06:	b10a      	cbz	r2, 800cf0c <_svfiprintf_r+0x5c>
 800cf08:	2a25      	cmp	r2, #37	; 0x25
 800cf0a:	d1f9      	bne.n	800cf00 <_svfiprintf_r+0x50>
 800cf0c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf10:	d00b      	beq.n	800cf2a <_svfiprintf_r+0x7a>
 800cf12:	465b      	mov	r3, fp
 800cf14:	4622      	mov	r2, r4
 800cf16:	4629      	mov	r1, r5
 800cf18:	4638      	mov	r0, r7
 800cf1a:	f7ff ff6f 	bl	800cdfc <__ssputs_r>
 800cf1e:	3001      	adds	r0, #1
 800cf20:	f000 80a9 	beq.w	800d076 <_svfiprintf_r+0x1c6>
 800cf24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf26:	445a      	add	r2, fp
 800cf28:	9209      	str	r2, [sp, #36]	; 0x24
 800cf2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 80a1 	beq.w	800d076 <_svfiprintf_r+0x1c6>
 800cf34:	2300      	movs	r3, #0
 800cf36:	f04f 32ff 	mov.w	r2, #4294967295
 800cf3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf3e:	f10a 0a01 	add.w	sl, sl, #1
 800cf42:	9304      	str	r3, [sp, #16]
 800cf44:	9307      	str	r3, [sp, #28]
 800cf46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf4a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf4c:	4654      	mov	r4, sl
 800cf4e:	2205      	movs	r2, #5
 800cf50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf54:	4850      	ldr	r0, [pc, #320]	; (800d098 <_svfiprintf_r+0x1e8>)
 800cf56:	f7fd fc8c 	bl	800a872 <memchr>
 800cf5a:	9a04      	ldr	r2, [sp, #16]
 800cf5c:	b9d8      	cbnz	r0, 800cf96 <_svfiprintf_r+0xe6>
 800cf5e:	06d0      	lsls	r0, r2, #27
 800cf60:	bf44      	itt	mi
 800cf62:	2320      	movmi	r3, #32
 800cf64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf68:	0711      	lsls	r1, r2, #28
 800cf6a:	bf44      	itt	mi
 800cf6c:	232b      	movmi	r3, #43	; 0x2b
 800cf6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf72:	f89a 3000 	ldrb.w	r3, [sl]
 800cf76:	2b2a      	cmp	r3, #42	; 0x2a
 800cf78:	d015      	beq.n	800cfa6 <_svfiprintf_r+0xf6>
 800cf7a:	4654      	mov	r4, sl
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	f04f 0c0a 	mov.w	ip, #10
 800cf82:	9a07      	ldr	r2, [sp, #28]
 800cf84:	4621      	mov	r1, r4
 800cf86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf8a:	3b30      	subs	r3, #48	; 0x30
 800cf8c:	2b09      	cmp	r3, #9
 800cf8e:	d94d      	bls.n	800d02c <_svfiprintf_r+0x17c>
 800cf90:	b1b0      	cbz	r0, 800cfc0 <_svfiprintf_r+0x110>
 800cf92:	9207      	str	r2, [sp, #28]
 800cf94:	e014      	b.n	800cfc0 <_svfiprintf_r+0x110>
 800cf96:	eba0 0308 	sub.w	r3, r0, r8
 800cf9a:	fa09 f303 	lsl.w	r3, r9, r3
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	46a2      	mov	sl, r4
 800cfa2:	9304      	str	r3, [sp, #16]
 800cfa4:	e7d2      	b.n	800cf4c <_svfiprintf_r+0x9c>
 800cfa6:	9b03      	ldr	r3, [sp, #12]
 800cfa8:	1d19      	adds	r1, r3, #4
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	9103      	str	r1, [sp, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	bfbb      	ittet	lt
 800cfb2:	425b      	neglt	r3, r3
 800cfb4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfb8:	9307      	strge	r3, [sp, #28]
 800cfba:	9307      	strlt	r3, [sp, #28]
 800cfbc:	bfb8      	it	lt
 800cfbe:	9204      	strlt	r2, [sp, #16]
 800cfc0:	7823      	ldrb	r3, [r4, #0]
 800cfc2:	2b2e      	cmp	r3, #46	; 0x2e
 800cfc4:	d10c      	bne.n	800cfe0 <_svfiprintf_r+0x130>
 800cfc6:	7863      	ldrb	r3, [r4, #1]
 800cfc8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfca:	d134      	bne.n	800d036 <_svfiprintf_r+0x186>
 800cfcc:	9b03      	ldr	r3, [sp, #12]
 800cfce:	3402      	adds	r4, #2
 800cfd0:	1d1a      	adds	r2, r3, #4
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	9203      	str	r2, [sp, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	bfb8      	it	lt
 800cfda:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfde:	9305      	str	r3, [sp, #20]
 800cfe0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d09c <_svfiprintf_r+0x1ec>
 800cfe4:	2203      	movs	r2, #3
 800cfe6:	4650      	mov	r0, sl
 800cfe8:	7821      	ldrb	r1, [r4, #0]
 800cfea:	f7fd fc42 	bl	800a872 <memchr>
 800cfee:	b138      	cbz	r0, 800d000 <_svfiprintf_r+0x150>
 800cff0:	2240      	movs	r2, #64	; 0x40
 800cff2:	9b04      	ldr	r3, [sp, #16]
 800cff4:	eba0 000a 	sub.w	r0, r0, sl
 800cff8:	4082      	lsls	r2, r0
 800cffa:	4313      	orrs	r3, r2
 800cffc:	3401      	adds	r4, #1
 800cffe:	9304      	str	r3, [sp, #16]
 800d000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d004:	2206      	movs	r2, #6
 800d006:	4826      	ldr	r0, [pc, #152]	; (800d0a0 <_svfiprintf_r+0x1f0>)
 800d008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d00c:	f7fd fc31 	bl	800a872 <memchr>
 800d010:	2800      	cmp	r0, #0
 800d012:	d038      	beq.n	800d086 <_svfiprintf_r+0x1d6>
 800d014:	4b23      	ldr	r3, [pc, #140]	; (800d0a4 <_svfiprintf_r+0x1f4>)
 800d016:	bb1b      	cbnz	r3, 800d060 <_svfiprintf_r+0x1b0>
 800d018:	9b03      	ldr	r3, [sp, #12]
 800d01a:	3307      	adds	r3, #7
 800d01c:	f023 0307 	bic.w	r3, r3, #7
 800d020:	3308      	adds	r3, #8
 800d022:	9303      	str	r3, [sp, #12]
 800d024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d026:	4433      	add	r3, r6
 800d028:	9309      	str	r3, [sp, #36]	; 0x24
 800d02a:	e768      	b.n	800cefe <_svfiprintf_r+0x4e>
 800d02c:	460c      	mov	r4, r1
 800d02e:	2001      	movs	r0, #1
 800d030:	fb0c 3202 	mla	r2, ip, r2, r3
 800d034:	e7a6      	b.n	800cf84 <_svfiprintf_r+0xd4>
 800d036:	2300      	movs	r3, #0
 800d038:	f04f 0c0a 	mov.w	ip, #10
 800d03c:	4619      	mov	r1, r3
 800d03e:	3401      	adds	r4, #1
 800d040:	9305      	str	r3, [sp, #20]
 800d042:	4620      	mov	r0, r4
 800d044:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d048:	3a30      	subs	r2, #48	; 0x30
 800d04a:	2a09      	cmp	r2, #9
 800d04c:	d903      	bls.n	800d056 <_svfiprintf_r+0x1a6>
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0c6      	beq.n	800cfe0 <_svfiprintf_r+0x130>
 800d052:	9105      	str	r1, [sp, #20]
 800d054:	e7c4      	b.n	800cfe0 <_svfiprintf_r+0x130>
 800d056:	4604      	mov	r4, r0
 800d058:	2301      	movs	r3, #1
 800d05a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d05e:	e7f0      	b.n	800d042 <_svfiprintf_r+0x192>
 800d060:	ab03      	add	r3, sp, #12
 800d062:	9300      	str	r3, [sp, #0]
 800d064:	462a      	mov	r2, r5
 800d066:	4638      	mov	r0, r7
 800d068:	4b0f      	ldr	r3, [pc, #60]	; (800d0a8 <_svfiprintf_r+0x1f8>)
 800d06a:	a904      	add	r1, sp, #16
 800d06c:	f7fc fb8a 	bl	8009784 <_printf_float>
 800d070:	1c42      	adds	r2, r0, #1
 800d072:	4606      	mov	r6, r0
 800d074:	d1d6      	bne.n	800d024 <_svfiprintf_r+0x174>
 800d076:	89ab      	ldrh	r3, [r5, #12]
 800d078:	065b      	lsls	r3, r3, #25
 800d07a:	f53f af2d 	bmi.w	800ced8 <_svfiprintf_r+0x28>
 800d07e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d080:	b01d      	add	sp, #116	; 0x74
 800d082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d086:	ab03      	add	r3, sp, #12
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	462a      	mov	r2, r5
 800d08c:	4638      	mov	r0, r7
 800d08e:	4b06      	ldr	r3, [pc, #24]	; (800d0a8 <_svfiprintf_r+0x1f8>)
 800d090:	a904      	add	r1, sp, #16
 800d092:	f7fc fe17 	bl	8009cc4 <_printf_i>
 800d096:	e7eb      	b.n	800d070 <_svfiprintf_r+0x1c0>
 800d098:	0800e401 	.word	0x0800e401
 800d09c:	0800e407 	.word	0x0800e407
 800d0a0:	0800e40b 	.word	0x0800e40b
 800d0a4:	08009785 	.word	0x08009785
 800d0a8:	0800cdfd 	.word	0x0800cdfd

0800d0ac <__sfputc_r>:
 800d0ac:	6893      	ldr	r3, [r2, #8]
 800d0ae:	b410      	push	{r4}
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	6093      	str	r3, [r2, #8]
 800d0b6:	da07      	bge.n	800d0c8 <__sfputc_r+0x1c>
 800d0b8:	6994      	ldr	r4, [r2, #24]
 800d0ba:	42a3      	cmp	r3, r4
 800d0bc:	db01      	blt.n	800d0c2 <__sfputc_r+0x16>
 800d0be:	290a      	cmp	r1, #10
 800d0c0:	d102      	bne.n	800d0c8 <__sfputc_r+0x1c>
 800d0c2:	bc10      	pop	{r4}
 800d0c4:	f7fd bac1 	b.w	800a64a <__swbuf_r>
 800d0c8:	6813      	ldr	r3, [r2, #0]
 800d0ca:	1c58      	adds	r0, r3, #1
 800d0cc:	6010      	str	r0, [r2, #0]
 800d0ce:	7019      	strb	r1, [r3, #0]
 800d0d0:	4608      	mov	r0, r1
 800d0d2:	bc10      	pop	{r4}
 800d0d4:	4770      	bx	lr

0800d0d6 <__sfputs_r>:
 800d0d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d8:	4606      	mov	r6, r0
 800d0da:	460f      	mov	r7, r1
 800d0dc:	4614      	mov	r4, r2
 800d0de:	18d5      	adds	r5, r2, r3
 800d0e0:	42ac      	cmp	r4, r5
 800d0e2:	d101      	bne.n	800d0e8 <__sfputs_r+0x12>
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	e007      	b.n	800d0f8 <__sfputs_r+0x22>
 800d0e8:	463a      	mov	r2, r7
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f0:	f7ff ffdc 	bl	800d0ac <__sfputc_r>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	d1f3      	bne.n	800d0e0 <__sfputs_r+0xa>
 800d0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0fc <_vfiprintf_r>:
 800d0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d100:	460d      	mov	r5, r1
 800d102:	4614      	mov	r4, r2
 800d104:	4698      	mov	r8, r3
 800d106:	4606      	mov	r6, r0
 800d108:	b09d      	sub	sp, #116	; 0x74
 800d10a:	b118      	cbz	r0, 800d114 <_vfiprintf_r+0x18>
 800d10c:	6a03      	ldr	r3, [r0, #32]
 800d10e:	b90b      	cbnz	r3, 800d114 <_vfiprintf_r+0x18>
 800d110:	f7fd f994 	bl	800a43c <__sinit>
 800d114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d116:	07d9      	lsls	r1, r3, #31
 800d118:	d405      	bmi.n	800d126 <_vfiprintf_r+0x2a>
 800d11a:	89ab      	ldrh	r3, [r5, #12]
 800d11c:	059a      	lsls	r2, r3, #22
 800d11e:	d402      	bmi.n	800d126 <_vfiprintf_r+0x2a>
 800d120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d122:	f7fd fba4 	bl	800a86e <__retarget_lock_acquire_recursive>
 800d126:	89ab      	ldrh	r3, [r5, #12]
 800d128:	071b      	lsls	r3, r3, #28
 800d12a:	d501      	bpl.n	800d130 <_vfiprintf_r+0x34>
 800d12c:	692b      	ldr	r3, [r5, #16]
 800d12e:	b99b      	cbnz	r3, 800d158 <_vfiprintf_r+0x5c>
 800d130:	4629      	mov	r1, r5
 800d132:	4630      	mov	r0, r6
 800d134:	f7fd fac6 	bl	800a6c4 <__swsetup_r>
 800d138:	b170      	cbz	r0, 800d158 <_vfiprintf_r+0x5c>
 800d13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d13c:	07dc      	lsls	r4, r3, #31
 800d13e:	d504      	bpl.n	800d14a <_vfiprintf_r+0x4e>
 800d140:	f04f 30ff 	mov.w	r0, #4294967295
 800d144:	b01d      	add	sp, #116	; 0x74
 800d146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d14a:	89ab      	ldrh	r3, [r5, #12]
 800d14c:	0598      	lsls	r0, r3, #22
 800d14e:	d4f7      	bmi.n	800d140 <_vfiprintf_r+0x44>
 800d150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d152:	f7fd fb8d 	bl	800a870 <__retarget_lock_release_recursive>
 800d156:	e7f3      	b.n	800d140 <_vfiprintf_r+0x44>
 800d158:	2300      	movs	r3, #0
 800d15a:	9309      	str	r3, [sp, #36]	; 0x24
 800d15c:	2320      	movs	r3, #32
 800d15e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d162:	2330      	movs	r3, #48	; 0x30
 800d164:	f04f 0901 	mov.w	r9, #1
 800d168:	f8cd 800c 	str.w	r8, [sp, #12]
 800d16c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d31c <_vfiprintf_r+0x220>
 800d170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d174:	4623      	mov	r3, r4
 800d176:	469a      	mov	sl, r3
 800d178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d17c:	b10a      	cbz	r2, 800d182 <_vfiprintf_r+0x86>
 800d17e:	2a25      	cmp	r2, #37	; 0x25
 800d180:	d1f9      	bne.n	800d176 <_vfiprintf_r+0x7a>
 800d182:	ebba 0b04 	subs.w	fp, sl, r4
 800d186:	d00b      	beq.n	800d1a0 <_vfiprintf_r+0xa4>
 800d188:	465b      	mov	r3, fp
 800d18a:	4622      	mov	r2, r4
 800d18c:	4629      	mov	r1, r5
 800d18e:	4630      	mov	r0, r6
 800d190:	f7ff ffa1 	bl	800d0d6 <__sfputs_r>
 800d194:	3001      	adds	r0, #1
 800d196:	f000 80a9 	beq.w	800d2ec <_vfiprintf_r+0x1f0>
 800d19a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d19c:	445a      	add	r2, fp
 800d19e:	9209      	str	r2, [sp, #36]	; 0x24
 800d1a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f000 80a1 	beq.w	800d2ec <_vfiprintf_r+0x1f0>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1b4:	f10a 0a01 	add.w	sl, sl, #1
 800d1b8:	9304      	str	r3, [sp, #16]
 800d1ba:	9307      	str	r3, [sp, #28]
 800d1bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1c0:	931a      	str	r3, [sp, #104]	; 0x68
 800d1c2:	4654      	mov	r4, sl
 800d1c4:	2205      	movs	r2, #5
 800d1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ca:	4854      	ldr	r0, [pc, #336]	; (800d31c <_vfiprintf_r+0x220>)
 800d1cc:	f7fd fb51 	bl	800a872 <memchr>
 800d1d0:	9a04      	ldr	r2, [sp, #16]
 800d1d2:	b9d8      	cbnz	r0, 800d20c <_vfiprintf_r+0x110>
 800d1d4:	06d1      	lsls	r1, r2, #27
 800d1d6:	bf44      	itt	mi
 800d1d8:	2320      	movmi	r3, #32
 800d1da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1de:	0713      	lsls	r3, r2, #28
 800d1e0:	bf44      	itt	mi
 800d1e2:	232b      	movmi	r3, #43	; 0x2b
 800d1e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ec:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ee:	d015      	beq.n	800d21c <_vfiprintf_r+0x120>
 800d1f0:	4654      	mov	r4, sl
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	f04f 0c0a 	mov.w	ip, #10
 800d1f8:	9a07      	ldr	r2, [sp, #28]
 800d1fa:	4621      	mov	r1, r4
 800d1fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d200:	3b30      	subs	r3, #48	; 0x30
 800d202:	2b09      	cmp	r3, #9
 800d204:	d94d      	bls.n	800d2a2 <_vfiprintf_r+0x1a6>
 800d206:	b1b0      	cbz	r0, 800d236 <_vfiprintf_r+0x13a>
 800d208:	9207      	str	r2, [sp, #28]
 800d20a:	e014      	b.n	800d236 <_vfiprintf_r+0x13a>
 800d20c:	eba0 0308 	sub.w	r3, r0, r8
 800d210:	fa09 f303 	lsl.w	r3, r9, r3
 800d214:	4313      	orrs	r3, r2
 800d216:	46a2      	mov	sl, r4
 800d218:	9304      	str	r3, [sp, #16]
 800d21a:	e7d2      	b.n	800d1c2 <_vfiprintf_r+0xc6>
 800d21c:	9b03      	ldr	r3, [sp, #12]
 800d21e:	1d19      	adds	r1, r3, #4
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	9103      	str	r1, [sp, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	bfbb      	ittet	lt
 800d228:	425b      	neglt	r3, r3
 800d22a:	f042 0202 	orrlt.w	r2, r2, #2
 800d22e:	9307      	strge	r3, [sp, #28]
 800d230:	9307      	strlt	r3, [sp, #28]
 800d232:	bfb8      	it	lt
 800d234:	9204      	strlt	r2, [sp, #16]
 800d236:	7823      	ldrb	r3, [r4, #0]
 800d238:	2b2e      	cmp	r3, #46	; 0x2e
 800d23a:	d10c      	bne.n	800d256 <_vfiprintf_r+0x15a>
 800d23c:	7863      	ldrb	r3, [r4, #1]
 800d23e:	2b2a      	cmp	r3, #42	; 0x2a
 800d240:	d134      	bne.n	800d2ac <_vfiprintf_r+0x1b0>
 800d242:	9b03      	ldr	r3, [sp, #12]
 800d244:	3402      	adds	r4, #2
 800d246:	1d1a      	adds	r2, r3, #4
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	9203      	str	r2, [sp, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	bfb8      	it	lt
 800d250:	f04f 33ff 	movlt.w	r3, #4294967295
 800d254:	9305      	str	r3, [sp, #20]
 800d256:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d320 <_vfiprintf_r+0x224>
 800d25a:	2203      	movs	r2, #3
 800d25c:	4650      	mov	r0, sl
 800d25e:	7821      	ldrb	r1, [r4, #0]
 800d260:	f7fd fb07 	bl	800a872 <memchr>
 800d264:	b138      	cbz	r0, 800d276 <_vfiprintf_r+0x17a>
 800d266:	2240      	movs	r2, #64	; 0x40
 800d268:	9b04      	ldr	r3, [sp, #16]
 800d26a:	eba0 000a 	sub.w	r0, r0, sl
 800d26e:	4082      	lsls	r2, r0
 800d270:	4313      	orrs	r3, r2
 800d272:	3401      	adds	r4, #1
 800d274:	9304      	str	r3, [sp, #16]
 800d276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d27a:	2206      	movs	r2, #6
 800d27c:	4829      	ldr	r0, [pc, #164]	; (800d324 <_vfiprintf_r+0x228>)
 800d27e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d282:	f7fd faf6 	bl	800a872 <memchr>
 800d286:	2800      	cmp	r0, #0
 800d288:	d03f      	beq.n	800d30a <_vfiprintf_r+0x20e>
 800d28a:	4b27      	ldr	r3, [pc, #156]	; (800d328 <_vfiprintf_r+0x22c>)
 800d28c:	bb1b      	cbnz	r3, 800d2d6 <_vfiprintf_r+0x1da>
 800d28e:	9b03      	ldr	r3, [sp, #12]
 800d290:	3307      	adds	r3, #7
 800d292:	f023 0307 	bic.w	r3, r3, #7
 800d296:	3308      	adds	r3, #8
 800d298:	9303      	str	r3, [sp, #12]
 800d29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d29c:	443b      	add	r3, r7
 800d29e:	9309      	str	r3, [sp, #36]	; 0x24
 800d2a0:	e768      	b.n	800d174 <_vfiprintf_r+0x78>
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	2001      	movs	r0, #1
 800d2a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2aa:	e7a6      	b.n	800d1fa <_vfiprintf_r+0xfe>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	f04f 0c0a 	mov.w	ip, #10
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	3401      	adds	r4, #1
 800d2b6:	9305      	str	r3, [sp, #20]
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2be:	3a30      	subs	r2, #48	; 0x30
 800d2c0:	2a09      	cmp	r2, #9
 800d2c2:	d903      	bls.n	800d2cc <_vfiprintf_r+0x1d0>
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d0c6      	beq.n	800d256 <_vfiprintf_r+0x15a>
 800d2c8:	9105      	str	r1, [sp, #20]
 800d2ca:	e7c4      	b.n	800d256 <_vfiprintf_r+0x15a>
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2d4:	e7f0      	b.n	800d2b8 <_vfiprintf_r+0x1bc>
 800d2d6:	ab03      	add	r3, sp, #12
 800d2d8:	9300      	str	r3, [sp, #0]
 800d2da:	462a      	mov	r2, r5
 800d2dc:	4630      	mov	r0, r6
 800d2de:	4b13      	ldr	r3, [pc, #76]	; (800d32c <_vfiprintf_r+0x230>)
 800d2e0:	a904      	add	r1, sp, #16
 800d2e2:	f7fc fa4f 	bl	8009784 <_printf_float>
 800d2e6:	4607      	mov	r7, r0
 800d2e8:	1c78      	adds	r0, r7, #1
 800d2ea:	d1d6      	bne.n	800d29a <_vfiprintf_r+0x19e>
 800d2ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2ee:	07d9      	lsls	r1, r3, #31
 800d2f0:	d405      	bmi.n	800d2fe <_vfiprintf_r+0x202>
 800d2f2:	89ab      	ldrh	r3, [r5, #12]
 800d2f4:	059a      	lsls	r2, r3, #22
 800d2f6:	d402      	bmi.n	800d2fe <_vfiprintf_r+0x202>
 800d2f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2fa:	f7fd fab9 	bl	800a870 <__retarget_lock_release_recursive>
 800d2fe:	89ab      	ldrh	r3, [r5, #12]
 800d300:	065b      	lsls	r3, r3, #25
 800d302:	f53f af1d 	bmi.w	800d140 <_vfiprintf_r+0x44>
 800d306:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d308:	e71c      	b.n	800d144 <_vfiprintf_r+0x48>
 800d30a:	ab03      	add	r3, sp, #12
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	462a      	mov	r2, r5
 800d310:	4630      	mov	r0, r6
 800d312:	4b06      	ldr	r3, [pc, #24]	; (800d32c <_vfiprintf_r+0x230>)
 800d314:	a904      	add	r1, sp, #16
 800d316:	f7fc fcd5 	bl	8009cc4 <_printf_i>
 800d31a:	e7e4      	b.n	800d2e6 <_vfiprintf_r+0x1ea>
 800d31c:	0800e401 	.word	0x0800e401
 800d320:	0800e407 	.word	0x0800e407
 800d324:	0800e40b 	.word	0x0800e40b
 800d328:	08009785 	.word	0x08009785
 800d32c:	0800d0d7 	.word	0x0800d0d7

0800d330 <__sflush_r>:
 800d330:	898a      	ldrh	r2, [r1, #12]
 800d332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d334:	4605      	mov	r5, r0
 800d336:	0710      	lsls	r0, r2, #28
 800d338:	460c      	mov	r4, r1
 800d33a:	d457      	bmi.n	800d3ec <__sflush_r+0xbc>
 800d33c:	684b      	ldr	r3, [r1, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	dc04      	bgt.n	800d34c <__sflush_r+0x1c>
 800d342:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d344:	2b00      	cmp	r3, #0
 800d346:	dc01      	bgt.n	800d34c <__sflush_r+0x1c>
 800d348:	2000      	movs	r0, #0
 800d34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d34c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d34e:	2e00      	cmp	r6, #0
 800d350:	d0fa      	beq.n	800d348 <__sflush_r+0x18>
 800d352:	2300      	movs	r3, #0
 800d354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d358:	682f      	ldr	r7, [r5, #0]
 800d35a:	6a21      	ldr	r1, [r4, #32]
 800d35c:	602b      	str	r3, [r5, #0]
 800d35e:	d032      	beq.n	800d3c6 <__sflush_r+0x96>
 800d360:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d362:	89a3      	ldrh	r3, [r4, #12]
 800d364:	075a      	lsls	r2, r3, #29
 800d366:	d505      	bpl.n	800d374 <__sflush_r+0x44>
 800d368:	6863      	ldr	r3, [r4, #4]
 800d36a:	1ac0      	subs	r0, r0, r3
 800d36c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d36e:	b10b      	cbz	r3, 800d374 <__sflush_r+0x44>
 800d370:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d372:	1ac0      	subs	r0, r0, r3
 800d374:	2300      	movs	r3, #0
 800d376:	4602      	mov	r2, r0
 800d378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d37a:	4628      	mov	r0, r5
 800d37c:	6a21      	ldr	r1, [r4, #32]
 800d37e:	47b0      	blx	r6
 800d380:	1c43      	adds	r3, r0, #1
 800d382:	89a3      	ldrh	r3, [r4, #12]
 800d384:	d106      	bne.n	800d394 <__sflush_r+0x64>
 800d386:	6829      	ldr	r1, [r5, #0]
 800d388:	291d      	cmp	r1, #29
 800d38a:	d82b      	bhi.n	800d3e4 <__sflush_r+0xb4>
 800d38c:	4a28      	ldr	r2, [pc, #160]	; (800d430 <__sflush_r+0x100>)
 800d38e:	410a      	asrs	r2, r1
 800d390:	07d6      	lsls	r6, r2, #31
 800d392:	d427      	bmi.n	800d3e4 <__sflush_r+0xb4>
 800d394:	2200      	movs	r2, #0
 800d396:	6062      	str	r2, [r4, #4]
 800d398:	6922      	ldr	r2, [r4, #16]
 800d39a:	04d9      	lsls	r1, r3, #19
 800d39c:	6022      	str	r2, [r4, #0]
 800d39e:	d504      	bpl.n	800d3aa <__sflush_r+0x7a>
 800d3a0:	1c42      	adds	r2, r0, #1
 800d3a2:	d101      	bne.n	800d3a8 <__sflush_r+0x78>
 800d3a4:	682b      	ldr	r3, [r5, #0]
 800d3a6:	b903      	cbnz	r3, 800d3aa <__sflush_r+0x7a>
 800d3a8:	6560      	str	r0, [r4, #84]	; 0x54
 800d3aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3ac:	602f      	str	r7, [r5, #0]
 800d3ae:	2900      	cmp	r1, #0
 800d3b0:	d0ca      	beq.n	800d348 <__sflush_r+0x18>
 800d3b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3b6:	4299      	cmp	r1, r3
 800d3b8:	d002      	beq.n	800d3c0 <__sflush_r+0x90>
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	f7fe f8e8 	bl	800b590 <_free_r>
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	6360      	str	r0, [r4, #52]	; 0x34
 800d3c4:	e7c1      	b.n	800d34a <__sflush_r+0x1a>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	47b0      	blx	r6
 800d3cc:	1c41      	adds	r1, r0, #1
 800d3ce:	d1c8      	bne.n	800d362 <__sflush_r+0x32>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d0c5      	beq.n	800d362 <__sflush_r+0x32>
 800d3d6:	2b1d      	cmp	r3, #29
 800d3d8:	d001      	beq.n	800d3de <__sflush_r+0xae>
 800d3da:	2b16      	cmp	r3, #22
 800d3dc:	d101      	bne.n	800d3e2 <__sflush_r+0xb2>
 800d3de:	602f      	str	r7, [r5, #0]
 800d3e0:	e7b2      	b.n	800d348 <__sflush_r+0x18>
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e8:	81a3      	strh	r3, [r4, #12]
 800d3ea:	e7ae      	b.n	800d34a <__sflush_r+0x1a>
 800d3ec:	690f      	ldr	r7, [r1, #16]
 800d3ee:	2f00      	cmp	r7, #0
 800d3f0:	d0aa      	beq.n	800d348 <__sflush_r+0x18>
 800d3f2:	0793      	lsls	r3, r2, #30
 800d3f4:	bf18      	it	ne
 800d3f6:	2300      	movne	r3, #0
 800d3f8:	680e      	ldr	r6, [r1, #0]
 800d3fa:	bf08      	it	eq
 800d3fc:	694b      	ldreq	r3, [r1, #20]
 800d3fe:	1bf6      	subs	r6, r6, r7
 800d400:	600f      	str	r7, [r1, #0]
 800d402:	608b      	str	r3, [r1, #8]
 800d404:	2e00      	cmp	r6, #0
 800d406:	dd9f      	ble.n	800d348 <__sflush_r+0x18>
 800d408:	4633      	mov	r3, r6
 800d40a:	463a      	mov	r2, r7
 800d40c:	4628      	mov	r0, r5
 800d40e:	6a21      	ldr	r1, [r4, #32]
 800d410:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d414:	47e0      	blx	ip
 800d416:	2800      	cmp	r0, #0
 800d418:	dc06      	bgt.n	800d428 <__sflush_r+0xf8>
 800d41a:	89a3      	ldrh	r3, [r4, #12]
 800d41c:	f04f 30ff 	mov.w	r0, #4294967295
 800d420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d424:	81a3      	strh	r3, [r4, #12]
 800d426:	e790      	b.n	800d34a <__sflush_r+0x1a>
 800d428:	4407      	add	r7, r0
 800d42a:	1a36      	subs	r6, r6, r0
 800d42c:	e7ea      	b.n	800d404 <__sflush_r+0xd4>
 800d42e:	bf00      	nop
 800d430:	dfbffffe 	.word	0xdfbffffe

0800d434 <_fflush_r>:
 800d434:	b538      	push	{r3, r4, r5, lr}
 800d436:	690b      	ldr	r3, [r1, #16]
 800d438:	4605      	mov	r5, r0
 800d43a:	460c      	mov	r4, r1
 800d43c:	b913      	cbnz	r3, 800d444 <_fflush_r+0x10>
 800d43e:	2500      	movs	r5, #0
 800d440:	4628      	mov	r0, r5
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	b118      	cbz	r0, 800d44e <_fflush_r+0x1a>
 800d446:	6a03      	ldr	r3, [r0, #32]
 800d448:	b90b      	cbnz	r3, 800d44e <_fflush_r+0x1a>
 800d44a:	f7fc fff7 	bl	800a43c <__sinit>
 800d44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d0f3      	beq.n	800d43e <_fflush_r+0xa>
 800d456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d458:	07d0      	lsls	r0, r2, #31
 800d45a:	d404      	bmi.n	800d466 <_fflush_r+0x32>
 800d45c:	0599      	lsls	r1, r3, #22
 800d45e:	d402      	bmi.n	800d466 <_fflush_r+0x32>
 800d460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d462:	f7fd fa04 	bl	800a86e <__retarget_lock_acquire_recursive>
 800d466:	4628      	mov	r0, r5
 800d468:	4621      	mov	r1, r4
 800d46a:	f7ff ff61 	bl	800d330 <__sflush_r>
 800d46e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d470:	4605      	mov	r5, r0
 800d472:	07da      	lsls	r2, r3, #31
 800d474:	d4e4      	bmi.n	800d440 <_fflush_r+0xc>
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	059b      	lsls	r3, r3, #22
 800d47a:	d4e1      	bmi.n	800d440 <_fflush_r+0xc>
 800d47c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d47e:	f7fd f9f7 	bl	800a870 <__retarget_lock_release_recursive>
 800d482:	e7dd      	b.n	800d440 <_fflush_r+0xc>

0800d484 <__swhatbuf_r>:
 800d484:	b570      	push	{r4, r5, r6, lr}
 800d486:	460c      	mov	r4, r1
 800d488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d48c:	4615      	mov	r5, r2
 800d48e:	2900      	cmp	r1, #0
 800d490:	461e      	mov	r6, r3
 800d492:	b096      	sub	sp, #88	; 0x58
 800d494:	da0c      	bge.n	800d4b0 <__swhatbuf_r+0x2c>
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	2100      	movs	r1, #0
 800d49a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d49e:	bf0c      	ite	eq
 800d4a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d4a4:	2340      	movne	r3, #64	; 0x40
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	6031      	str	r1, [r6, #0]
 800d4aa:	602b      	str	r3, [r5, #0]
 800d4ac:	b016      	add	sp, #88	; 0x58
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	466a      	mov	r2, sp
 800d4b2:	f000 f875 	bl	800d5a0 <_fstat_r>
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	dbed      	blt.n	800d496 <__swhatbuf_r+0x12>
 800d4ba:	9901      	ldr	r1, [sp, #4]
 800d4bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d4c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d4c4:	4259      	negs	r1, r3
 800d4c6:	4159      	adcs	r1, r3
 800d4c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4cc:	e7eb      	b.n	800d4a6 <__swhatbuf_r+0x22>

0800d4ce <__smakebuf_r>:
 800d4ce:	898b      	ldrh	r3, [r1, #12]
 800d4d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4d2:	079d      	lsls	r5, r3, #30
 800d4d4:	4606      	mov	r6, r0
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	d507      	bpl.n	800d4ea <__smakebuf_r+0x1c>
 800d4da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4de:	6023      	str	r3, [r4, #0]
 800d4e0:	6123      	str	r3, [r4, #16]
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	6163      	str	r3, [r4, #20]
 800d4e6:	b002      	add	sp, #8
 800d4e8:	bd70      	pop	{r4, r5, r6, pc}
 800d4ea:	466a      	mov	r2, sp
 800d4ec:	ab01      	add	r3, sp, #4
 800d4ee:	f7ff ffc9 	bl	800d484 <__swhatbuf_r>
 800d4f2:	9900      	ldr	r1, [sp, #0]
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	f7fe f8ba 	bl	800b670 <_malloc_r>
 800d4fc:	b948      	cbnz	r0, 800d512 <__smakebuf_r+0x44>
 800d4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d502:	059a      	lsls	r2, r3, #22
 800d504:	d4ef      	bmi.n	800d4e6 <__smakebuf_r+0x18>
 800d506:	f023 0303 	bic.w	r3, r3, #3
 800d50a:	f043 0302 	orr.w	r3, r3, #2
 800d50e:	81a3      	strh	r3, [r4, #12]
 800d510:	e7e3      	b.n	800d4da <__smakebuf_r+0xc>
 800d512:	89a3      	ldrh	r3, [r4, #12]
 800d514:	6020      	str	r0, [r4, #0]
 800d516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d51a:	81a3      	strh	r3, [r4, #12]
 800d51c:	9b00      	ldr	r3, [sp, #0]
 800d51e:	6120      	str	r0, [r4, #16]
 800d520:	6163      	str	r3, [r4, #20]
 800d522:	9b01      	ldr	r3, [sp, #4]
 800d524:	b15b      	cbz	r3, 800d53e <__smakebuf_r+0x70>
 800d526:	4630      	mov	r0, r6
 800d528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d52c:	f000 f84a 	bl	800d5c4 <_isatty_r>
 800d530:	b128      	cbz	r0, 800d53e <__smakebuf_r+0x70>
 800d532:	89a3      	ldrh	r3, [r4, #12]
 800d534:	f023 0303 	bic.w	r3, r3, #3
 800d538:	f043 0301 	orr.w	r3, r3, #1
 800d53c:	81a3      	strh	r3, [r4, #12]
 800d53e:	89a3      	ldrh	r3, [r4, #12]
 800d540:	431d      	orrs	r5, r3
 800d542:	81a5      	strh	r5, [r4, #12]
 800d544:	e7cf      	b.n	800d4e6 <__smakebuf_r+0x18>

0800d546 <memmove>:
 800d546:	4288      	cmp	r0, r1
 800d548:	b510      	push	{r4, lr}
 800d54a:	eb01 0402 	add.w	r4, r1, r2
 800d54e:	d902      	bls.n	800d556 <memmove+0x10>
 800d550:	4284      	cmp	r4, r0
 800d552:	4623      	mov	r3, r4
 800d554:	d807      	bhi.n	800d566 <memmove+0x20>
 800d556:	1e43      	subs	r3, r0, #1
 800d558:	42a1      	cmp	r1, r4
 800d55a:	d008      	beq.n	800d56e <memmove+0x28>
 800d55c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d560:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d564:	e7f8      	b.n	800d558 <memmove+0x12>
 800d566:	4601      	mov	r1, r0
 800d568:	4402      	add	r2, r0
 800d56a:	428a      	cmp	r2, r1
 800d56c:	d100      	bne.n	800d570 <memmove+0x2a>
 800d56e:	bd10      	pop	{r4, pc}
 800d570:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d574:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d578:	e7f7      	b.n	800d56a <memmove+0x24>

0800d57a <strncmp>:
 800d57a:	b510      	push	{r4, lr}
 800d57c:	b16a      	cbz	r2, 800d59a <strncmp+0x20>
 800d57e:	3901      	subs	r1, #1
 800d580:	1884      	adds	r4, r0, r2
 800d582:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d586:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d103      	bne.n	800d596 <strncmp+0x1c>
 800d58e:	42a0      	cmp	r0, r4
 800d590:	d001      	beq.n	800d596 <strncmp+0x1c>
 800d592:	2a00      	cmp	r2, #0
 800d594:	d1f5      	bne.n	800d582 <strncmp+0x8>
 800d596:	1ad0      	subs	r0, r2, r3
 800d598:	bd10      	pop	{r4, pc}
 800d59a:	4610      	mov	r0, r2
 800d59c:	e7fc      	b.n	800d598 <strncmp+0x1e>
	...

0800d5a0 <_fstat_r>:
 800d5a0:	b538      	push	{r3, r4, r5, lr}
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	4d06      	ldr	r5, [pc, #24]	; (800d5c0 <_fstat_r+0x20>)
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	4608      	mov	r0, r1
 800d5aa:	4611      	mov	r1, r2
 800d5ac:	602b      	str	r3, [r5, #0]
 800d5ae:	f7f5 ff1a 	bl	80033e6 <_fstat>
 800d5b2:	1c43      	adds	r3, r0, #1
 800d5b4:	d102      	bne.n	800d5bc <_fstat_r+0x1c>
 800d5b6:	682b      	ldr	r3, [r5, #0]
 800d5b8:	b103      	cbz	r3, 800d5bc <_fstat_r+0x1c>
 800d5ba:	6023      	str	r3, [r4, #0]
 800d5bc:	bd38      	pop	{r3, r4, r5, pc}
 800d5be:	bf00      	nop
 800d5c0:	20001e84 	.word	0x20001e84

0800d5c4 <_isatty_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	4d05      	ldr	r5, [pc, #20]	; (800d5e0 <_isatty_r+0x1c>)
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	602b      	str	r3, [r5, #0]
 800d5d0:	f7f5 ff18 	bl	8003404 <_isatty>
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d102      	bne.n	800d5de <_isatty_r+0x1a>
 800d5d8:	682b      	ldr	r3, [r5, #0]
 800d5da:	b103      	cbz	r3, 800d5de <_isatty_r+0x1a>
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	bd38      	pop	{r3, r4, r5, pc}
 800d5e0:	20001e84 	.word	0x20001e84

0800d5e4 <_sbrk_r>:
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	4d05      	ldr	r5, [pc, #20]	; (800d600 <_sbrk_r+0x1c>)
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	4608      	mov	r0, r1
 800d5ee:	602b      	str	r3, [r5, #0]
 800d5f0:	f7f5 ff1e 	bl	8003430 <_sbrk>
 800d5f4:	1c43      	adds	r3, r0, #1
 800d5f6:	d102      	bne.n	800d5fe <_sbrk_r+0x1a>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	b103      	cbz	r3, 800d5fe <_sbrk_r+0x1a>
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}
 800d600:	20001e84 	.word	0x20001e84

0800d604 <nan>:
 800d604:	2000      	movs	r0, #0
 800d606:	4901      	ldr	r1, [pc, #4]	; (800d60c <nan+0x8>)
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop
 800d60c:	7ff80000 	.word	0x7ff80000

0800d610 <__assert_func>:
 800d610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d612:	4614      	mov	r4, r2
 800d614:	461a      	mov	r2, r3
 800d616:	4b09      	ldr	r3, [pc, #36]	; (800d63c <__assert_func+0x2c>)
 800d618:	4605      	mov	r5, r0
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	68d8      	ldr	r0, [r3, #12]
 800d61e:	b14c      	cbz	r4, 800d634 <__assert_func+0x24>
 800d620:	4b07      	ldr	r3, [pc, #28]	; (800d640 <__assert_func+0x30>)
 800d622:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d626:	9100      	str	r1, [sp, #0]
 800d628:	462b      	mov	r3, r5
 800d62a:	4906      	ldr	r1, [pc, #24]	; (800d644 <__assert_func+0x34>)
 800d62c:	f000 fbca 	bl	800ddc4 <fiprintf>
 800d630:	f000 fbda 	bl	800dde8 <abort>
 800d634:	4b04      	ldr	r3, [pc, #16]	; (800d648 <__assert_func+0x38>)
 800d636:	461c      	mov	r4, r3
 800d638:	e7f3      	b.n	800d622 <__assert_func+0x12>
 800d63a:	bf00      	nop
 800d63c:	20000068 	.word	0x20000068
 800d640:	0800e41a 	.word	0x0800e41a
 800d644:	0800e427 	.word	0x0800e427
 800d648:	0800e455 	.word	0x0800e455

0800d64c <_calloc_r>:
 800d64c:	b570      	push	{r4, r5, r6, lr}
 800d64e:	fba1 5402 	umull	r5, r4, r1, r2
 800d652:	b934      	cbnz	r4, 800d662 <_calloc_r+0x16>
 800d654:	4629      	mov	r1, r5
 800d656:	f7fe f80b 	bl	800b670 <_malloc_r>
 800d65a:	4606      	mov	r6, r0
 800d65c:	b928      	cbnz	r0, 800d66a <_calloc_r+0x1e>
 800d65e:	4630      	mov	r0, r6
 800d660:	bd70      	pop	{r4, r5, r6, pc}
 800d662:	220c      	movs	r2, #12
 800d664:	2600      	movs	r6, #0
 800d666:	6002      	str	r2, [r0, #0]
 800d668:	e7f9      	b.n	800d65e <_calloc_r+0x12>
 800d66a:	462a      	mov	r2, r5
 800d66c:	4621      	mov	r1, r4
 800d66e:	f7fd f881 	bl	800a774 <memset>
 800d672:	e7f4      	b.n	800d65e <_calloc_r+0x12>

0800d674 <rshift>:
 800d674:	6903      	ldr	r3, [r0, #16]
 800d676:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d67a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d67e:	f100 0414 	add.w	r4, r0, #20
 800d682:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d686:	dd46      	ble.n	800d716 <rshift+0xa2>
 800d688:	f011 011f 	ands.w	r1, r1, #31
 800d68c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d690:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d694:	d10c      	bne.n	800d6b0 <rshift+0x3c>
 800d696:	4629      	mov	r1, r5
 800d698:	f100 0710 	add.w	r7, r0, #16
 800d69c:	42b1      	cmp	r1, r6
 800d69e:	d335      	bcc.n	800d70c <rshift+0x98>
 800d6a0:	1a9b      	subs	r3, r3, r2
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	1eea      	subs	r2, r5, #3
 800d6a6:	4296      	cmp	r6, r2
 800d6a8:	bf38      	it	cc
 800d6aa:	2300      	movcc	r3, #0
 800d6ac:	4423      	add	r3, r4
 800d6ae:	e015      	b.n	800d6dc <rshift+0x68>
 800d6b0:	46a1      	mov	r9, r4
 800d6b2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d6b6:	f1c1 0820 	rsb	r8, r1, #32
 800d6ba:	40cf      	lsrs	r7, r1
 800d6bc:	f105 0e04 	add.w	lr, r5, #4
 800d6c0:	4576      	cmp	r6, lr
 800d6c2:	46f4      	mov	ip, lr
 800d6c4:	d816      	bhi.n	800d6f4 <rshift+0x80>
 800d6c6:	1a9a      	subs	r2, r3, r2
 800d6c8:	0092      	lsls	r2, r2, #2
 800d6ca:	3a04      	subs	r2, #4
 800d6cc:	3501      	adds	r5, #1
 800d6ce:	42ae      	cmp	r6, r5
 800d6d0:	bf38      	it	cc
 800d6d2:	2200      	movcc	r2, #0
 800d6d4:	18a3      	adds	r3, r4, r2
 800d6d6:	50a7      	str	r7, [r4, r2]
 800d6d8:	b107      	cbz	r7, 800d6dc <rshift+0x68>
 800d6da:	3304      	adds	r3, #4
 800d6dc:	42a3      	cmp	r3, r4
 800d6de:	eba3 0204 	sub.w	r2, r3, r4
 800d6e2:	bf08      	it	eq
 800d6e4:	2300      	moveq	r3, #0
 800d6e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d6ea:	6102      	str	r2, [r0, #16]
 800d6ec:	bf08      	it	eq
 800d6ee:	6143      	streq	r3, [r0, #20]
 800d6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6f4:	f8dc c000 	ldr.w	ip, [ip]
 800d6f8:	fa0c fc08 	lsl.w	ip, ip, r8
 800d6fc:	ea4c 0707 	orr.w	r7, ip, r7
 800d700:	f849 7b04 	str.w	r7, [r9], #4
 800d704:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d708:	40cf      	lsrs	r7, r1
 800d70a:	e7d9      	b.n	800d6c0 <rshift+0x4c>
 800d70c:	f851 cb04 	ldr.w	ip, [r1], #4
 800d710:	f847 cf04 	str.w	ip, [r7, #4]!
 800d714:	e7c2      	b.n	800d69c <rshift+0x28>
 800d716:	4623      	mov	r3, r4
 800d718:	e7e0      	b.n	800d6dc <rshift+0x68>

0800d71a <__hexdig_fun>:
 800d71a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d71e:	2b09      	cmp	r3, #9
 800d720:	d802      	bhi.n	800d728 <__hexdig_fun+0xe>
 800d722:	3820      	subs	r0, #32
 800d724:	b2c0      	uxtb	r0, r0
 800d726:	4770      	bx	lr
 800d728:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d72c:	2b05      	cmp	r3, #5
 800d72e:	d801      	bhi.n	800d734 <__hexdig_fun+0x1a>
 800d730:	3847      	subs	r0, #71	; 0x47
 800d732:	e7f7      	b.n	800d724 <__hexdig_fun+0xa>
 800d734:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d738:	2b05      	cmp	r3, #5
 800d73a:	d801      	bhi.n	800d740 <__hexdig_fun+0x26>
 800d73c:	3827      	subs	r0, #39	; 0x27
 800d73e:	e7f1      	b.n	800d724 <__hexdig_fun+0xa>
 800d740:	2000      	movs	r0, #0
 800d742:	4770      	bx	lr

0800d744 <__gethex>:
 800d744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d748:	4681      	mov	r9, r0
 800d74a:	468a      	mov	sl, r1
 800d74c:	4617      	mov	r7, r2
 800d74e:	680a      	ldr	r2, [r1, #0]
 800d750:	b085      	sub	sp, #20
 800d752:	f102 0b02 	add.w	fp, r2, #2
 800d756:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d75a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d75e:	9302      	str	r3, [sp, #8]
 800d760:	32fe      	adds	r2, #254	; 0xfe
 800d762:	eb02 030b 	add.w	r3, r2, fp
 800d766:	46d8      	mov	r8, fp
 800d768:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d76c:	9301      	str	r3, [sp, #4]
 800d76e:	2830      	cmp	r0, #48	; 0x30
 800d770:	d0f7      	beq.n	800d762 <__gethex+0x1e>
 800d772:	f7ff ffd2 	bl	800d71a <__hexdig_fun>
 800d776:	4604      	mov	r4, r0
 800d778:	2800      	cmp	r0, #0
 800d77a:	d138      	bne.n	800d7ee <__gethex+0xaa>
 800d77c:	2201      	movs	r2, #1
 800d77e:	4640      	mov	r0, r8
 800d780:	49a7      	ldr	r1, [pc, #668]	; (800da20 <__gethex+0x2dc>)
 800d782:	f7ff fefa 	bl	800d57a <strncmp>
 800d786:	4606      	mov	r6, r0
 800d788:	2800      	cmp	r0, #0
 800d78a:	d169      	bne.n	800d860 <__gethex+0x11c>
 800d78c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d790:	465d      	mov	r5, fp
 800d792:	f7ff ffc2 	bl	800d71a <__hexdig_fun>
 800d796:	2800      	cmp	r0, #0
 800d798:	d064      	beq.n	800d864 <__gethex+0x120>
 800d79a:	465a      	mov	r2, fp
 800d79c:	7810      	ldrb	r0, [r2, #0]
 800d79e:	4690      	mov	r8, r2
 800d7a0:	2830      	cmp	r0, #48	; 0x30
 800d7a2:	f102 0201 	add.w	r2, r2, #1
 800d7a6:	d0f9      	beq.n	800d79c <__gethex+0x58>
 800d7a8:	f7ff ffb7 	bl	800d71a <__hexdig_fun>
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	fab0 f480 	clz	r4, r0
 800d7b2:	465e      	mov	r6, fp
 800d7b4:	0964      	lsrs	r4, r4, #5
 800d7b6:	9301      	str	r3, [sp, #4]
 800d7b8:	4642      	mov	r2, r8
 800d7ba:	4615      	mov	r5, r2
 800d7bc:	7828      	ldrb	r0, [r5, #0]
 800d7be:	3201      	adds	r2, #1
 800d7c0:	f7ff ffab 	bl	800d71a <__hexdig_fun>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d1f8      	bne.n	800d7ba <__gethex+0x76>
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	4994      	ldr	r1, [pc, #592]	; (800da20 <__gethex+0x2dc>)
 800d7ce:	f7ff fed4 	bl	800d57a <strncmp>
 800d7d2:	b978      	cbnz	r0, 800d7f4 <__gethex+0xb0>
 800d7d4:	b946      	cbnz	r6, 800d7e8 <__gethex+0xa4>
 800d7d6:	1c6e      	adds	r6, r5, #1
 800d7d8:	4632      	mov	r2, r6
 800d7da:	4615      	mov	r5, r2
 800d7dc:	7828      	ldrb	r0, [r5, #0]
 800d7de:	3201      	adds	r2, #1
 800d7e0:	f7ff ff9b 	bl	800d71a <__hexdig_fun>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	d1f8      	bne.n	800d7da <__gethex+0x96>
 800d7e8:	1b73      	subs	r3, r6, r5
 800d7ea:	009e      	lsls	r6, r3, #2
 800d7ec:	e004      	b.n	800d7f8 <__gethex+0xb4>
 800d7ee:	2400      	movs	r4, #0
 800d7f0:	4626      	mov	r6, r4
 800d7f2:	e7e1      	b.n	800d7b8 <__gethex+0x74>
 800d7f4:	2e00      	cmp	r6, #0
 800d7f6:	d1f7      	bne.n	800d7e8 <__gethex+0xa4>
 800d7f8:	782b      	ldrb	r3, [r5, #0]
 800d7fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d7fe:	2b50      	cmp	r3, #80	; 0x50
 800d800:	d13d      	bne.n	800d87e <__gethex+0x13a>
 800d802:	786b      	ldrb	r3, [r5, #1]
 800d804:	2b2b      	cmp	r3, #43	; 0x2b
 800d806:	d02f      	beq.n	800d868 <__gethex+0x124>
 800d808:	2b2d      	cmp	r3, #45	; 0x2d
 800d80a:	d031      	beq.n	800d870 <__gethex+0x12c>
 800d80c:	f04f 0b00 	mov.w	fp, #0
 800d810:	1c69      	adds	r1, r5, #1
 800d812:	7808      	ldrb	r0, [r1, #0]
 800d814:	f7ff ff81 	bl	800d71a <__hexdig_fun>
 800d818:	1e42      	subs	r2, r0, #1
 800d81a:	b2d2      	uxtb	r2, r2
 800d81c:	2a18      	cmp	r2, #24
 800d81e:	d82e      	bhi.n	800d87e <__gethex+0x13a>
 800d820:	f1a0 0210 	sub.w	r2, r0, #16
 800d824:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d828:	f7ff ff77 	bl	800d71a <__hexdig_fun>
 800d82c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d830:	fa5f fc8c 	uxtb.w	ip, ip
 800d834:	f1bc 0f18 	cmp.w	ip, #24
 800d838:	d91d      	bls.n	800d876 <__gethex+0x132>
 800d83a:	f1bb 0f00 	cmp.w	fp, #0
 800d83e:	d000      	beq.n	800d842 <__gethex+0xfe>
 800d840:	4252      	negs	r2, r2
 800d842:	4416      	add	r6, r2
 800d844:	f8ca 1000 	str.w	r1, [sl]
 800d848:	b1dc      	cbz	r4, 800d882 <__gethex+0x13e>
 800d84a:	9b01      	ldr	r3, [sp, #4]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	bf14      	ite	ne
 800d850:	f04f 0800 	movne.w	r8, #0
 800d854:	f04f 0806 	moveq.w	r8, #6
 800d858:	4640      	mov	r0, r8
 800d85a:	b005      	add	sp, #20
 800d85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d860:	4645      	mov	r5, r8
 800d862:	4626      	mov	r6, r4
 800d864:	2401      	movs	r4, #1
 800d866:	e7c7      	b.n	800d7f8 <__gethex+0xb4>
 800d868:	f04f 0b00 	mov.w	fp, #0
 800d86c:	1ca9      	adds	r1, r5, #2
 800d86e:	e7d0      	b.n	800d812 <__gethex+0xce>
 800d870:	f04f 0b01 	mov.w	fp, #1
 800d874:	e7fa      	b.n	800d86c <__gethex+0x128>
 800d876:	230a      	movs	r3, #10
 800d878:	fb03 0002 	mla	r0, r3, r2, r0
 800d87c:	e7d0      	b.n	800d820 <__gethex+0xdc>
 800d87e:	4629      	mov	r1, r5
 800d880:	e7e0      	b.n	800d844 <__gethex+0x100>
 800d882:	4621      	mov	r1, r4
 800d884:	eba5 0308 	sub.w	r3, r5, r8
 800d888:	3b01      	subs	r3, #1
 800d88a:	2b07      	cmp	r3, #7
 800d88c:	dc0a      	bgt.n	800d8a4 <__gethex+0x160>
 800d88e:	4648      	mov	r0, r9
 800d890:	f7fd ff7a 	bl	800b788 <_Balloc>
 800d894:	4604      	mov	r4, r0
 800d896:	b940      	cbnz	r0, 800d8aa <__gethex+0x166>
 800d898:	4602      	mov	r2, r0
 800d89a:	21e4      	movs	r1, #228	; 0xe4
 800d89c:	4b61      	ldr	r3, [pc, #388]	; (800da24 <__gethex+0x2e0>)
 800d89e:	4862      	ldr	r0, [pc, #392]	; (800da28 <__gethex+0x2e4>)
 800d8a0:	f7ff feb6 	bl	800d610 <__assert_func>
 800d8a4:	3101      	adds	r1, #1
 800d8a6:	105b      	asrs	r3, r3, #1
 800d8a8:	e7ef      	b.n	800d88a <__gethex+0x146>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	469b      	mov	fp, r3
 800d8ae:	f100 0a14 	add.w	sl, r0, #20
 800d8b2:	f8cd a004 	str.w	sl, [sp, #4]
 800d8b6:	45a8      	cmp	r8, r5
 800d8b8:	d344      	bcc.n	800d944 <__gethex+0x200>
 800d8ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d8be:	4658      	mov	r0, fp
 800d8c0:	f848 bb04 	str.w	fp, [r8], #4
 800d8c4:	eba8 080a 	sub.w	r8, r8, sl
 800d8c8:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800d8cc:	6122      	str	r2, [r4, #16]
 800d8ce:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800d8d2:	f7fe f84b 	bl	800b96c <__hi0bits>
 800d8d6:	683d      	ldr	r5, [r7, #0]
 800d8d8:	eba8 0800 	sub.w	r8, r8, r0
 800d8dc:	45a8      	cmp	r8, r5
 800d8de:	dd59      	ble.n	800d994 <__gethex+0x250>
 800d8e0:	eba8 0805 	sub.w	r8, r8, r5
 800d8e4:	4641      	mov	r1, r8
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f7fe fbc9 	bl	800c07e <__any_on>
 800d8ec:	4683      	mov	fp, r0
 800d8ee:	b1b8      	cbz	r0, 800d920 <__gethex+0x1dc>
 800d8f0:	f04f 0b01 	mov.w	fp, #1
 800d8f4:	f108 33ff 	add.w	r3, r8, #4294967295
 800d8f8:	1159      	asrs	r1, r3, #5
 800d8fa:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d8fe:	f003 021f 	and.w	r2, r3, #31
 800d902:	fa0b f202 	lsl.w	r2, fp, r2
 800d906:	420a      	tst	r2, r1
 800d908:	d00a      	beq.n	800d920 <__gethex+0x1dc>
 800d90a:	455b      	cmp	r3, fp
 800d90c:	dd06      	ble.n	800d91c <__gethex+0x1d8>
 800d90e:	4620      	mov	r0, r4
 800d910:	f1a8 0102 	sub.w	r1, r8, #2
 800d914:	f7fe fbb3 	bl	800c07e <__any_on>
 800d918:	2800      	cmp	r0, #0
 800d91a:	d138      	bne.n	800d98e <__gethex+0x24a>
 800d91c:	f04f 0b02 	mov.w	fp, #2
 800d920:	4641      	mov	r1, r8
 800d922:	4620      	mov	r0, r4
 800d924:	f7ff fea6 	bl	800d674 <rshift>
 800d928:	4446      	add	r6, r8
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	42b3      	cmp	r3, r6
 800d92e:	da41      	bge.n	800d9b4 <__gethex+0x270>
 800d930:	4621      	mov	r1, r4
 800d932:	4648      	mov	r0, r9
 800d934:	f7fd ff68 	bl	800b808 <_Bfree>
 800d938:	2300      	movs	r3, #0
 800d93a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d93c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d940:	6013      	str	r3, [r2, #0]
 800d942:	e789      	b.n	800d858 <__gethex+0x114>
 800d944:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d948:	2a2e      	cmp	r2, #46	; 0x2e
 800d94a:	d014      	beq.n	800d976 <__gethex+0x232>
 800d94c:	2b20      	cmp	r3, #32
 800d94e:	d106      	bne.n	800d95e <__gethex+0x21a>
 800d950:	9b01      	ldr	r3, [sp, #4]
 800d952:	f843 bb04 	str.w	fp, [r3], #4
 800d956:	f04f 0b00 	mov.w	fp, #0
 800d95a:	9301      	str	r3, [sp, #4]
 800d95c:	465b      	mov	r3, fp
 800d95e:	7828      	ldrb	r0, [r5, #0]
 800d960:	9303      	str	r3, [sp, #12]
 800d962:	f7ff feda 	bl	800d71a <__hexdig_fun>
 800d966:	9b03      	ldr	r3, [sp, #12]
 800d968:	f000 000f 	and.w	r0, r0, #15
 800d96c:	4098      	lsls	r0, r3
 800d96e:	ea4b 0b00 	orr.w	fp, fp, r0
 800d972:	3304      	adds	r3, #4
 800d974:	e79f      	b.n	800d8b6 <__gethex+0x172>
 800d976:	45a8      	cmp	r8, r5
 800d978:	d8e8      	bhi.n	800d94c <__gethex+0x208>
 800d97a:	2201      	movs	r2, #1
 800d97c:	4628      	mov	r0, r5
 800d97e:	4928      	ldr	r1, [pc, #160]	; (800da20 <__gethex+0x2dc>)
 800d980:	9303      	str	r3, [sp, #12]
 800d982:	f7ff fdfa 	bl	800d57a <strncmp>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	2800      	cmp	r0, #0
 800d98a:	d1df      	bne.n	800d94c <__gethex+0x208>
 800d98c:	e793      	b.n	800d8b6 <__gethex+0x172>
 800d98e:	f04f 0b03 	mov.w	fp, #3
 800d992:	e7c5      	b.n	800d920 <__gethex+0x1dc>
 800d994:	da0b      	bge.n	800d9ae <__gethex+0x26a>
 800d996:	eba5 0808 	sub.w	r8, r5, r8
 800d99a:	4621      	mov	r1, r4
 800d99c:	4642      	mov	r2, r8
 800d99e:	4648      	mov	r0, r9
 800d9a0:	f7fe f94a 	bl	800bc38 <__lshift>
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	eba6 0608 	sub.w	r6, r6, r8
 800d9aa:	f100 0a14 	add.w	sl, r0, #20
 800d9ae:	f04f 0b00 	mov.w	fp, #0
 800d9b2:	e7ba      	b.n	800d92a <__gethex+0x1e6>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	42b3      	cmp	r3, r6
 800d9b8:	dd74      	ble.n	800daa4 <__gethex+0x360>
 800d9ba:	1b9e      	subs	r6, r3, r6
 800d9bc:	42b5      	cmp	r5, r6
 800d9be:	dc35      	bgt.n	800da2c <__gethex+0x2e8>
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	d023      	beq.n	800da0e <__gethex+0x2ca>
 800d9c6:	2b03      	cmp	r3, #3
 800d9c8:	d025      	beq.n	800da16 <__gethex+0x2d2>
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d115      	bne.n	800d9fa <__gethex+0x2b6>
 800d9ce:	42b5      	cmp	r5, r6
 800d9d0:	d113      	bne.n	800d9fa <__gethex+0x2b6>
 800d9d2:	2d01      	cmp	r5, #1
 800d9d4:	d10b      	bne.n	800d9ee <__gethex+0x2aa>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	9a02      	ldr	r2, [sp, #8]
 800d9da:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d9de:	6013      	str	r3, [r2, #0]
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	6123      	str	r3, [r4, #16]
 800d9e4:	f8ca 3000 	str.w	r3, [sl]
 800d9e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9ea:	601c      	str	r4, [r3, #0]
 800d9ec:	e734      	b.n	800d858 <__gethex+0x114>
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	1e69      	subs	r1, r5, #1
 800d9f2:	f7fe fb44 	bl	800c07e <__any_on>
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d1ed      	bne.n	800d9d6 <__gethex+0x292>
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	4648      	mov	r0, r9
 800d9fe:	f7fd ff03 	bl	800b808 <_Bfree>
 800da02:	2300      	movs	r3, #0
 800da04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da06:	f04f 0850 	mov.w	r8, #80	; 0x50
 800da0a:	6013      	str	r3, [r2, #0]
 800da0c:	e724      	b.n	800d858 <__gethex+0x114>
 800da0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1f2      	bne.n	800d9fa <__gethex+0x2b6>
 800da14:	e7df      	b.n	800d9d6 <__gethex+0x292>
 800da16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d1dc      	bne.n	800d9d6 <__gethex+0x292>
 800da1c:	e7ed      	b.n	800d9fa <__gethex+0x2b6>
 800da1e:	bf00      	nop
 800da20:	0800e2ac 	.word	0x0800e2ac
 800da24:	0800e13f 	.word	0x0800e13f
 800da28:	0800e456 	.word	0x0800e456
 800da2c:	f106 38ff 	add.w	r8, r6, #4294967295
 800da30:	f1bb 0f00 	cmp.w	fp, #0
 800da34:	d133      	bne.n	800da9e <__gethex+0x35a>
 800da36:	f1b8 0f00 	cmp.w	r8, #0
 800da3a:	d004      	beq.n	800da46 <__gethex+0x302>
 800da3c:	4641      	mov	r1, r8
 800da3e:	4620      	mov	r0, r4
 800da40:	f7fe fb1d 	bl	800c07e <__any_on>
 800da44:	4683      	mov	fp, r0
 800da46:	2301      	movs	r3, #1
 800da48:	ea4f 1268 	mov.w	r2, r8, asr #5
 800da4c:	f008 081f 	and.w	r8, r8, #31
 800da50:	fa03 f308 	lsl.w	r3, r3, r8
 800da54:	f04f 0802 	mov.w	r8, #2
 800da58:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da5c:	4631      	mov	r1, r6
 800da5e:	4213      	tst	r3, r2
 800da60:	4620      	mov	r0, r4
 800da62:	bf18      	it	ne
 800da64:	f04b 0b02 	orrne.w	fp, fp, #2
 800da68:	1bad      	subs	r5, r5, r6
 800da6a:	f7ff fe03 	bl	800d674 <rshift>
 800da6e:	687e      	ldr	r6, [r7, #4]
 800da70:	f1bb 0f00 	cmp.w	fp, #0
 800da74:	d04a      	beq.n	800db0c <__gethex+0x3c8>
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d016      	beq.n	800daaa <__gethex+0x366>
 800da7c:	2b03      	cmp	r3, #3
 800da7e:	d018      	beq.n	800dab2 <__gethex+0x36e>
 800da80:	2b01      	cmp	r3, #1
 800da82:	d109      	bne.n	800da98 <__gethex+0x354>
 800da84:	f01b 0f02 	tst.w	fp, #2
 800da88:	d006      	beq.n	800da98 <__gethex+0x354>
 800da8a:	f8da 3000 	ldr.w	r3, [sl]
 800da8e:	ea4b 0b03 	orr.w	fp, fp, r3
 800da92:	f01b 0f01 	tst.w	fp, #1
 800da96:	d10f      	bne.n	800dab8 <__gethex+0x374>
 800da98:	f048 0810 	orr.w	r8, r8, #16
 800da9c:	e036      	b.n	800db0c <__gethex+0x3c8>
 800da9e:	f04f 0b01 	mov.w	fp, #1
 800daa2:	e7d0      	b.n	800da46 <__gethex+0x302>
 800daa4:	f04f 0801 	mov.w	r8, #1
 800daa8:	e7e2      	b.n	800da70 <__gethex+0x32c>
 800daaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800daac:	f1c3 0301 	rsb	r3, r3, #1
 800dab0:	930f      	str	r3, [sp, #60]	; 0x3c
 800dab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d0ef      	beq.n	800da98 <__gethex+0x354>
 800dab8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dabc:	f104 0214 	add.w	r2, r4, #20
 800dac0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800dac4:	9301      	str	r3, [sp, #4]
 800dac6:	2300      	movs	r3, #0
 800dac8:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800dacc:	4694      	mov	ip, r2
 800dace:	f852 1b04 	ldr.w	r1, [r2], #4
 800dad2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800dad6:	d01e      	beq.n	800db16 <__gethex+0x3d2>
 800dad8:	3101      	adds	r1, #1
 800dada:	f8cc 1000 	str.w	r1, [ip]
 800dade:	f1b8 0f02 	cmp.w	r8, #2
 800dae2:	f104 0214 	add.w	r2, r4, #20
 800dae6:	d13d      	bne.n	800db64 <__gethex+0x420>
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	3b01      	subs	r3, #1
 800daec:	42ab      	cmp	r3, r5
 800daee:	d10b      	bne.n	800db08 <__gethex+0x3c4>
 800daf0:	2301      	movs	r3, #1
 800daf2:	1169      	asrs	r1, r5, #5
 800daf4:	f005 051f 	and.w	r5, r5, #31
 800daf8:	fa03 f505 	lsl.w	r5, r3, r5
 800dafc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db00:	421d      	tst	r5, r3
 800db02:	bf18      	it	ne
 800db04:	f04f 0801 	movne.w	r8, #1
 800db08:	f048 0820 	orr.w	r8, r8, #32
 800db0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db0e:	601c      	str	r4, [r3, #0]
 800db10:	9b02      	ldr	r3, [sp, #8]
 800db12:	601e      	str	r6, [r3, #0]
 800db14:	e6a0      	b.n	800d858 <__gethex+0x114>
 800db16:	4290      	cmp	r0, r2
 800db18:	f842 3c04 	str.w	r3, [r2, #-4]
 800db1c:	d8d6      	bhi.n	800dacc <__gethex+0x388>
 800db1e:	68a2      	ldr	r2, [r4, #8]
 800db20:	4593      	cmp	fp, r2
 800db22:	db17      	blt.n	800db54 <__gethex+0x410>
 800db24:	6861      	ldr	r1, [r4, #4]
 800db26:	4648      	mov	r0, r9
 800db28:	3101      	adds	r1, #1
 800db2a:	f7fd fe2d 	bl	800b788 <_Balloc>
 800db2e:	4682      	mov	sl, r0
 800db30:	b918      	cbnz	r0, 800db3a <__gethex+0x3f6>
 800db32:	4602      	mov	r2, r0
 800db34:	2184      	movs	r1, #132	; 0x84
 800db36:	4b1a      	ldr	r3, [pc, #104]	; (800dba0 <__gethex+0x45c>)
 800db38:	e6b1      	b.n	800d89e <__gethex+0x15a>
 800db3a:	6922      	ldr	r2, [r4, #16]
 800db3c:	f104 010c 	add.w	r1, r4, #12
 800db40:	3202      	adds	r2, #2
 800db42:	0092      	lsls	r2, r2, #2
 800db44:	300c      	adds	r0, #12
 800db46:	f7fc fea2 	bl	800a88e <memcpy>
 800db4a:	4621      	mov	r1, r4
 800db4c:	4648      	mov	r0, r9
 800db4e:	f7fd fe5b 	bl	800b808 <_Bfree>
 800db52:	4654      	mov	r4, sl
 800db54:	6922      	ldr	r2, [r4, #16]
 800db56:	1c51      	adds	r1, r2, #1
 800db58:	6121      	str	r1, [r4, #16]
 800db5a:	2101      	movs	r1, #1
 800db5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800db60:	6151      	str	r1, [r2, #20]
 800db62:	e7bc      	b.n	800dade <__gethex+0x39a>
 800db64:	6921      	ldr	r1, [r4, #16]
 800db66:	4559      	cmp	r1, fp
 800db68:	dd0b      	ble.n	800db82 <__gethex+0x43e>
 800db6a:	2101      	movs	r1, #1
 800db6c:	4620      	mov	r0, r4
 800db6e:	f7ff fd81 	bl	800d674 <rshift>
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	3601      	adds	r6, #1
 800db76:	42b3      	cmp	r3, r6
 800db78:	f6ff aeda 	blt.w	800d930 <__gethex+0x1ec>
 800db7c:	f04f 0801 	mov.w	r8, #1
 800db80:	e7c2      	b.n	800db08 <__gethex+0x3c4>
 800db82:	f015 051f 	ands.w	r5, r5, #31
 800db86:	d0f9      	beq.n	800db7c <__gethex+0x438>
 800db88:	9b01      	ldr	r3, [sp, #4]
 800db8a:	f1c5 0520 	rsb	r5, r5, #32
 800db8e:	441a      	add	r2, r3
 800db90:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800db94:	f7fd feea 	bl	800b96c <__hi0bits>
 800db98:	42a8      	cmp	r0, r5
 800db9a:	dbe6      	blt.n	800db6a <__gethex+0x426>
 800db9c:	e7ee      	b.n	800db7c <__gethex+0x438>
 800db9e:	bf00      	nop
 800dba0:	0800e13f 	.word	0x0800e13f

0800dba4 <L_shift>:
 800dba4:	f1c2 0208 	rsb	r2, r2, #8
 800dba8:	0092      	lsls	r2, r2, #2
 800dbaa:	b570      	push	{r4, r5, r6, lr}
 800dbac:	f1c2 0620 	rsb	r6, r2, #32
 800dbb0:	6843      	ldr	r3, [r0, #4]
 800dbb2:	6804      	ldr	r4, [r0, #0]
 800dbb4:	fa03 f506 	lsl.w	r5, r3, r6
 800dbb8:	432c      	orrs	r4, r5
 800dbba:	40d3      	lsrs	r3, r2
 800dbbc:	6004      	str	r4, [r0, #0]
 800dbbe:	f840 3f04 	str.w	r3, [r0, #4]!
 800dbc2:	4288      	cmp	r0, r1
 800dbc4:	d3f4      	bcc.n	800dbb0 <L_shift+0xc>
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}

0800dbc8 <__match>:
 800dbc8:	b530      	push	{r4, r5, lr}
 800dbca:	6803      	ldr	r3, [r0, #0]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbd2:	b914      	cbnz	r4, 800dbda <__match+0x12>
 800dbd4:	6003      	str	r3, [r0, #0]
 800dbd6:	2001      	movs	r0, #1
 800dbd8:	bd30      	pop	{r4, r5, pc}
 800dbda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbde:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dbe2:	2d19      	cmp	r5, #25
 800dbe4:	bf98      	it	ls
 800dbe6:	3220      	addls	r2, #32
 800dbe8:	42a2      	cmp	r2, r4
 800dbea:	d0f0      	beq.n	800dbce <__match+0x6>
 800dbec:	2000      	movs	r0, #0
 800dbee:	e7f3      	b.n	800dbd8 <__match+0x10>

0800dbf0 <__hexnan>:
 800dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	2500      	movs	r5, #0
 800dbf6:	680b      	ldr	r3, [r1, #0]
 800dbf8:	4682      	mov	sl, r0
 800dbfa:	115e      	asrs	r6, r3, #5
 800dbfc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dc00:	f013 031f 	ands.w	r3, r3, #31
 800dc04:	bf18      	it	ne
 800dc06:	3604      	addne	r6, #4
 800dc08:	1f37      	subs	r7, r6, #4
 800dc0a:	4690      	mov	r8, r2
 800dc0c:	46b9      	mov	r9, r7
 800dc0e:	463c      	mov	r4, r7
 800dc10:	46ab      	mov	fp, r5
 800dc12:	b087      	sub	sp, #28
 800dc14:	6801      	ldr	r1, [r0, #0]
 800dc16:	9301      	str	r3, [sp, #4]
 800dc18:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc1c:	9502      	str	r5, [sp, #8]
 800dc1e:	784a      	ldrb	r2, [r1, #1]
 800dc20:	1c4b      	adds	r3, r1, #1
 800dc22:	9303      	str	r3, [sp, #12]
 800dc24:	b342      	cbz	r2, 800dc78 <__hexnan+0x88>
 800dc26:	4610      	mov	r0, r2
 800dc28:	9105      	str	r1, [sp, #20]
 800dc2a:	9204      	str	r2, [sp, #16]
 800dc2c:	f7ff fd75 	bl	800d71a <__hexdig_fun>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d14f      	bne.n	800dcd4 <__hexnan+0xe4>
 800dc34:	9a04      	ldr	r2, [sp, #16]
 800dc36:	9905      	ldr	r1, [sp, #20]
 800dc38:	2a20      	cmp	r2, #32
 800dc3a:	d818      	bhi.n	800dc6e <__hexnan+0x7e>
 800dc3c:	9b02      	ldr	r3, [sp, #8]
 800dc3e:	459b      	cmp	fp, r3
 800dc40:	dd13      	ble.n	800dc6a <__hexnan+0x7a>
 800dc42:	454c      	cmp	r4, r9
 800dc44:	d206      	bcs.n	800dc54 <__hexnan+0x64>
 800dc46:	2d07      	cmp	r5, #7
 800dc48:	dc04      	bgt.n	800dc54 <__hexnan+0x64>
 800dc4a:	462a      	mov	r2, r5
 800dc4c:	4649      	mov	r1, r9
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f7ff ffa8 	bl	800dba4 <L_shift>
 800dc54:	4544      	cmp	r4, r8
 800dc56:	d950      	bls.n	800dcfa <__hexnan+0x10a>
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f1a4 0904 	sub.w	r9, r4, #4
 800dc5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc62:	461d      	mov	r5, r3
 800dc64:	464c      	mov	r4, r9
 800dc66:	f8cd b008 	str.w	fp, [sp, #8]
 800dc6a:	9903      	ldr	r1, [sp, #12]
 800dc6c:	e7d7      	b.n	800dc1e <__hexnan+0x2e>
 800dc6e:	2a29      	cmp	r2, #41	; 0x29
 800dc70:	d155      	bne.n	800dd1e <__hexnan+0x12e>
 800dc72:	3102      	adds	r1, #2
 800dc74:	f8ca 1000 	str.w	r1, [sl]
 800dc78:	f1bb 0f00 	cmp.w	fp, #0
 800dc7c:	d04f      	beq.n	800dd1e <__hexnan+0x12e>
 800dc7e:	454c      	cmp	r4, r9
 800dc80:	d206      	bcs.n	800dc90 <__hexnan+0xa0>
 800dc82:	2d07      	cmp	r5, #7
 800dc84:	dc04      	bgt.n	800dc90 <__hexnan+0xa0>
 800dc86:	462a      	mov	r2, r5
 800dc88:	4649      	mov	r1, r9
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f7ff ff8a 	bl	800dba4 <L_shift>
 800dc90:	4544      	cmp	r4, r8
 800dc92:	d934      	bls.n	800dcfe <__hexnan+0x10e>
 800dc94:	4623      	mov	r3, r4
 800dc96:	f1a8 0204 	sub.w	r2, r8, #4
 800dc9a:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc9e:	429f      	cmp	r7, r3
 800dca0:	f842 1f04 	str.w	r1, [r2, #4]!
 800dca4:	d2f9      	bcs.n	800dc9a <__hexnan+0xaa>
 800dca6:	1b3b      	subs	r3, r7, r4
 800dca8:	f023 0303 	bic.w	r3, r3, #3
 800dcac:	3304      	adds	r3, #4
 800dcae:	3e03      	subs	r6, #3
 800dcb0:	3401      	adds	r4, #1
 800dcb2:	42a6      	cmp	r6, r4
 800dcb4:	bf38      	it	cc
 800dcb6:	2304      	movcc	r3, #4
 800dcb8:	2200      	movs	r2, #0
 800dcba:	4443      	add	r3, r8
 800dcbc:	f843 2b04 	str.w	r2, [r3], #4
 800dcc0:	429f      	cmp	r7, r3
 800dcc2:	d2fb      	bcs.n	800dcbc <__hexnan+0xcc>
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	b91b      	cbnz	r3, 800dcd0 <__hexnan+0xe0>
 800dcc8:	4547      	cmp	r7, r8
 800dcca:	d126      	bne.n	800dd1a <__hexnan+0x12a>
 800dccc:	2301      	movs	r3, #1
 800dcce:	603b      	str	r3, [r7, #0]
 800dcd0:	2005      	movs	r0, #5
 800dcd2:	e025      	b.n	800dd20 <__hexnan+0x130>
 800dcd4:	3501      	adds	r5, #1
 800dcd6:	2d08      	cmp	r5, #8
 800dcd8:	f10b 0b01 	add.w	fp, fp, #1
 800dcdc:	dd06      	ble.n	800dcec <__hexnan+0xfc>
 800dcde:	4544      	cmp	r4, r8
 800dce0:	d9c3      	bls.n	800dc6a <__hexnan+0x7a>
 800dce2:	2300      	movs	r3, #0
 800dce4:	2501      	movs	r5, #1
 800dce6:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcea:	3c04      	subs	r4, #4
 800dcec:	6822      	ldr	r2, [r4, #0]
 800dcee:	f000 000f 	and.w	r0, r0, #15
 800dcf2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dcf6:	6020      	str	r0, [r4, #0]
 800dcf8:	e7b7      	b.n	800dc6a <__hexnan+0x7a>
 800dcfa:	2508      	movs	r5, #8
 800dcfc:	e7b5      	b.n	800dc6a <__hexnan+0x7a>
 800dcfe:	9b01      	ldr	r3, [sp, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d0df      	beq.n	800dcc4 <__hexnan+0xd4>
 800dd04:	f04f 32ff 	mov.w	r2, #4294967295
 800dd08:	f1c3 0320 	rsb	r3, r3, #32
 800dd0c:	40da      	lsrs	r2, r3
 800dd0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd12:	4013      	ands	r3, r2
 800dd14:	f846 3c04 	str.w	r3, [r6, #-4]
 800dd18:	e7d4      	b.n	800dcc4 <__hexnan+0xd4>
 800dd1a:	3f04      	subs	r7, #4
 800dd1c:	e7d2      	b.n	800dcc4 <__hexnan+0xd4>
 800dd1e:	2004      	movs	r0, #4
 800dd20:	b007      	add	sp, #28
 800dd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd26 <__ascii_mbtowc>:
 800dd26:	b082      	sub	sp, #8
 800dd28:	b901      	cbnz	r1, 800dd2c <__ascii_mbtowc+0x6>
 800dd2a:	a901      	add	r1, sp, #4
 800dd2c:	b142      	cbz	r2, 800dd40 <__ascii_mbtowc+0x1a>
 800dd2e:	b14b      	cbz	r3, 800dd44 <__ascii_mbtowc+0x1e>
 800dd30:	7813      	ldrb	r3, [r2, #0]
 800dd32:	600b      	str	r3, [r1, #0]
 800dd34:	7812      	ldrb	r2, [r2, #0]
 800dd36:	1e10      	subs	r0, r2, #0
 800dd38:	bf18      	it	ne
 800dd3a:	2001      	movne	r0, #1
 800dd3c:	b002      	add	sp, #8
 800dd3e:	4770      	bx	lr
 800dd40:	4610      	mov	r0, r2
 800dd42:	e7fb      	b.n	800dd3c <__ascii_mbtowc+0x16>
 800dd44:	f06f 0001 	mvn.w	r0, #1
 800dd48:	e7f8      	b.n	800dd3c <__ascii_mbtowc+0x16>

0800dd4a <_realloc_r>:
 800dd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4e:	4680      	mov	r8, r0
 800dd50:	4614      	mov	r4, r2
 800dd52:	460e      	mov	r6, r1
 800dd54:	b921      	cbnz	r1, 800dd60 <_realloc_r+0x16>
 800dd56:	4611      	mov	r1, r2
 800dd58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd5c:	f7fd bc88 	b.w	800b670 <_malloc_r>
 800dd60:	b92a      	cbnz	r2, 800dd6e <_realloc_r+0x24>
 800dd62:	f7fd fc15 	bl	800b590 <_free_r>
 800dd66:	4625      	mov	r5, r4
 800dd68:	4628      	mov	r0, r5
 800dd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd6e:	f000 f842 	bl	800ddf6 <_malloc_usable_size_r>
 800dd72:	4284      	cmp	r4, r0
 800dd74:	4607      	mov	r7, r0
 800dd76:	d802      	bhi.n	800dd7e <_realloc_r+0x34>
 800dd78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd7c:	d812      	bhi.n	800dda4 <_realloc_r+0x5a>
 800dd7e:	4621      	mov	r1, r4
 800dd80:	4640      	mov	r0, r8
 800dd82:	f7fd fc75 	bl	800b670 <_malloc_r>
 800dd86:	4605      	mov	r5, r0
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d0ed      	beq.n	800dd68 <_realloc_r+0x1e>
 800dd8c:	42bc      	cmp	r4, r7
 800dd8e:	4622      	mov	r2, r4
 800dd90:	4631      	mov	r1, r6
 800dd92:	bf28      	it	cs
 800dd94:	463a      	movcs	r2, r7
 800dd96:	f7fc fd7a 	bl	800a88e <memcpy>
 800dd9a:	4631      	mov	r1, r6
 800dd9c:	4640      	mov	r0, r8
 800dd9e:	f7fd fbf7 	bl	800b590 <_free_r>
 800dda2:	e7e1      	b.n	800dd68 <_realloc_r+0x1e>
 800dda4:	4635      	mov	r5, r6
 800dda6:	e7df      	b.n	800dd68 <_realloc_r+0x1e>

0800dda8 <__ascii_wctomb>:
 800dda8:	4603      	mov	r3, r0
 800ddaa:	4608      	mov	r0, r1
 800ddac:	b141      	cbz	r1, 800ddc0 <__ascii_wctomb+0x18>
 800ddae:	2aff      	cmp	r2, #255	; 0xff
 800ddb0:	d904      	bls.n	800ddbc <__ascii_wctomb+0x14>
 800ddb2:	228a      	movs	r2, #138	; 0x8a
 800ddb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb8:	601a      	str	r2, [r3, #0]
 800ddba:	4770      	bx	lr
 800ddbc:	2001      	movs	r0, #1
 800ddbe:	700a      	strb	r2, [r1, #0]
 800ddc0:	4770      	bx	lr
	...

0800ddc4 <fiprintf>:
 800ddc4:	b40e      	push	{r1, r2, r3}
 800ddc6:	b503      	push	{r0, r1, lr}
 800ddc8:	4601      	mov	r1, r0
 800ddca:	ab03      	add	r3, sp, #12
 800ddcc:	4805      	ldr	r0, [pc, #20]	; (800dde4 <fiprintf+0x20>)
 800ddce:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddd2:	6800      	ldr	r0, [r0, #0]
 800ddd4:	9301      	str	r3, [sp, #4]
 800ddd6:	f7ff f991 	bl	800d0fc <_vfiprintf_r>
 800ddda:	b002      	add	sp, #8
 800dddc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dde0:	b003      	add	sp, #12
 800dde2:	4770      	bx	lr
 800dde4:	20000068 	.word	0x20000068

0800dde8 <abort>:
 800dde8:	2006      	movs	r0, #6
 800ddea:	b508      	push	{r3, lr}
 800ddec:	f000 f834 	bl	800de58 <raise>
 800ddf0:	2001      	movs	r0, #1
 800ddf2:	f7f5 fac6 	bl	8003382 <_exit>

0800ddf6 <_malloc_usable_size_r>:
 800ddf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddfa:	1f18      	subs	r0, r3, #4
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	bfbc      	itt	lt
 800de00:	580b      	ldrlt	r3, [r1, r0]
 800de02:	18c0      	addlt	r0, r0, r3
 800de04:	4770      	bx	lr

0800de06 <_raise_r>:
 800de06:	291f      	cmp	r1, #31
 800de08:	b538      	push	{r3, r4, r5, lr}
 800de0a:	4604      	mov	r4, r0
 800de0c:	460d      	mov	r5, r1
 800de0e:	d904      	bls.n	800de1a <_raise_r+0x14>
 800de10:	2316      	movs	r3, #22
 800de12:	6003      	str	r3, [r0, #0]
 800de14:	f04f 30ff 	mov.w	r0, #4294967295
 800de18:	bd38      	pop	{r3, r4, r5, pc}
 800de1a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800de1c:	b112      	cbz	r2, 800de24 <_raise_r+0x1e>
 800de1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de22:	b94b      	cbnz	r3, 800de38 <_raise_r+0x32>
 800de24:	4620      	mov	r0, r4
 800de26:	f000 f831 	bl	800de8c <_getpid_r>
 800de2a:	462a      	mov	r2, r5
 800de2c:	4601      	mov	r1, r0
 800de2e:	4620      	mov	r0, r4
 800de30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de34:	f000 b818 	b.w	800de68 <_kill_r>
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d00a      	beq.n	800de52 <_raise_r+0x4c>
 800de3c:	1c59      	adds	r1, r3, #1
 800de3e:	d103      	bne.n	800de48 <_raise_r+0x42>
 800de40:	2316      	movs	r3, #22
 800de42:	6003      	str	r3, [r0, #0]
 800de44:	2001      	movs	r0, #1
 800de46:	e7e7      	b.n	800de18 <_raise_r+0x12>
 800de48:	2400      	movs	r4, #0
 800de4a:	4628      	mov	r0, r5
 800de4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de50:	4798      	blx	r3
 800de52:	2000      	movs	r0, #0
 800de54:	e7e0      	b.n	800de18 <_raise_r+0x12>
	...

0800de58 <raise>:
 800de58:	4b02      	ldr	r3, [pc, #8]	; (800de64 <raise+0xc>)
 800de5a:	4601      	mov	r1, r0
 800de5c:	6818      	ldr	r0, [r3, #0]
 800de5e:	f7ff bfd2 	b.w	800de06 <_raise_r>
 800de62:	bf00      	nop
 800de64:	20000068 	.word	0x20000068

0800de68 <_kill_r>:
 800de68:	b538      	push	{r3, r4, r5, lr}
 800de6a:	2300      	movs	r3, #0
 800de6c:	4d06      	ldr	r5, [pc, #24]	; (800de88 <_kill_r+0x20>)
 800de6e:	4604      	mov	r4, r0
 800de70:	4608      	mov	r0, r1
 800de72:	4611      	mov	r1, r2
 800de74:	602b      	str	r3, [r5, #0]
 800de76:	f7f5 fa74 	bl	8003362 <_kill>
 800de7a:	1c43      	adds	r3, r0, #1
 800de7c:	d102      	bne.n	800de84 <_kill_r+0x1c>
 800de7e:	682b      	ldr	r3, [r5, #0]
 800de80:	b103      	cbz	r3, 800de84 <_kill_r+0x1c>
 800de82:	6023      	str	r3, [r4, #0]
 800de84:	bd38      	pop	{r3, r4, r5, pc}
 800de86:	bf00      	nop
 800de88:	20001e84 	.word	0x20001e84

0800de8c <_getpid_r>:
 800de8c:	f7f5 ba62 	b.w	8003354 <_getpid>

0800de90 <_init>:
 800de90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de92:	bf00      	nop
 800de94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de96:	bc08      	pop	{r3}
 800de98:	469e      	mov	lr, r3
 800de9a:	4770      	bx	lr

0800de9c <_fini>:
 800de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de9e:	bf00      	nop
 800dea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dea2:	bc08      	pop	{r3}
 800dea4:	469e      	mov	lr, r3
 800dea6:	4770      	bx	lr
